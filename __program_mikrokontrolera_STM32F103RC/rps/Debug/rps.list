
rps.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010420  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  08010604  08010604  00020604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010b54  08010b54  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  08010b54  08010b54  00020b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010b5c  08010b5c  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010b5c  08010b5c  00020b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010b60  08010b60  00020b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08010b64  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001948  200001e0  08010d44  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b28  08010d44  00031b28  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002268d  00000000  00000000  00030209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004ff7  00000000  00000000  00052896  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001688  00000000  00000000  00057890  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001400  00000000  00000000  00058f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020396  00000000  00000000  0005a318  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019187  00000000  00000000  0007a6ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009f891  00000000  00000000  00093835  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001330c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f44  00000000  00000000  00133144  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200001e0 	.word	0x200001e0
 8000200:	00000000 	.word	0x00000000
 8000204:	080105ec 	.word	0x080105ec

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200001e4 	.word	0x200001e4
 8000220:	080105ec 	.word	0x080105ec

08000224 <__aeabi_drsub>:
 8000224:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000228:	e002      	b.n	8000230 <__adddf3>
 800022a:	bf00      	nop

0800022c <__aeabi_dsub>:
 800022c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000230 <__adddf3>:
 8000230:	b530      	push	{r4, r5, lr}
 8000232:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000236:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023a:	ea94 0f05 	teq	r4, r5
 800023e:	bf08      	it	eq
 8000240:	ea90 0f02 	teqeq	r0, r2
 8000244:	bf1f      	itttt	ne
 8000246:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000252:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000256:	f000 80e2 	beq.w	800041e <__adddf3+0x1ee>
 800025a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000262:	bfb8      	it	lt
 8000264:	426d      	neglt	r5, r5
 8000266:	dd0c      	ble.n	8000282 <__adddf3+0x52>
 8000268:	442c      	add	r4, r5
 800026a:	ea80 0202 	eor.w	r2, r0, r2
 800026e:	ea81 0303 	eor.w	r3, r1, r3
 8000272:	ea82 0000 	eor.w	r0, r2, r0
 8000276:	ea83 0101 	eor.w	r1, r3, r1
 800027a:	ea80 0202 	eor.w	r2, r0, r2
 800027e:	ea81 0303 	eor.w	r3, r1, r3
 8000282:	2d36      	cmp	r5, #54	; 0x36
 8000284:	bf88      	it	hi
 8000286:	bd30      	pophi	{r4, r5, pc}
 8000288:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800028c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000290:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000294:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x70>
 800029a:	4240      	negs	r0, r0
 800029c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x84>
 80002ae:	4252      	negs	r2, r2
 80002b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b4:	ea94 0f05 	teq	r4, r5
 80002b8:	f000 80a7 	beq.w	800040a <__adddf3+0x1da>
 80002bc:	f1a4 0401 	sub.w	r4, r4, #1
 80002c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c4:	db0d      	blt.n	80002e2 <__adddf3+0xb2>
 80002c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ca:	fa22 f205 	lsr.w	r2, r2, r5
 80002ce:	1880      	adds	r0, r0, r2
 80002d0:	f141 0100 	adc.w	r1, r1, #0
 80002d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d8:	1880      	adds	r0, r0, r2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	4159      	adcs	r1, r3
 80002e0:	e00e      	b.n	8000300 <__adddf3+0xd0>
 80002e2:	f1a5 0520 	sub.w	r5, r5, #32
 80002e6:	f10e 0e20 	add.w	lr, lr, #32
 80002ea:	2a01      	cmp	r2, #1
 80002ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f0:	bf28      	it	cs
 80002f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	18c0      	adds	r0, r0, r3
 80002fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000300:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000304:	d507      	bpl.n	8000316 <__adddf3+0xe6>
 8000306:	f04f 0e00 	mov.w	lr, #0
 800030a:	f1dc 0c00 	rsbs	ip, ip, #0
 800030e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000312:	eb6e 0101 	sbc.w	r1, lr, r1
 8000316:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031a:	d31b      	bcc.n	8000354 <__adddf3+0x124>
 800031c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000320:	d30c      	bcc.n	800033c <__adddf3+0x10c>
 8000322:	0849      	lsrs	r1, r1, #1
 8000324:	ea5f 0030 	movs.w	r0, r0, rrx
 8000328:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800032c:	f104 0401 	add.w	r4, r4, #1
 8000330:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000334:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000338:	f080 809a 	bcs.w	8000470 <__adddf3+0x240>
 800033c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000340:	bf08      	it	eq
 8000342:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000346:	f150 0000 	adcs.w	r0, r0, #0
 800034a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034e:	ea41 0105 	orr.w	r1, r1, r5
 8000352:	bd30      	pop	{r4, r5, pc}
 8000354:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000358:	4140      	adcs	r0, r0
 800035a:	eb41 0101 	adc.w	r1, r1, r1
 800035e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000362:	f1a4 0401 	sub.w	r4, r4, #1
 8000366:	d1e9      	bne.n	800033c <__adddf3+0x10c>
 8000368:	f091 0f00 	teq	r1, #0
 800036c:	bf04      	itt	eq
 800036e:	4601      	moveq	r1, r0
 8000370:	2000      	moveq	r0, #0
 8000372:	fab1 f381 	clz	r3, r1
 8000376:	bf08      	it	eq
 8000378:	3320      	addeq	r3, #32
 800037a:	f1a3 030b 	sub.w	r3, r3, #11
 800037e:	f1b3 0220 	subs.w	r2, r3, #32
 8000382:	da0c      	bge.n	800039e <__adddf3+0x16e>
 8000384:	320c      	adds	r2, #12
 8000386:	dd08      	ble.n	800039a <__adddf3+0x16a>
 8000388:	f102 0c14 	add.w	ip, r2, #20
 800038c:	f1c2 020c 	rsb	r2, r2, #12
 8000390:	fa01 f00c 	lsl.w	r0, r1, ip
 8000394:	fa21 f102 	lsr.w	r1, r1, r2
 8000398:	e00c      	b.n	80003b4 <__adddf3+0x184>
 800039a:	f102 0214 	add.w	r2, r2, #20
 800039e:	bfd8      	it	le
 80003a0:	f1c2 0c20 	rsble	ip, r2, #32
 80003a4:	fa01 f102 	lsl.w	r1, r1, r2
 80003a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ac:	bfdc      	itt	le
 80003ae:	ea41 010c 	orrle.w	r1, r1, ip
 80003b2:	4090      	lslle	r0, r2
 80003b4:	1ae4      	subs	r4, r4, r3
 80003b6:	bfa2      	ittt	ge
 80003b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003bc:	4329      	orrge	r1, r5
 80003be:	bd30      	popge	{r4, r5, pc}
 80003c0:	ea6f 0404 	mvn.w	r4, r4
 80003c4:	3c1f      	subs	r4, #31
 80003c6:	da1c      	bge.n	8000402 <__adddf3+0x1d2>
 80003c8:	340c      	adds	r4, #12
 80003ca:	dc0e      	bgt.n	80003ea <__adddf3+0x1ba>
 80003cc:	f104 0414 	add.w	r4, r4, #20
 80003d0:	f1c4 0220 	rsb	r2, r4, #32
 80003d4:	fa20 f004 	lsr.w	r0, r0, r4
 80003d8:	fa01 f302 	lsl.w	r3, r1, r2
 80003dc:	ea40 0003 	orr.w	r0, r0, r3
 80003e0:	fa21 f304 	lsr.w	r3, r1, r4
 80003e4:	ea45 0103 	orr.w	r1, r5, r3
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f1c4 040c 	rsb	r4, r4, #12
 80003ee:	f1c4 0220 	rsb	r2, r4, #32
 80003f2:	fa20 f002 	lsr.w	r0, r0, r2
 80003f6:	fa01 f304 	lsl.w	r3, r1, r4
 80003fa:	ea40 0003 	orr.w	r0, r0, r3
 80003fe:	4629      	mov	r1, r5
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	fa21 f004 	lsr.w	r0, r1, r4
 8000406:	4629      	mov	r1, r5
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	f094 0f00 	teq	r4, #0
 800040e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000412:	bf06      	itte	eq
 8000414:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000418:	3401      	addeq	r4, #1
 800041a:	3d01      	subne	r5, #1
 800041c:	e74e      	b.n	80002bc <__adddf3+0x8c>
 800041e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000422:	bf18      	it	ne
 8000424:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000428:	d029      	beq.n	800047e <__adddf3+0x24e>
 800042a:	ea94 0f05 	teq	r4, r5
 800042e:	bf08      	it	eq
 8000430:	ea90 0f02 	teqeq	r0, r2
 8000434:	d005      	beq.n	8000442 <__adddf3+0x212>
 8000436:	ea54 0c00 	orrs.w	ip, r4, r0
 800043a:	bf04      	itt	eq
 800043c:	4619      	moveq	r1, r3
 800043e:	4610      	moveq	r0, r2
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea91 0f03 	teq	r1, r3
 8000446:	bf1e      	ittt	ne
 8000448:	2100      	movne	r1, #0
 800044a:	2000      	movne	r0, #0
 800044c:	bd30      	popne	{r4, r5, pc}
 800044e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000452:	d105      	bne.n	8000460 <__adddf3+0x230>
 8000454:	0040      	lsls	r0, r0, #1
 8000456:	4149      	adcs	r1, r1
 8000458:	bf28      	it	cs
 800045a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000464:	bf3c      	itt	cc
 8000466:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046a:	bd30      	popcc	{r4, r5, pc}
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000474:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000478:	f04f 0000 	mov.w	r0, #0
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000482:	bf1a      	itte	ne
 8000484:	4619      	movne	r1, r3
 8000486:	4610      	movne	r0, r2
 8000488:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800048c:	bf1c      	itt	ne
 800048e:	460b      	movne	r3, r1
 8000490:	4602      	movne	r2, r0
 8000492:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000496:	bf06      	itte	eq
 8000498:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800049c:	ea91 0f03 	teqeq	r1, r3
 80004a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	bf00      	nop

080004a8 <__aeabi_ui2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f04f 0500 	mov.w	r5, #0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e750      	b.n	8000368 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_i2d>:
 80004c8:	f090 0f00 	teq	r0, #0
 80004cc:	bf04      	itt	eq
 80004ce:	2100      	moveq	r1, #0
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e0:	bf48      	it	mi
 80004e2:	4240      	negmi	r0, r0
 80004e4:	f04f 0100 	mov.w	r1, #0
 80004e8:	e73e      	b.n	8000368 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_f2d>:
 80004ec:	0042      	lsls	r2, r0, #1
 80004ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fa:	bf1f      	itttt	ne
 80004fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000500:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000504:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000508:	4770      	bxne	lr
 800050a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050e:	bf08      	it	eq
 8000510:	4770      	bxeq	lr
 8000512:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000516:	bf04      	itt	eq
 8000518:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000524:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000528:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800052c:	e71c      	b.n	8000368 <__adddf3+0x138>
 800052e:	bf00      	nop

08000530 <__aeabi_ul2d>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	b530      	push	{r4, r5, lr}
 800053a:	f04f 0500 	mov.w	r5, #0
 800053e:	e00a      	b.n	8000556 <__aeabi_l2d+0x16>

08000540 <__aeabi_l2d>:
 8000540:	ea50 0201 	orrs.w	r2, r0, r1
 8000544:	bf08      	it	eq
 8000546:	4770      	bxeq	lr
 8000548:	b530      	push	{r4, r5, lr}
 800054a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054e:	d502      	bpl.n	8000556 <__aeabi_l2d+0x16>
 8000550:	4240      	negs	r0, r0
 8000552:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000556:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000562:	f43f aed8 	beq.w	8000316 <__adddf3+0xe6>
 8000566:	f04f 0203 	mov.w	r2, #3
 800056a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056e:	bf18      	it	ne
 8000570:	3203      	addne	r2, #3
 8000572:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000576:	bf18      	it	ne
 8000578:	3203      	addne	r2, #3
 800057a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057e:	f1c2 0320 	rsb	r3, r2, #32
 8000582:	fa00 fc03 	lsl.w	ip, r0, r3
 8000586:	fa20 f002 	lsr.w	r0, r0, r2
 800058a:	fa01 fe03 	lsl.w	lr, r1, r3
 800058e:	ea40 000e 	orr.w	r0, r0, lr
 8000592:	fa21 f102 	lsr.w	r1, r1, r2
 8000596:	4414      	add	r4, r2
 8000598:	e6bd      	b.n	8000316 <__adddf3+0xe6>
 800059a:	bf00      	nop

0800059c <__aeabi_frsub>:
 800059c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80005a0:	e002      	b.n	80005a8 <__addsf3>
 80005a2:	bf00      	nop

080005a4 <__aeabi_fsub>:
 80005a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080005a8 <__addsf3>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	bf1f      	itttt	ne
 80005ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80005b0:	ea92 0f03 	teqne	r2, r3
 80005b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80005b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005bc:	d06a      	beq.n	8000694 <__addsf3+0xec>
 80005be:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80005c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80005c6:	bfc1      	itttt	gt
 80005c8:	18d2      	addgt	r2, r2, r3
 80005ca:	4041      	eorgt	r1, r0
 80005cc:	4048      	eorgt	r0, r1
 80005ce:	4041      	eorgt	r1, r0
 80005d0:	bfb8      	it	lt
 80005d2:	425b      	neglt	r3, r3
 80005d4:	2b19      	cmp	r3, #25
 80005d6:	bf88      	it	hi
 80005d8:	4770      	bxhi	lr
 80005da:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80005de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80005e6:	bf18      	it	ne
 80005e8:	4240      	negne	r0, r0
 80005ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005ee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80005f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80005f6:	bf18      	it	ne
 80005f8:	4249      	negne	r1, r1
 80005fa:	ea92 0f03 	teq	r2, r3
 80005fe:	d03f      	beq.n	8000680 <__addsf3+0xd8>
 8000600:	f1a2 0201 	sub.w	r2, r2, #1
 8000604:	fa41 fc03 	asr.w	ip, r1, r3
 8000608:	eb10 000c 	adds.w	r0, r0, ip
 800060c:	f1c3 0320 	rsb	r3, r3, #32
 8000610:	fa01 f103 	lsl.w	r1, r1, r3
 8000614:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000618:	d502      	bpl.n	8000620 <__addsf3+0x78>
 800061a:	4249      	negs	r1, r1
 800061c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000620:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000624:	d313      	bcc.n	800064e <__addsf3+0xa6>
 8000626:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800062a:	d306      	bcc.n	800063a <__addsf3+0x92>
 800062c:	0840      	lsrs	r0, r0, #1
 800062e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000632:	f102 0201 	add.w	r2, r2, #1
 8000636:	2afe      	cmp	r2, #254	; 0xfe
 8000638:	d251      	bcs.n	80006de <__addsf3+0x136>
 800063a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800063e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000642:	bf08      	it	eq
 8000644:	f020 0001 	biceq.w	r0, r0, #1
 8000648:	ea40 0003 	orr.w	r0, r0, r3
 800064c:	4770      	bx	lr
 800064e:	0049      	lsls	r1, r1, #1
 8000650:	eb40 0000 	adc.w	r0, r0, r0
 8000654:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000658:	f1a2 0201 	sub.w	r2, r2, #1
 800065c:	d1ed      	bne.n	800063a <__addsf3+0x92>
 800065e:	fab0 fc80 	clz	ip, r0
 8000662:	f1ac 0c08 	sub.w	ip, ip, #8
 8000666:	ebb2 020c 	subs.w	r2, r2, ip
 800066a:	fa00 f00c 	lsl.w	r0, r0, ip
 800066e:	bfaa      	itet	ge
 8000670:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000674:	4252      	neglt	r2, r2
 8000676:	4318      	orrge	r0, r3
 8000678:	bfbc      	itt	lt
 800067a:	40d0      	lsrlt	r0, r2
 800067c:	4318      	orrlt	r0, r3
 800067e:	4770      	bx	lr
 8000680:	f092 0f00 	teq	r2, #0
 8000684:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000688:	bf06      	itte	eq
 800068a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800068e:	3201      	addeq	r2, #1
 8000690:	3b01      	subne	r3, #1
 8000692:	e7b5      	b.n	8000600 <__addsf3+0x58>
 8000694:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000698:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800069c:	bf18      	it	ne
 800069e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006a2:	d021      	beq.n	80006e8 <__addsf3+0x140>
 80006a4:	ea92 0f03 	teq	r2, r3
 80006a8:	d004      	beq.n	80006b4 <__addsf3+0x10c>
 80006aa:	f092 0f00 	teq	r2, #0
 80006ae:	bf08      	it	eq
 80006b0:	4608      	moveq	r0, r1
 80006b2:	4770      	bx	lr
 80006b4:	ea90 0f01 	teq	r0, r1
 80006b8:	bf1c      	itt	ne
 80006ba:	2000      	movne	r0, #0
 80006bc:	4770      	bxne	lr
 80006be:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80006c2:	d104      	bne.n	80006ce <__addsf3+0x126>
 80006c4:	0040      	lsls	r0, r0, #1
 80006c6:	bf28      	it	cs
 80006c8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80006cc:	4770      	bx	lr
 80006ce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80006d2:	bf3c      	itt	cc
 80006d4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80006d8:	4770      	bxcc	lr
 80006da:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006de:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80006e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006e6:	4770      	bx	lr
 80006e8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006ec:	bf16      	itet	ne
 80006ee:	4608      	movne	r0, r1
 80006f0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80006f4:	4601      	movne	r1, r0
 80006f6:	0242      	lsls	r2, r0, #9
 80006f8:	bf06      	itte	eq
 80006fa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80006fe:	ea90 0f01 	teqeq	r0, r1
 8000702:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000706:	4770      	bx	lr

08000708 <__aeabi_ui2f>:
 8000708:	f04f 0300 	mov.w	r3, #0
 800070c:	e004      	b.n	8000718 <__aeabi_i2f+0x8>
 800070e:	bf00      	nop

08000710 <__aeabi_i2f>:
 8000710:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000714:	bf48      	it	mi
 8000716:	4240      	negmi	r0, r0
 8000718:	ea5f 0c00 	movs.w	ip, r0
 800071c:	bf08      	it	eq
 800071e:	4770      	bxeq	lr
 8000720:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000724:	4601      	mov	r1, r0
 8000726:	f04f 0000 	mov.w	r0, #0
 800072a:	e01c      	b.n	8000766 <__aeabi_l2f+0x2a>

0800072c <__aeabi_ul2f>:
 800072c:	ea50 0201 	orrs.w	r2, r0, r1
 8000730:	bf08      	it	eq
 8000732:	4770      	bxeq	lr
 8000734:	f04f 0300 	mov.w	r3, #0
 8000738:	e00a      	b.n	8000750 <__aeabi_l2f+0x14>
 800073a:	bf00      	nop

0800073c <__aeabi_l2f>:
 800073c:	ea50 0201 	orrs.w	r2, r0, r1
 8000740:	bf08      	it	eq
 8000742:	4770      	bxeq	lr
 8000744:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000748:	d502      	bpl.n	8000750 <__aeabi_l2f+0x14>
 800074a:	4240      	negs	r0, r0
 800074c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000750:	ea5f 0c01 	movs.w	ip, r1
 8000754:	bf02      	ittt	eq
 8000756:	4684      	moveq	ip, r0
 8000758:	4601      	moveq	r1, r0
 800075a:	2000      	moveq	r0, #0
 800075c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000760:	bf08      	it	eq
 8000762:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000766:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800076a:	fabc f28c 	clz	r2, ip
 800076e:	3a08      	subs	r2, #8
 8000770:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000774:	db10      	blt.n	8000798 <__aeabi_l2f+0x5c>
 8000776:	fa01 fc02 	lsl.w	ip, r1, r2
 800077a:	4463      	add	r3, ip
 800077c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000780:	f1c2 0220 	rsb	r2, r2, #32
 8000784:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000788:	fa20 f202 	lsr.w	r2, r0, r2
 800078c:	eb43 0002 	adc.w	r0, r3, r2
 8000790:	bf08      	it	eq
 8000792:	f020 0001 	biceq.w	r0, r0, #1
 8000796:	4770      	bx	lr
 8000798:	f102 0220 	add.w	r2, r2, #32
 800079c:	fa01 fc02 	lsl.w	ip, r1, r2
 80007a0:	f1c2 0220 	rsb	r2, r2, #32
 80007a4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80007a8:	fa21 f202 	lsr.w	r2, r1, r2
 80007ac:	eb43 0002 	adc.w	r0, r3, r2
 80007b0:	bf08      	it	eq
 80007b2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007b6:	4770      	bx	lr

080007b8 <__aeabi_fmul>:
 80007b8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007bc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80007c0:	bf1e      	ittt	ne
 80007c2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80007c6:	ea92 0f0c 	teqne	r2, ip
 80007ca:	ea93 0f0c 	teqne	r3, ip
 80007ce:	d06f      	beq.n	80008b0 <__aeabi_fmul+0xf8>
 80007d0:	441a      	add	r2, r3
 80007d2:	ea80 0c01 	eor.w	ip, r0, r1
 80007d6:	0240      	lsls	r0, r0, #9
 80007d8:	bf18      	it	ne
 80007da:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80007de:	d01e      	beq.n	800081e <__aeabi_fmul+0x66>
 80007e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80007e4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80007e8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80007ec:	fba0 3101 	umull	r3, r1, r0, r1
 80007f0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80007f4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80007f8:	bf3e      	ittt	cc
 80007fa:	0049      	lslcc	r1, r1, #1
 80007fc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000800:	005b      	lslcc	r3, r3, #1
 8000802:	ea40 0001 	orr.w	r0, r0, r1
 8000806:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800080a:	2afd      	cmp	r2, #253	; 0xfd
 800080c:	d81d      	bhi.n	800084a <__aeabi_fmul+0x92>
 800080e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000812:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000816:	bf08      	it	eq
 8000818:	f020 0001 	biceq.w	r0, r0, #1
 800081c:	4770      	bx	lr
 800081e:	f090 0f00 	teq	r0, #0
 8000822:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000826:	bf08      	it	eq
 8000828:	0249      	lsleq	r1, r1, #9
 800082a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800082e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000832:	3a7f      	subs	r2, #127	; 0x7f
 8000834:	bfc2      	ittt	gt
 8000836:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800083a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800083e:	4770      	bxgt	lr
 8000840:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000844:	f04f 0300 	mov.w	r3, #0
 8000848:	3a01      	subs	r2, #1
 800084a:	dc5d      	bgt.n	8000908 <__aeabi_fmul+0x150>
 800084c:	f112 0f19 	cmn.w	r2, #25
 8000850:	bfdc      	itt	le
 8000852:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000856:	4770      	bxle	lr
 8000858:	f1c2 0200 	rsb	r2, r2, #0
 800085c:	0041      	lsls	r1, r0, #1
 800085e:	fa21 f102 	lsr.w	r1, r1, r2
 8000862:	f1c2 0220 	rsb	r2, r2, #32
 8000866:	fa00 fc02 	lsl.w	ip, r0, r2
 800086a:	ea5f 0031 	movs.w	r0, r1, rrx
 800086e:	f140 0000 	adc.w	r0, r0, #0
 8000872:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000876:	bf08      	it	eq
 8000878:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087c:	4770      	bx	lr
 800087e:	f092 0f00 	teq	r2, #0
 8000882:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000886:	bf02      	ittt	eq
 8000888:	0040      	lsleq	r0, r0, #1
 800088a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800088e:	3a01      	subeq	r2, #1
 8000890:	d0f9      	beq.n	8000886 <__aeabi_fmul+0xce>
 8000892:	ea40 000c 	orr.w	r0, r0, ip
 8000896:	f093 0f00 	teq	r3, #0
 800089a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800089e:	bf02      	ittt	eq
 80008a0:	0049      	lsleq	r1, r1, #1
 80008a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80008a6:	3b01      	subeq	r3, #1
 80008a8:	d0f9      	beq.n	800089e <__aeabi_fmul+0xe6>
 80008aa:	ea41 010c 	orr.w	r1, r1, ip
 80008ae:	e78f      	b.n	80007d0 <__aeabi_fmul+0x18>
 80008b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80008b4:	ea92 0f0c 	teq	r2, ip
 80008b8:	bf18      	it	ne
 80008ba:	ea93 0f0c 	teqne	r3, ip
 80008be:	d00a      	beq.n	80008d6 <__aeabi_fmul+0x11e>
 80008c0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80008c4:	bf18      	it	ne
 80008c6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80008ca:	d1d8      	bne.n	800087e <__aeabi_fmul+0xc6>
 80008cc:	ea80 0001 	eor.w	r0, r0, r1
 80008d0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008d4:	4770      	bx	lr
 80008d6:	f090 0f00 	teq	r0, #0
 80008da:	bf17      	itett	ne
 80008dc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80008e0:	4608      	moveq	r0, r1
 80008e2:	f091 0f00 	teqne	r1, #0
 80008e6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80008ea:	d014      	beq.n	8000916 <__aeabi_fmul+0x15e>
 80008ec:	ea92 0f0c 	teq	r2, ip
 80008f0:	d101      	bne.n	80008f6 <__aeabi_fmul+0x13e>
 80008f2:	0242      	lsls	r2, r0, #9
 80008f4:	d10f      	bne.n	8000916 <__aeabi_fmul+0x15e>
 80008f6:	ea93 0f0c 	teq	r3, ip
 80008fa:	d103      	bne.n	8000904 <__aeabi_fmul+0x14c>
 80008fc:	024b      	lsls	r3, r1, #9
 80008fe:	bf18      	it	ne
 8000900:	4608      	movne	r0, r1
 8000902:	d108      	bne.n	8000916 <__aeabi_fmul+0x15e>
 8000904:	ea80 0001 	eor.w	r0, r0, r1
 8000908:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800090c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000910:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000914:	4770      	bx	lr
 8000916:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800091a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800091e:	4770      	bx	lr

08000920 <__aeabi_fdiv>:
 8000920:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000924:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000928:	bf1e      	ittt	ne
 800092a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800092e:	ea92 0f0c 	teqne	r2, ip
 8000932:	ea93 0f0c 	teqne	r3, ip
 8000936:	d069      	beq.n	8000a0c <__aeabi_fdiv+0xec>
 8000938:	eba2 0203 	sub.w	r2, r2, r3
 800093c:	ea80 0c01 	eor.w	ip, r0, r1
 8000940:	0249      	lsls	r1, r1, #9
 8000942:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000946:	d037      	beq.n	80009b8 <__aeabi_fdiv+0x98>
 8000948:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800094c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000950:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000954:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000958:	428b      	cmp	r3, r1
 800095a:	bf38      	it	cc
 800095c:	005b      	lslcc	r3, r3, #1
 800095e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000962:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000966:	428b      	cmp	r3, r1
 8000968:	bf24      	itt	cs
 800096a:	1a5b      	subcs	r3, r3, r1
 800096c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000970:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000974:	bf24      	itt	cs
 8000976:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800097a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800097e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000982:	bf24      	itt	cs
 8000984:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000988:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800098c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000990:	bf24      	itt	cs
 8000992:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000996:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800099a:	011b      	lsls	r3, r3, #4
 800099c:	bf18      	it	ne
 800099e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80009a2:	d1e0      	bne.n	8000966 <__aeabi_fdiv+0x46>
 80009a4:	2afd      	cmp	r2, #253	; 0xfd
 80009a6:	f63f af50 	bhi.w	800084a <__aeabi_fmul+0x92>
 80009aa:	428b      	cmp	r3, r1
 80009ac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009b0:	bf08      	it	eq
 80009b2:	f020 0001 	biceq.w	r0, r0, #1
 80009b6:	4770      	bx	lr
 80009b8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80009bc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009c0:	327f      	adds	r2, #127	; 0x7f
 80009c2:	bfc2      	ittt	gt
 80009c4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80009c8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009cc:	4770      	bxgt	lr
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f04f 0300 	mov.w	r3, #0
 80009d6:	3a01      	subs	r2, #1
 80009d8:	e737      	b.n	800084a <__aeabi_fmul+0x92>
 80009da:	f092 0f00 	teq	r2, #0
 80009de:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80009e2:	bf02      	ittt	eq
 80009e4:	0040      	lsleq	r0, r0, #1
 80009e6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80009ea:	3a01      	subeq	r2, #1
 80009ec:	d0f9      	beq.n	80009e2 <__aeabi_fdiv+0xc2>
 80009ee:	ea40 000c 	orr.w	r0, r0, ip
 80009f2:	f093 0f00 	teq	r3, #0
 80009f6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009fa:	bf02      	ittt	eq
 80009fc:	0049      	lsleq	r1, r1, #1
 80009fe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a02:	3b01      	subeq	r3, #1
 8000a04:	d0f9      	beq.n	80009fa <__aeabi_fdiv+0xda>
 8000a06:	ea41 010c 	orr.w	r1, r1, ip
 8000a0a:	e795      	b.n	8000938 <__aeabi_fdiv+0x18>
 8000a0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a10:	ea92 0f0c 	teq	r2, ip
 8000a14:	d108      	bne.n	8000a28 <__aeabi_fdiv+0x108>
 8000a16:	0242      	lsls	r2, r0, #9
 8000a18:	f47f af7d 	bne.w	8000916 <__aeabi_fmul+0x15e>
 8000a1c:	ea93 0f0c 	teq	r3, ip
 8000a20:	f47f af70 	bne.w	8000904 <__aeabi_fmul+0x14c>
 8000a24:	4608      	mov	r0, r1
 8000a26:	e776      	b.n	8000916 <__aeabi_fmul+0x15e>
 8000a28:	ea93 0f0c 	teq	r3, ip
 8000a2c:	d104      	bne.n	8000a38 <__aeabi_fdiv+0x118>
 8000a2e:	024b      	lsls	r3, r1, #9
 8000a30:	f43f af4c 	beq.w	80008cc <__aeabi_fmul+0x114>
 8000a34:	4608      	mov	r0, r1
 8000a36:	e76e      	b.n	8000916 <__aeabi_fmul+0x15e>
 8000a38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a3c:	bf18      	it	ne
 8000a3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a42:	d1ca      	bne.n	80009da <__aeabi_fdiv+0xba>
 8000a44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a48:	f47f af5c 	bne.w	8000904 <__aeabi_fmul+0x14c>
 8000a4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a50:	f47f af3c 	bne.w	80008cc <__aeabi_fmul+0x114>
 8000a54:	e75f      	b.n	8000916 <__aeabi_fmul+0x15e>
 8000a56:	bf00      	nop

08000a58 <__aeabi_f2iz>:
 8000a58:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000a60:	d30f      	bcc.n	8000a82 <__aeabi_f2iz+0x2a>
 8000a62:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000a66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000a6a:	d90d      	bls.n	8000a88 <__aeabi_f2iz+0x30>
 8000a6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000a70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a74:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a78:	fa23 f002 	lsr.w	r0, r3, r2
 8000a7c:	bf18      	it	ne
 8000a7e:	4240      	negne	r0, r0
 8000a80:	4770      	bx	lr
 8000a82:	f04f 0000 	mov.w	r0, #0
 8000a86:	4770      	bx	lr
 8000a88:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000a8c:	d101      	bne.n	8000a92 <__aeabi_f2iz+0x3a>
 8000a8e:	0242      	lsls	r2, r0, #9
 8000a90:	d105      	bne.n	8000a9e <__aeabi_f2iz+0x46>
 8000a92:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000a96:	bf08      	it	eq
 8000a98:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9c:	4770      	bx	lr
 8000a9e:	f04f 0000 	mov.w	r0, #0
 8000aa2:	4770      	bx	lr

08000aa4 <__aeabi_ldivmod>:
 8000aa4:	b97b      	cbnz	r3, 8000ac6 <__aeabi_ldivmod+0x22>
 8000aa6:	b972      	cbnz	r2, 8000ac6 <__aeabi_ldivmod+0x22>
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	bfbe      	ittt	lt
 8000aac:	2000      	movlt	r0, #0
 8000aae:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ab2:	e006      	blt.n	8000ac2 <__aeabi_ldivmod+0x1e>
 8000ab4:	bf08      	it	eq
 8000ab6:	2800      	cmpeq	r0, #0
 8000ab8:	bf1c      	itt	ne
 8000aba:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000abe:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ac2:	f000 b9a7 	b.w	8000e14 <__aeabi_idiv0>
 8000ac6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aca:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ace:	2900      	cmp	r1, #0
 8000ad0:	db09      	blt.n	8000ae6 <__aeabi_ldivmod+0x42>
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	db1a      	blt.n	8000b0c <__aeabi_ldivmod+0x68>
 8000ad6:	f000 f835 	bl	8000b44 <__udivmoddi4>
 8000ada:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ade:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae2:	b004      	add	sp, #16
 8000ae4:	4770      	bx	lr
 8000ae6:	4240      	negs	r0, r0
 8000ae8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	db1b      	blt.n	8000b28 <__aeabi_ldivmod+0x84>
 8000af0:	f000 f828 	bl	8000b44 <__udivmoddi4>
 8000af4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000afc:	b004      	add	sp, #16
 8000afe:	4240      	negs	r0, r0
 8000b00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b04:	4252      	negs	r2, r2
 8000b06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b0a:	4770      	bx	lr
 8000b0c:	4252      	negs	r2, r2
 8000b0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b12:	f000 f817 	bl	8000b44 <__udivmoddi4>
 8000b16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b1e:	b004      	add	sp, #16
 8000b20:	4240      	negs	r0, r0
 8000b22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b26:	4770      	bx	lr
 8000b28:	4252      	negs	r2, r2
 8000b2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b2e:	f000 f809 	bl	8000b44 <__udivmoddi4>
 8000b32:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b3a:	b004      	add	sp, #16
 8000b3c:	4252      	negs	r2, r2
 8000b3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b42:	4770      	bx	lr

08000b44 <__udivmoddi4>:
 8000b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b48:	468c      	mov	ip, r1
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	9e08      	ldr	r6, [sp, #32]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d14b      	bne.n	8000bea <__udivmoddi4+0xa6>
 8000b52:	428a      	cmp	r2, r1
 8000b54:	4615      	mov	r5, r2
 8000b56:	d967      	bls.n	8000c28 <__udivmoddi4+0xe4>
 8000b58:	fab2 f282 	clz	r2, r2
 8000b5c:	b14a      	cbz	r2, 8000b72 <__udivmoddi4+0x2e>
 8000b5e:	f1c2 0720 	rsb	r7, r2, #32
 8000b62:	fa01 f302 	lsl.w	r3, r1, r2
 8000b66:	fa20 f707 	lsr.w	r7, r0, r7
 8000b6a:	4095      	lsls	r5, r2
 8000b6c:	ea47 0c03 	orr.w	ip, r7, r3
 8000b70:	4094      	lsls	r4, r2
 8000b72:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b76:	fbbc f7fe 	udiv	r7, ip, lr
 8000b7a:	fa1f f885 	uxth.w	r8, r5
 8000b7e:	fb0e c317 	mls	r3, lr, r7, ip
 8000b82:	fb07 f908 	mul.w	r9, r7, r8
 8000b86:	0c21      	lsrs	r1, r4, #16
 8000b88:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b8c:	4599      	cmp	r9, r3
 8000b8e:	d909      	bls.n	8000ba4 <__udivmoddi4+0x60>
 8000b90:	18eb      	adds	r3, r5, r3
 8000b92:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 8000b96:	f080 811c 	bcs.w	8000dd2 <__udivmoddi4+0x28e>
 8000b9a:	4599      	cmp	r9, r3
 8000b9c:	f240 8119 	bls.w	8000dd2 <__udivmoddi4+0x28e>
 8000ba0:	3f02      	subs	r7, #2
 8000ba2:	442b      	add	r3, r5
 8000ba4:	eba3 0309 	sub.w	r3, r3, r9
 8000ba8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bb0:	fb00 f108 	mul.w	r1, r0, r8
 8000bb4:	b2a4      	uxth	r4, r4
 8000bb6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bba:	42a1      	cmp	r1, r4
 8000bbc:	d909      	bls.n	8000bd2 <__udivmoddi4+0x8e>
 8000bbe:	192c      	adds	r4, r5, r4
 8000bc0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bc4:	f080 8107 	bcs.w	8000dd6 <__udivmoddi4+0x292>
 8000bc8:	42a1      	cmp	r1, r4
 8000bca:	f240 8104 	bls.w	8000dd6 <__udivmoddi4+0x292>
 8000bce:	3802      	subs	r0, #2
 8000bd0:	442c      	add	r4, r5
 8000bd2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bd6:	2700      	movs	r7, #0
 8000bd8:	1a64      	subs	r4, r4, r1
 8000bda:	b11e      	cbz	r6, 8000be4 <__udivmoddi4+0xa0>
 8000bdc:	2300      	movs	r3, #0
 8000bde:	40d4      	lsrs	r4, r2
 8000be0:	e9c6 4300 	strd	r4, r3, [r6]
 8000be4:	4639      	mov	r1, r7
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	428b      	cmp	r3, r1
 8000bec:	d909      	bls.n	8000c02 <__udivmoddi4+0xbe>
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	f000 80ec 	beq.w	8000dcc <__udivmoddi4+0x288>
 8000bf4:	2700      	movs	r7, #0
 8000bf6:	e9c6 0100 	strd	r0, r1, [r6]
 8000bfa:	4638      	mov	r0, r7
 8000bfc:	4639      	mov	r1, r7
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	fab3 f783 	clz	r7, r3
 8000c06:	2f00      	cmp	r7, #0
 8000c08:	d148      	bne.n	8000c9c <__udivmoddi4+0x158>
 8000c0a:	428b      	cmp	r3, r1
 8000c0c:	d302      	bcc.n	8000c14 <__udivmoddi4+0xd0>
 8000c0e:	4282      	cmp	r2, r0
 8000c10:	f200 80fb 	bhi.w	8000e0a <__udivmoddi4+0x2c6>
 8000c14:	1a84      	subs	r4, r0, r2
 8000c16:	eb61 0303 	sbc.w	r3, r1, r3
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	469c      	mov	ip, r3
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d0e0      	beq.n	8000be4 <__udivmoddi4+0xa0>
 8000c22:	e9c6 4c00 	strd	r4, ip, [r6]
 8000c26:	e7dd      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000c28:	b902      	cbnz	r2, 8000c2c <__udivmoddi4+0xe8>
 8000c2a:	deff      	udf	#255	; 0xff
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	2a00      	cmp	r2, #0
 8000c32:	f040 808f 	bne.w	8000d54 <__udivmoddi4+0x210>
 8000c36:	2701      	movs	r7, #1
 8000c38:	1b49      	subs	r1, r1, r5
 8000c3a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000c3e:	fa1f f985 	uxth.w	r9, r5
 8000c42:	fbb1 fef8 	udiv	lr, r1, r8
 8000c46:	fb08 111e 	mls	r1, r8, lr, r1
 8000c4a:	fb09 f00e 	mul.w	r0, r9, lr
 8000c4e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000c52:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000c56:	4298      	cmp	r0, r3
 8000c58:	d907      	bls.n	8000c6a <__udivmoddi4+0x126>
 8000c5a:	18eb      	adds	r3, r5, r3
 8000c5c:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8000c60:	d202      	bcs.n	8000c68 <__udivmoddi4+0x124>
 8000c62:	4298      	cmp	r0, r3
 8000c64:	f200 80cd 	bhi.w	8000e02 <__udivmoddi4+0x2be>
 8000c68:	468e      	mov	lr, r1
 8000c6a:	1a1b      	subs	r3, r3, r0
 8000c6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c70:	fb08 3310 	mls	r3, r8, r0, r3
 8000c74:	fb09 f900 	mul.w	r9, r9, r0
 8000c78:	b2a4      	uxth	r4, r4
 8000c7a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7e:	45a1      	cmp	r9, r4
 8000c80:	d907      	bls.n	8000c92 <__udivmoddi4+0x14e>
 8000c82:	192c      	adds	r4, r5, r4
 8000c84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c88:	d202      	bcs.n	8000c90 <__udivmoddi4+0x14c>
 8000c8a:	45a1      	cmp	r9, r4
 8000c8c:	f200 80b6 	bhi.w	8000dfc <__udivmoddi4+0x2b8>
 8000c90:	4618      	mov	r0, r3
 8000c92:	eba4 0409 	sub.w	r4, r4, r9
 8000c96:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000c9a:	e79e      	b.n	8000bda <__udivmoddi4+0x96>
 8000c9c:	f1c7 0520 	rsb	r5, r7, #32
 8000ca0:	40bb      	lsls	r3, r7
 8000ca2:	fa22 fc05 	lsr.w	ip, r2, r5
 8000ca6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000caa:	fa21 f405 	lsr.w	r4, r1, r5
 8000cae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cb2:	fbb4 f9fe 	udiv	r9, r4, lr
 8000cb6:	fa1f f88c 	uxth.w	r8, ip
 8000cba:	fb0e 4419 	mls	r4, lr, r9, r4
 8000cbe:	fa20 f305 	lsr.w	r3, r0, r5
 8000cc2:	40b9      	lsls	r1, r7
 8000cc4:	fb09 fa08 	mul.w	sl, r9, r8
 8000cc8:	4319      	orrs	r1, r3
 8000cca:	0c0b      	lsrs	r3, r1, #16
 8000ccc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cd0:	45a2      	cmp	sl, r4
 8000cd2:	fa02 f207 	lsl.w	r2, r2, r7
 8000cd6:	fa00 f307 	lsl.w	r3, r0, r7
 8000cda:	d90b      	bls.n	8000cf4 <__udivmoddi4+0x1b0>
 8000cdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ce4:	f080 8088 	bcs.w	8000df8 <__udivmoddi4+0x2b4>
 8000ce8:	45a2      	cmp	sl, r4
 8000cea:	f240 8085 	bls.w	8000df8 <__udivmoddi4+0x2b4>
 8000cee:	f1a9 0902 	sub.w	r9, r9, #2
 8000cf2:	4464      	add	r4, ip
 8000cf4:	eba4 040a 	sub.w	r4, r4, sl
 8000cf8:	fbb4 f0fe 	udiv	r0, r4, lr
 8000cfc:	fb0e 4410 	mls	r4, lr, r0, r4
 8000d00:	fb00 fa08 	mul.w	sl, r0, r8
 8000d04:	b289      	uxth	r1, r1
 8000d06:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000d0a:	45a2      	cmp	sl, r4
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x1dc>
 8000d0e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d12:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d16:	d26b      	bcs.n	8000df0 <__udivmoddi4+0x2ac>
 8000d18:	45a2      	cmp	sl, r4
 8000d1a:	d969      	bls.n	8000df0 <__udivmoddi4+0x2ac>
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	4464      	add	r4, ip
 8000d20:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d24:	fba0 8902 	umull	r8, r9, r0, r2
 8000d28:	eba4 040a 	sub.w	r4, r4, sl
 8000d2c:	454c      	cmp	r4, r9
 8000d2e:	4641      	mov	r1, r8
 8000d30:	46ce      	mov	lr, r9
 8000d32:	d354      	bcc.n	8000dde <__udivmoddi4+0x29a>
 8000d34:	d051      	beq.n	8000dda <__udivmoddi4+0x296>
 8000d36:	2e00      	cmp	r6, #0
 8000d38:	d069      	beq.n	8000e0e <__udivmoddi4+0x2ca>
 8000d3a:	1a5a      	subs	r2, r3, r1
 8000d3c:	eb64 040e 	sbc.w	r4, r4, lr
 8000d40:	fa04 f505 	lsl.w	r5, r4, r5
 8000d44:	fa22 f307 	lsr.w	r3, r2, r7
 8000d48:	40fc      	lsrs	r4, r7
 8000d4a:	431d      	orrs	r5, r3
 8000d4c:	e9c6 5400 	strd	r5, r4, [r6]
 8000d50:	2700      	movs	r7, #0
 8000d52:	e747      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000d54:	4095      	lsls	r5, r2
 8000d56:	f1c2 0320 	rsb	r3, r2, #32
 8000d5a:	fa21 f003 	lsr.w	r0, r1, r3
 8000d5e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000d62:	fbb0 f7f8 	udiv	r7, r0, r8
 8000d66:	fa1f f985 	uxth.w	r9, r5
 8000d6a:	fb08 0017 	mls	r0, r8, r7, r0
 8000d6e:	fa24 f303 	lsr.w	r3, r4, r3
 8000d72:	4091      	lsls	r1, r2
 8000d74:	fb07 fc09 	mul.w	ip, r7, r9
 8000d78:	430b      	orrs	r3, r1
 8000d7a:	0c19      	lsrs	r1, r3, #16
 8000d7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d80:	458c      	cmp	ip, r1
 8000d82:	fa04 f402 	lsl.w	r4, r4, r2
 8000d86:	d907      	bls.n	8000d98 <__udivmoddi4+0x254>
 8000d88:	1869      	adds	r1, r5, r1
 8000d8a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d8e:	d231      	bcs.n	8000df4 <__udivmoddi4+0x2b0>
 8000d90:	458c      	cmp	ip, r1
 8000d92:	d92f      	bls.n	8000df4 <__udivmoddi4+0x2b0>
 8000d94:	3f02      	subs	r7, #2
 8000d96:	4429      	add	r1, r5
 8000d98:	eba1 010c 	sub.w	r1, r1, ip
 8000d9c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000da0:	fb08 1c10 	mls	ip, r8, r0, r1
 8000da4:	fb00 fe09 	mul.w	lr, r0, r9
 8000da8:	b299      	uxth	r1, r3
 8000daa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dae:	458e      	cmp	lr, r1
 8000db0:	d907      	bls.n	8000dc2 <__udivmoddi4+0x27e>
 8000db2:	1869      	adds	r1, r5, r1
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000db8:	d218      	bcs.n	8000dec <__udivmoddi4+0x2a8>
 8000dba:	458e      	cmp	lr, r1
 8000dbc:	d916      	bls.n	8000dec <__udivmoddi4+0x2a8>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4429      	add	r1, r5
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dca:	e73a      	b.n	8000c42 <__udivmoddi4+0xfe>
 8000dcc:	4637      	mov	r7, r6
 8000dce:	4630      	mov	r0, r6
 8000dd0:	e708      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000dd2:	460f      	mov	r7, r1
 8000dd4:	e6e6      	b.n	8000ba4 <__udivmoddi4+0x60>
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	e6fb      	b.n	8000bd2 <__udivmoddi4+0x8e>
 8000dda:	4543      	cmp	r3, r8
 8000ddc:	d2ab      	bcs.n	8000d36 <__udivmoddi4+0x1f2>
 8000dde:	ebb8 0102 	subs.w	r1, r8, r2
 8000de2:	eb69 020c 	sbc.w	r2, r9, ip
 8000de6:	3801      	subs	r0, #1
 8000de8:	4696      	mov	lr, r2
 8000dea:	e7a4      	b.n	8000d36 <__udivmoddi4+0x1f2>
 8000dec:	4618      	mov	r0, r3
 8000dee:	e7e8      	b.n	8000dc2 <__udivmoddi4+0x27e>
 8000df0:	4608      	mov	r0, r1
 8000df2:	e795      	b.n	8000d20 <__udivmoddi4+0x1dc>
 8000df4:	4607      	mov	r7, r0
 8000df6:	e7cf      	b.n	8000d98 <__udivmoddi4+0x254>
 8000df8:	4681      	mov	r9, r0
 8000dfa:	e77b      	b.n	8000cf4 <__udivmoddi4+0x1b0>
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	442c      	add	r4, r5
 8000e00:	e747      	b.n	8000c92 <__udivmoddi4+0x14e>
 8000e02:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e06:	442b      	add	r3, r5
 8000e08:	e72f      	b.n	8000c6a <__udivmoddi4+0x126>
 8000e0a:	4638      	mov	r0, r7
 8000e0c:	e707      	b.n	8000c1e <__udivmoddi4+0xda>
 8000e0e:	4637      	mov	r7, r6
 8000e10:	e6e8      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000e12:	bf00      	nop

08000e14 <__aeabi_idiv0>:
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop

08000e18 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2c:	4b4d      	ldr	r3, [pc, #308]	; (8000f64 <MX_GPIO_Init+0x14c>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4a4c      	ldr	r2, [pc, #304]	; (8000f64 <MX_GPIO_Init+0x14c>)
 8000e32:	f043 0310 	orr.w	r3, r3, #16
 8000e36:	6193      	str	r3, [r2, #24]
 8000e38:	4b4a      	ldr	r3, [pc, #296]	; (8000f64 <MX_GPIO_Init+0x14c>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f003 0310 	and.w	r3, r3, #16
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e44:	4b47      	ldr	r3, [pc, #284]	; (8000f64 <MX_GPIO_Init+0x14c>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	4a46      	ldr	r2, [pc, #280]	; (8000f64 <MX_GPIO_Init+0x14c>)
 8000e4a:	f043 0320 	orr.w	r3, r3, #32
 8000e4e:	6193      	str	r3, [r2, #24]
 8000e50:	4b44      	ldr	r3, [pc, #272]	; (8000f64 <MX_GPIO_Init+0x14c>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f003 0320 	and.w	r3, r3, #32
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5c:	4b41      	ldr	r3, [pc, #260]	; (8000f64 <MX_GPIO_Init+0x14c>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	4a40      	ldr	r2, [pc, #256]	; (8000f64 <MX_GPIO_Init+0x14c>)
 8000e62:	f043 0304 	orr.w	r3, r3, #4
 8000e66:	6193      	str	r3, [r2, #24]
 8000e68:	4b3e      	ldr	r3, [pc, #248]	; (8000f64 <MX_GPIO_Init+0x14c>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	f003 0304 	and.w	r3, r3, #4
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e74:	4b3b      	ldr	r3, [pc, #236]	; (8000f64 <MX_GPIO_Init+0x14c>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	4a3a      	ldr	r2, [pc, #232]	; (8000f64 <MX_GPIO_Init+0x14c>)
 8000e7a:	f043 0308 	orr.w	r3, r3, #8
 8000e7e:	6193      	str	r3, [r2, #24]
 8000e80:	4b38      	ldr	r3, [pc, #224]	; (8000f64 <MX_GPIO_Init+0x14c>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	f003 0308 	and.w	r3, r3, #8
 8000e88:	603b      	str	r3, [r7, #0]
 8000e8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_G_Pin|LED_Y_Pin|LED_R_Pin, GPIO_PIN_SET);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	210e      	movs	r1, #14
 8000e90:	4835      	ldr	r0, [pc, #212]	; (8000f68 <MX_GPIO_Init+0x150>)
 8000e92:	f002 fbcc 	bl	800362e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BME280_CS_GPIO_Port, BME280_CS_Pin, GPIO_PIN_SET);
 8000e96:	2201      	movs	r2, #1
 8000e98:	2101      	movs	r1, #1
 8000e9a:	4834      	ldr	r0, [pc, #208]	; (8000f6c <MX_GPIO_Init+0x154>)
 8000e9c:	f002 fbc7 	bl	800362e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC4 PC5
                           PC6 PC7 PC9 PC10
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5
 8000ea0:	f642 63f1 	movw	r3, #12017	; 0x2ef1
 8000ea4:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eaa:	f107 0310 	add.w	r3, r7, #16
 8000eae:	4619      	mov	r1, r3
 8000eb0:	482d      	ldr	r0, [pc, #180]	; (8000f68 <MX_GPIO_Init+0x150>)
 8000eb2:	f002 f96f 	bl	8003194 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_Y_Pin|LED_R_Pin;
 8000eb6:	230e      	movs	r3, #14
 8000eb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec6:	f107 0310 	add.w	r3, r7, #16
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4826      	ldr	r0, [pc, #152]	; (8000f68 <MX_GPIO_Init+0x150>)
 8000ece:	f002 f961 	bl	8003194 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA8 PA9 PA10
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ed2:	f248 731f 	movw	r3, #34591	; 0x871f
 8000ed6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4823      	ldr	r0, [pc, #140]	; (8000f70 <MX_GPIO_Init+0x158>)
 8000ee4:	f002 f956 	bl	8003194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BME280_CS_Pin;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eec:	2301      	movs	r3, #1
 8000eee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BME280_CS_GPIO_Port, &GPIO_InitStruct);
 8000ef8:	f107 0310 	add.w	r3, r7, #16
 8000efc:	4619      	mov	r1, r3
 8000efe:	481b      	ldr	r0, [pc, #108]	; (8000f6c <MX_GPIO_Init+0x154>)
 8000f00:	f002 f948 	bl	8003194 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8000f04:	f64f 731e 	movw	r3, #65310	; 0xff1e
 8000f08:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0e:	f107 0310 	add.w	r3, r7, #16
 8000f12:	4619      	mov	r1, r3
 8000f14:	4815      	ldr	r0, [pc, #84]	; (8000f6c <MX_GPIO_Init+0x154>)
 8000f16:	f002 f93d 	bl	8003194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CD_Pin;
 8000f1a:	2320      	movs	r3, #32
 8000f1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f22:	2301      	movs	r3, #1
 8000f24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 8000f26:	f107 0310 	add.w	r3, r7, #16
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	480f      	ldr	r0, [pc, #60]	; (8000f6c <MX_GPIO_Init+0x154>)
 8000f2e:	f002 f931 	bl	8003194 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BUTTON_A_Pin|BUTTON_B_Pin;
 8000f32:	23c0      	movs	r3, #192	; 0xc0
 8000f34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <MX_GPIO_Init+0x15c>)
 8000f38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3e:	f107 0310 	add.w	r3, r7, #16
 8000f42:	4619      	mov	r1, r3
 8000f44:	4809      	ldr	r0, [pc, #36]	; (8000f6c <MX_GPIO_Init+0x154>)
 8000f46:	f002 f925 	bl	8003194 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2102      	movs	r1, #2
 8000f4e:	2017      	movs	r0, #23
 8000f50:	f002 f8e9 	bl	8003126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f54:	2017      	movs	r0, #23
 8000f56:	f002 f902 	bl	800315e <HAL_NVIC_EnableIRQ>

}
 8000f5a:	bf00      	nop
 8000f5c:	3720      	adds	r7, #32
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40011000 	.word	0x40011000
 8000f6c:	40010c00 	.word	0x40010c00
 8000f70:	40010800 	.word	0x40010800
 8000f74:	10110000 	.word	0x10110000

08000f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7e:	f001 ff77 	bl	8002e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f82:	f000 f8f7 	bl	8001174 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f86:	f7ff ff47 	bl	8000e18 <MX_GPIO_Init>
  MX_RTC_Init();
 8000f8a:	f000 fee9 	bl	8001d60 <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 8000f8e:	f00e f9c5 	bl	800f31c <MX_USB_DEVICE_Init>
  MX_SDIO_SD_Init();
 8000f92:	f000 ffa3 	bl	8001edc <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000f96:	f009 fd73 	bl	800aa80 <MX_FATFS_Init>
  MX_SPI1_Init();
 8000f9a:	f001 fe17 	bl	8002bcc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  //HAL_DBGMCU_EnableDBGStandbyMode(); //umożliwia nie przerywanie debugowania przy przejściu w uśpienie Standby mode
  measurementInterval = readMeasurementIntervalFromBackupRegister();
 8000f9e:	f000 f9b5 	bl	800130c <readMeasurementIntervalFromBackupRegister>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b65      	ldr	r3, [pc, #404]	; (800113c <main+0x1c4>)
 8000fa8:	701a      	strb	r2, [r3, #0]
  if(measurementInterval == 0)	//jeśli rejestr jest wyzerowany, np. na skutek zaniku Vbat
 8000faa:	4b64      	ldr	r3, [pc, #400]	; (800113c <main+0x1c4>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d107      	bne.n	8000fc2 <main+0x4a>
  {
	  measurementInterval = DEFAULT_MEASUREMENT_INTERVAL;
 8000fb2:	4b62      	ldr	r3, [pc, #392]	; (800113c <main+0x1c4>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	701a      	strb	r2, [r3, #0]
	  writeMeasurementIntervalToBackupRegister(measurementInterval);
 8000fb8:	4b60      	ldr	r3, [pc, #384]	; (800113c <main+0x1c4>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 f9b1 	bl	8001324 <writeMeasurementIntervalToBackupRegister>
  }
  //testLED();
  SaveDataToSDCardFlag = 0;
 8000fc2:	4b5f      	ldr	r3, [pc, #380]	; (8001140 <main+0x1c8>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]
  CompareSeconds = 61;
 8000fc8:	4b5e      	ldr	r3, [pc, #376]	; (8001144 <main+0x1cc>)
 8000fca:	223d      	movs	r2, #61	; 0x3d
 8000fcc:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, LED_ON);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2108      	movs	r1, #8
 8000fd2:	485d      	ldr	r0, [pc, #372]	; (8001148 <main+0x1d0>)
 8000fd4:	f002 fb2b 	bl	800362e <HAL_GPIO_WritePin>
  HAL_Delay(4000);
 8000fd8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000fdc:	f001 ffaa 	bl	8002f34 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  do
  {
	  HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	495a      	ldr	r1, [pc, #360]	; (800114c <main+0x1d4>)
 8000fe4:	485a      	ldr	r0, [pc, #360]	; (8001150 <main+0x1d8>)
 8000fe6:	f004 fdeb 	bl	8005bc0 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8000fea:	2200      	movs	r2, #0
 8000fec:	4959      	ldr	r1, [pc, #356]	; (8001154 <main+0x1dc>)
 8000fee:	4858      	ldr	r0, [pc, #352]	; (8001150 <main+0x1d8>)
 8000ff0:	f004 ff74 	bl	8005edc <HAL_RTC_GetDate>

	  if(Date.Date != DateComapare.Date)
 8000ff4:	4b57      	ldr	r3, [pc, #348]	; (8001154 <main+0x1dc>)
 8000ff6:	789a      	ldrb	r2, [r3, #2]
 8000ff8:	4b57      	ldr	r3, [pc, #348]	; (8001158 <main+0x1e0>)
 8000ffa:	789b      	ldrb	r3, [r3, #2]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d005      	beq.n	800100c <main+0x94>
	  {
		writeDateToBackupRegister();
 8001000:	f000 f966 	bl	80012d0 <writeDateToBackupRegister>
	    DateComapare = Date;
 8001004:	4a54      	ldr	r2, [pc, #336]	; (8001158 <main+0x1e0>)
 8001006:	4b53      	ldr	r3, [pc, #332]	; (8001154 <main+0x1dc>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6013      	str	r3, [r2, #0]
	  }
	  if(Time.Seconds != CompareSeconds)
 800100c:	4b4f      	ldr	r3, [pc, #316]	; (800114c <main+0x1d4>)
 800100e:	789a      	ldrb	r2, [r3, #2]
 8001010:	4b4c      	ldr	r3, [pc, #304]	; (8001144 <main+0x1cc>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	429a      	cmp	r2, r3
 8001016:	d021      	beq.n	800105c <main+0xe4>
	  {
	  	CompareSeconds = Time.Seconds;
 8001018:	4b4c      	ldr	r3, [pc, #304]	; (800114c <main+0x1d4>)
 800101a:	789a      	ldrb	r2, [r3, #2]
 800101c:	4b49      	ldr	r3, [pc, #292]	; (8001144 <main+0x1cc>)
 800101e:	701a      	strb	r2, [r3, #0]
	  	HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8001020:	2108      	movs	r1, #8
 8001022:	4849      	ldr	r0, [pc, #292]	; (8001148 <main+0x1d0>)
 8001024:	f002 fb1b 	bl	800365e <HAL_GPIO_TogglePin>
	  	if ((Time.Minutes % measurementInterval) == 0)
 8001028:	4b48      	ldr	r3, [pc, #288]	; (800114c <main+0x1d4>)
 800102a:	785b      	ldrb	r3, [r3, #1]
 800102c:	4a43      	ldr	r2, [pc, #268]	; (800113c <main+0x1c4>)
 800102e:	7812      	ldrb	r2, [r2, #0]
 8001030:	fbb3 f1f2 	udiv	r1, r3, r2
 8001034:	fb02 f201 	mul.w	r2, r2, r1
 8001038:	1a9b      	subs	r3, r3, r2
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2b00      	cmp	r3, #0
 800103e:	d10a      	bne.n	8001056 <main+0xde>
	  	{
	  		if (!alreadyMeasuredThisMinute)
 8001040:	4b46      	ldr	r3, [pc, #280]	; (800115c <main+0x1e4>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	f083 0301 	eor.w	r3, r3, #1
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	d006      	beq.n	800105c <main+0xe4>
	  		{
	  			SaveDataToSDCardFlag = 1;
 800104e:	4b3c      	ldr	r3, [pc, #240]	; (8001140 <main+0x1c8>)
 8001050:	2201      	movs	r2, #1
 8001052:	701a      	strb	r2, [r3, #0]
 8001054:	e002      	b.n	800105c <main+0xe4>
	  		}
	  	} else
	  	{
	  		alreadyMeasuredThisMinute = 0;
 8001056:	4b41      	ldr	r3, [pc, #260]	; (800115c <main+0x1e4>)
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
	  	}
	  }
	  if (SaveDataToSDCardFlag)
 800105c:	4b38      	ldr	r3, [pc, #224]	; (8001140 <main+0x1c8>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d013      	beq.n	800108c <main+0x114>
	  {
		 SaveDataToSDCardFlag = 0;
 8001064:	4b36      	ldr	r3, [pc, #216]	; (8001140 <main+0x1c8>)
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]
		 BME280measurement(&t, &p, &h);
 800106a:	4a3d      	ldr	r2, [pc, #244]	; (8001160 <main+0x1e8>)
 800106c:	493d      	ldr	r1, [pc, #244]	; (8001164 <main+0x1ec>)
 800106e:	483e      	ldr	r0, [pc, #248]	; (8001168 <main+0x1f0>)
 8001070:	f001 fb12 	bl	8002698 <BME280measurement>
		 saveDataToSDCard(t, p, h);
 8001074:	4b3c      	ldr	r3, [pc, #240]	; (8001168 <main+0x1f0>)
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	4b3a      	ldr	r3, [pc, #232]	; (8001164 <main+0x1ec>)
 800107a:	6819      	ldr	r1, [r3, #0]
 800107c:	4b38      	ldr	r3, [pc, #224]	; (8001160 <main+0x1e8>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	f000 fd6d 	bl	8001b60 <saveDataToSDCard>
		 alreadyMeasuredThisMinute = 1;
 8001086:	4b35      	ldr	r3, [pc, #212]	; (800115c <main+0x1e4>)
 8001088:	2201      	movs	r2, #1
 800108a:	701a      	strb	r2, [r3, #0]
	  }
	  if(ReceivedDataFlag)
 800108c:	4b37      	ldr	r3, [pc, #220]	; (800116c <main+0x1f4>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d004      	beq.n	800109e <main+0x126>
	  {
	  	ReceivedDataFlag = 0;
 8001094:	4b35      	ldr	r3, [pc, #212]	; (800116c <main+0x1f4>)
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
	  	tasksWithReceivedDataFromPC();
 800109a:	f000 f995 	bl	80013c8 <tasksWithReceivedDataFromPC>
	  }
  } while (SaveDataToSDCardFlag || communicationModeFlag);
 800109e:	4b28      	ldr	r3, [pc, #160]	; (8001140 <main+0x1c8>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d19c      	bne.n	8000fe0 <main+0x68>
 80010a6:	4b32      	ldr	r3, [pc, #200]	; (8001170 <main+0x1f8>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d198      	bne.n	8000fe0 <main+0x68>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, LED_OFF);
 80010ae:	2201      	movs	r2, #1
 80010b0:	2108      	movs	r1, #8
 80010b2:	4825      	ldr	r0, [pc, #148]	; (8001148 <main+0x1d0>)
 80010b4:	f002 fabb 	bl	800362e <HAL_GPIO_WritePin>

  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80010b8:	2100      	movs	r1, #0
 80010ba:	4825      	ldr	r0, [pc, #148]	; (8001150 <main+0x1d8>)
 80010bc:	f004 fffc 	bl	80060b8 <HAL_RTC_DeactivateAlarm>
  HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 80010c0:	2200      	movs	r2, #0
 80010c2:	4922      	ldr	r1, [pc, #136]	; (800114c <main+0x1d4>)
 80010c4:	4822      	ldr	r0, [pc, #136]	; (8001150 <main+0x1d8>)
 80010c6:	f004 fd7b 	bl	8005bc0 <HAL_RTC_GetTime>
  uint8_t minutesAfterLastMeas = Time.Minutes % measurementInterval;
 80010ca:	4b20      	ldr	r3, [pc, #128]	; (800114c <main+0x1d4>)
 80010cc:	785b      	ldrb	r3, [r3, #1]
 80010ce:	4a1b      	ldr	r2, [pc, #108]	; (800113c <main+0x1c4>)
 80010d0:	7812      	ldrb	r2, [r2, #0]
 80010d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80010d6:	fb02 f201 	mul.w	r2, r2, r1
 80010da:	1a9b      	subs	r3, r3, r2
 80010dc:	73fb      	strb	r3, [r7, #15]
  uint8_t minutesToNextMeas = measurementInterval - minutesAfterLastMeas;
 80010de:	4b17      	ldr	r3, [pc, #92]	; (800113c <main+0x1c4>)
 80010e0:	781a      	ldrb	r2, [r3, #0]
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	73bb      	strb	r3, [r7, #14]
  RTC_AlarmTypeDef alarm = {0};
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
  alarm.AlarmTime.Seconds = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	71bb      	strb	r3, [r7, #6]
  alarm.AlarmTime.Hours = Time.Hours;
 80010f4:	4b15      	ldr	r3, [pc, #84]	; (800114c <main+0x1d4>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	713b      	strb	r3, [r7, #4]
  alarm.AlarmTime.Minutes = Time.Minutes + minutesToNextMeas;
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <main+0x1d4>)
 80010fc:	785a      	ldrb	r2, [r3, #1]
 80010fe:	7bbb      	ldrb	r3, [r7, #14]
 8001100:	4413      	add	r3, r2
 8001102:	b2db      	uxtb	r3, r3
 8001104:	717b      	strb	r3, [r7, #5]
  if (alarm.AlarmTime.Minutes > 59)
 8001106:	797b      	ldrb	r3, [r7, #5]
 8001108:	2b3b      	cmp	r3, #59	; 0x3b
 800110a:	d907      	bls.n	800111c <main+0x1a4>
  {
	  ++(alarm.AlarmTime.Hours);
 800110c:	793b      	ldrb	r3, [r7, #4]
 800110e:	3301      	adds	r3, #1
 8001110:	b2db      	uxtb	r3, r3
 8001112:	713b      	strb	r3, [r7, #4]
	  alarm.AlarmTime.Minutes -= 60;
 8001114:	797b      	ldrb	r3, [r7, #5]
 8001116:	3b3c      	subs	r3, #60	; 0x3c
 8001118:	b2db      	uxtb	r3, r3
 800111a:	717b      	strb	r3, [r7, #5]
  }
  HAL_RTC_SetAlarm(&hrtc, &alarm, RTC_FORMAT_BIN);
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	2200      	movs	r2, #0
 8001120:	4619      	mov	r1, r3
 8001122:	480b      	ldr	r0, [pc, #44]	; (8001150 <main+0x1d8>)
 8001124:	f004 ff2e 	bl	8005f84 <HAL_RTC_SetAlarm>

  //uint32_t c = RTC_ReadTimeCounter(&hrtc);

  //a może trzeba obsługę przerwania od alarmu
  HAL_PWR_EnterSLEEPMode(1, PWR_SLEEPENTRY_WFI);
 8001128:	2101      	movs	r1, #1
 800112a:	2001      	movs	r0, #1
 800112c:	f003 fe58 	bl	8004de0 <HAL_PWR_EnterSLEEPMode>
 8001130:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000480 	.word	0x20000480
 8001140:	20000488 	.word	0x20000488
 8001144:	20000489 	.word	0x20000489
 8001148:	40011000 	.word	0x40011000
 800114c:	200005f4 	.word	0x200005f4
 8001150:	200005f8 	.word	0x200005f8
 8001154:	200005c0 	.word	0x200005c0
 8001158:	200005bc 	.word	0x200005bc
 800115c:	200001fd 	.word	0x200001fd
 8001160:	20000484 	.word	0x20000484
 8001164:	2000047c 	.word	0x2000047c
 8001168:	20000478 	.word	0x20000478
 800116c:	200001fc 	.word	0x200001fc
 8001170:	200001fe 	.word	0x200001fe

08001174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b096      	sub	sp, #88	; 0x58
 8001178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800117e:	2228      	movs	r2, #40	; 0x28
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f00e fdbc 	bl	800fd00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	611a      	str	r2, [r3, #16]
 80011a6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80011a8:	2305      	movs	r3, #5
 80011aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80011b6:	2301      	movs	r3, #1
 80011b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ba:	2301      	movs	r3, #1
 80011bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011be:	2302      	movs	r3, #2
 80011c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011c6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011c8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011cc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011d2:	4618      	mov	r0, r3
 80011d4:	f003 fe20 	bl	8004e18 <HAL_RCC_OscConfig>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80011de:	f000 f859 	bl	8001294 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e2:	230f      	movs	r3, #15
 80011e4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e6:	2302      	movs	r3, #2
 80011e8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80011ea:	2390      	movs	r3, #144	; 0x90
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f2:	2300      	movs	r3, #0
 80011f4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	2102      	movs	r1, #2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f004 f88b 	bl	8005318 <HAL_RCC_ClockConfig>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001208:	f000 f844 	bl	8001294 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 800120c:	2311      	movs	r3, #17
 800120e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001210:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001214:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001216:	2300      	movs	r3, #0
 8001218:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	4618      	mov	r0, r3
 800121e:	f004 fa03 	bl	8005628 <HAL_RCCEx_PeriphCLKConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001228:	f000 f834 	bl	8001294 <Error_Handler>
  }
}
 800122c:	bf00      	nop
 800122e:	3758      	adds	r7, #88	; 0x58
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t button)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	80fb      	strh	r3, [r7, #6]
	if (button == BUTTON_A_Pin)
 800123e:	88fb      	ldrh	r3, [r7, #6]
 8001240:	2b40      	cmp	r3, #64	; 0x40
 8001242:	d102      	bne.n	800124a <HAL_GPIO_EXTI_Callback+0x16>
	{
		SaveDataToSDCardFlag = 1;
 8001244:	4b10      	ldr	r3, [pc, #64]	; (8001288 <HAL_GPIO_EXTI_Callback+0x54>)
 8001246:	2201      	movs	r2, #1
 8001248:	701a      	strb	r2, [r3, #0]
	}
	if (button == BUTTON_B_Pin)
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	2b80      	cmp	r3, #128	; 0x80
 800124e:	d117      	bne.n	8001280 <HAL_GPIO_EXTI_Callback+0x4c>
	{
		if(!communicationModeFlag)
 8001250:	4b0e      	ldr	r3, [pc, #56]	; (800128c <HAL_GPIO_EXTI_Callback+0x58>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	f083 0301 	eor.w	r3, r3, #1
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d008      	beq.n	8001270 <HAL_GPIO_EXTI_Callback+0x3c>
		{
			HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, LED_ON);
 800125e:	2200      	movs	r2, #0
 8001260:	2104      	movs	r1, #4
 8001262:	480b      	ldr	r0, [pc, #44]	; (8001290 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001264:	f002 f9e3 	bl	800362e <HAL_GPIO_WritePin>
			communicationModeFlag = 1;
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <HAL_GPIO_EXTI_Callback+0x58>)
 800126a:	2201      	movs	r2, #1
 800126c:	701a      	strb	r2, [r3, #0]
		{
			HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, LED_OFF);
			communicationModeFlag = 0;
		}
	}
}
 800126e:	e007      	b.n	8001280 <HAL_GPIO_EXTI_Callback+0x4c>
			HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, LED_OFF);
 8001270:	2201      	movs	r2, #1
 8001272:	2104      	movs	r1, #4
 8001274:	4806      	ldr	r0, [pc, #24]	; (8001290 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001276:	f002 f9da 	bl	800362e <HAL_GPIO_WritePin>
			communicationModeFlag = 0;
 800127a:	4b04      	ldr	r3, [pc, #16]	; (800128c <HAL_GPIO_EXTI_Callback+0x58>)
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000488 	.word	0x20000488
 800128c:	200001fe 	.word	0x200001fe
 8001290:	40011000 	.word	0x40011000

08001294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr

080012a0 <clearTableChar>:

typedef int EPR_STAT;

//!!!!!!!!!!!!!!ZNAJDUJE SIĘ TEŻ W sescor_bme280.c, ale z uint8_t
void clearTableChar(char *tab)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < sizeof(tab); ++i)
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	e007      	b.n	80012be <clearTableChar+0x1e>
	{
		tab[i] = 0;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	4413      	add	r3, r2
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(tab); ++i)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	3301      	adds	r3, #1
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2b03      	cmp	r3, #3
 80012c2:	d9f4      	bls.n	80012ae <clearTableChar+0xe>
	}
}
 80012c4:	bf00      	nop
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
	...

080012d0 <writeDateToBackupRegister>:
	  allLEDsOff();
	  HAL_Delay(1000);
}

void writeDateToBackupRegister(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, ((Date.Year << 8) | (Date.Month)));
 80012d4:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <writeDateToBackupRegister+0x34>)
 80012d6:	78db      	ldrb	r3, [r3, #3]
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <writeDateToBackupRegister+0x34>)
 80012dc:	7852      	ldrb	r2, [r2, #1]
 80012de:	4313      	orrs	r3, r2
 80012e0:	461a      	mov	r2, r3
 80012e2:	2102      	movs	r1, #2
 80012e4:	4808      	ldr	r0, [pc, #32]	; (8001308 <writeDateToBackupRegister+0x38>)
 80012e6:	f005 f9e5 	bl	80066b4 <HAL_RTCEx_BKUPWrite>
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, ((Date.Date << 8) | (Date.WeekDay)));
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <writeDateToBackupRegister+0x34>)
 80012ec:	789b      	ldrb	r3, [r3, #2]
 80012ee:	021b      	lsls	r3, r3, #8
 80012f0:	4a04      	ldr	r2, [pc, #16]	; (8001304 <writeDateToBackupRegister+0x34>)
 80012f2:	7812      	ldrb	r2, [r2, #0]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	461a      	mov	r2, r3
 80012f8:	2101      	movs	r1, #1
 80012fa:	4803      	ldr	r0, [pc, #12]	; (8001308 <writeDateToBackupRegister+0x38>)
 80012fc:	f005 f9da 	bl	80066b4 <HAL_RTCEx_BKUPWrite>
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	200005c0 	.word	0x200005c0
 8001308:	200005f8 	.word	0x200005f8

0800130c <readMeasurementIntervalFromBackupRegister>:

uint8_t readMeasurementIntervalFromBackupRegister()
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
	return (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR3);
 8001310:	2103      	movs	r1, #3
 8001312:	4803      	ldr	r0, [pc, #12]	; (8001320 <readMeasurementIntervalFromBackupRegister+0x14>)
 8001314:	f005 f9e8 	bl	80066e8 <HAL_RTCEx_BKUPRead>
 8001318:	4603      	mov	r3, r0
 800131a:	b2db      	uxtb	r3, r3
}
 800131c:	4618      	mov	r0, r3
 800131e:	bd80      	pop	{r7, pc}
 8001320:	200005f8 	.word	0x200005f8

08001324 <writeMeasurementIntervalToBackupRegister>:

void writeMeasurementIntervalToBackupRegister(uint8_t interval)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
	int16_t bkp_dr3 = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR3);
 800132e:	2103      	movs	r1, #3
 8001330:	480c      	ldr	r0, [pc, #48]	; (8001364 <writeMeasurementIntervalToBackupRegister+0x40>)
 8001332:	f005 f9d9 	bl	80066e8 <HAL_RTCEx_BKUPRead>
 8001336:	4603      	mov	r3, r0
 8001338:	81fb      	strh	r3, [r7, #14]
	bkp_dr3 &= 0xFF00;
 800133a:	89fb      	ldrh	r3, [r7, #14]
 800133c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001340:	81fb      	strh	r3, [r7, #14]
	bkp_dr3 |= (uint16_t)interval;
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	b21a      	sxth	r2, r3
 8001346:	89fb      	ldrh	r3, [r7, #14]
 8001348:	4313      	orrs	r3, r2
 800134a:	81fb      	strh	r3, [r7, #14]
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, bkp_dr3);
 800134c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001350:	461a      	mov	r2, r3
 8001352:	2103      	movs	r1, #3
 8001354:	4803      	ldr	r0, [pc, #12]	; (8001364 <writeMeasurementIntervalToBackupRegister+0x40>)
 8001356:	f005 f9ad 	bl	80066b4 <HAL_RTCEx_BKUPWrite>
}
 800135a:	bf00      	nop
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	200005f8 	.word	0x200005f8

08001368 <readDaysPerFileSettingFromBackupRegister>:

uint8_t readDaysPerFileSettingFromBackupRegister()
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
	return (uint8_t)(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR3) >> 8);	//0 - week, 1 - one_day
 800136c:	2103      	movs	r1, #3
 800136e:	4804      	ldr	r0, [pc, #16]	; (8001380 <readDaysPerFileSettingFromBackupRegister+0x18>)
 8001370:	f005 f9ba 	bl	80066e8 <HAL_RTCEx_BKUPRead>
 8001374:	4603      	mov	r3, r0
 8001376:	0a1b      	lsrs	r3, r3, #8
 8001378:	b2db      	uxtb	r3, r3
}
 800137a:	4618      	mov	r0, r3
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200005f8 	.word	0x200005f8

08001384 <writeDaysPerFileSettingToBackupRegister>:

void writeDaysPerFileSettingToBackupRegister(uint8_t daysPerFile)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
	int16_t bkp_dr3 = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR3);
 800138e:	2103      	movs	r1, #3
 8001390:	480c      	ldr	r0, [pc, #48]	; (80013c4 <writeDaysPerFileSettingToBackupRegister+0x40>)
 8001392:	f005 f9a9 	bl	80066e8 <HAL_RTCEx_BKUPRead>
 8001396:	4603      	mov	r3, r0
 8001398:	81fb      	strh	r3, [r7, #14]
	bkp_dr3 &= 0x00FF;
 800139a:	89fb      	ldrh	r3, [r7, #14]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	81fb      	strh	r3, [r7, #14]
	bkp_dr3 |= ((uint16_t)daysPerFile << 8);
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	b21a      	sxth	r2, r3
 80013a6:	89fb      	ldrh	r3, [r7, #14]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	81fb      	strh	r3, [r7, #14]
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, bkp_dr3);
 80013ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013b0:	461a      	mov	r2, r3
 80013b2:	2103      	movs	r1, #3
 80013b4:	4803      	ldr	r0, [pc, #12]	; (80013c4 <writeDaysPerFileSettingToBackupRegister+0x40>)
 80013b6:	f005 f97d 	bl	80066b4 <HAL_RTCEx_BKUPWrite>
}
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200005f8 	.word	0x200005f8

080013c8 <tasksWithReceivedDataFromPC>:

//realizacja zadań po otrzymaniu danych z komputera, poprzez USB
void tasksWithReceivedDataFromPC()
{
 80013c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013cc:	b0dd      	sub	sp, #372	; 0x174
 80013ce:	af08      	add	r7, sp, #32
*/


	// wykrywanie i obsługa poleceń
	// polecenie 1: odczyt daty i czasu "whattime"
	cmp = strncmp((char*)ReceivedData, strWhatTime, 8);
 80013d0:	2208      	movs	r2, #8
 80013d2:	494d      	ldr	r1, [pc, #308]	; (8001508 <tasksWithReceivedDataFromPC+0x140>)
 80013d4:	484d      	ldr	r0, [pc, #308]	; (800150c <tasksWithReceivedDataFromPC+0x144>)
 80013d6:	f00e fdba 	bl	800ff4e <strncmp>
 80013da:	4602      	mov	r2, r0
 80013dc:	4b4c      	ldr	r3, [pc, #304]	; (8001510 <tasksWithReceivedDataFromPC+0x148>)
 80013de:	601a      	str	r2, [r3, #0]
	if (cmp == 0)
 80013e0:	4b4b      	ldr	r3, [pc, #300]	; (8001510 <tasksWithReceivedDataFromPC+0x148>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d126      	bne.n	8001436 <tasksWithReceivedDataFromPC+0x6e>
	{
		MessageLen = sprintf(Message, "Date: %02d.%02d.20%02d Time: %02d:%02d:%02d\n\r", Date.Date, Date.Month, Date.Year, Time.Hours, Time.Minutes, Time.Seconds);
 80013e8:	4b4a      	ldr	r3, [pc, #296]	; (8001514 <tasksWithReceivedDataFromPC+0x14c>)
 80013ea:	789b      	ldrb	r3, [r3, #2]
 80013ec:	461d      	mov	r5, r3
 80013ee:	4b49      	ldr	r3, [pc, #292]	; (8001514 <tasksWithReceivedDataFromPC+0x14c>)
 80013f0:	785b      	ldrb	r3, [r3, #1]
 80013f2:	461e      	mov	r6, r3
 80013f4:	4b47      	ldr	r3, [pc, #284]	; (8001514 <tasksWithReceivedDataFromPC+0x14c>)
 80013f6:	78db      	ldrb	r3, [r3, #3]
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b47      	ldr	r3, [pc, #284]	; (8001518 <tasksWithReceivedDataFromPC+0x150>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	4619      	mov	r1, r3
 8001400:	4b45      	ldr	r3, [pc, #276]	; (8001518 <tasksWithReceivedDataFromPC+0x150>)
 8001402:	785b      	ldrb	r3, [r3, #1]
 8001404:	461c      	mov	r4, r3
 8001406:	4b44      	ldr	r3, [pc, #272]	; (8001518 <tasksWithReceivedDataFromPC+0x150>)
 8001408:	789b      	ldrb	r3, [r3, #2]
 800140a:	f107 0014 	add.w	r0, r7, #20
 800140e:	9303      	str	r3, [sp, #12]
 8001410:	9402      	str	r4, [sp, #8]
 8001412:	9101      	str	r1, [sp, #4]
 8001414:	9200      	str	r2, [sp, #0]
 8001416:	4633      	mov	r3, r6
 8001418:	462a      	mov	r2, r5
 800141a:	4940      	ldr	r1, [pc, #256]	; (800151c <tasksWithReceivedDataFromPC+0x154>)
 800141c:	f00e fd62 	bl	800fee4 <siprintf>
 8001420:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
		CDC_Transmit_FS((uint8_t*)Message, MessageLen);
 8001424:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001428:	b29a      	uxth	r2, r3
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	4611      	mov	r1, r2
 8001430:	4618      	mov	r0, r3
 8001432:	f00e f84d 	bl	800f4d0 <CDC_Transmit_FS>
	}

  // polecenie 2: ustawienie czasu "settime "
  cmp = strncmp((char*)ReceivedData, strSetTime, 8);
 8001436:	2208      	movs	r2, #8
 8001438:	4939      	ldr	r1, [pc, #228]	; (8001520 <tasksWithReceivedDataFromPC+0x158>)
 800143a:	4834      	ldr	r0, [pc, #208]	; (800150c <tasksWithReceivedDataFromPC+0x144>)
 800143c:	f00e fd87 	bl	800ff4e <strncmp>
 8001440:	4602      	mov	r2, r0
 8001442:	4b33      	ldr	r3, [pc, #204]	; (8001510 <tasksWithReceivedDataFromPC+0x148>)
 8001444:	601a      	str	r2, [r3, #0]
  if (cmp == 0)
 8001446:	4b32      	ldr	r3, [pc, #200]	; (8001510 <tasksWithReceivedDataFromPC+0x148>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d14b      	bne.n	80014e6 <tasksWithReceivedDataFromPC+0x11e>
  {
    for (int i = 0; i<3; ++i)
 800144e:	2300      	movs	r3, #0
 8001450:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8001454:	e00f      	b.n	8001476 <tasksWithReceivedDataFromPC+0xae>
    {
	  time[i] = ReceivedData[i+8];
 8001456:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800145a:	3308      	adds	r3, #8
 800145c:	4a2b      	ldr	r2, [pc, #172]	; (800150c <tasksWithReceivedDataFromPC+0x144>)
 800145e:	5cd1      	ldrb	r1, [r2, r3]
 8001460:	4a30      	ldr	r2, [pc, #192]	; (8001524 <tasksWithReceivedDataFromPC+0x15c>)
 8001462:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001466:	4413      	add	r3, r2
 8001468:	460a      	mov	r2, r1
 800146a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i<3; ++i)
 800146c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001470:	3301      	adds	r3, #1
 8001472:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8001476:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800147a:	2b02      	cmp	r3, #2
 800147c:	ddeb      	ble.n	8001456 <tasksWithReceivedDataFromPC+0x8e>
    }
    setTime(time);
 800147e:	4829      	ldr	r0, [pc, #164]	; (8001524 <tasksWithReceivedDataFromPC+0x15c>)
 8001480:	f000 fcda 	bl	8001e38 <setTime>

    //wysłanie do PC aktualnej daty i godziny
	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8001484:	2200      	movs	r2, #0
 8001486:	4924      	ldr	r1, [pc, #144]	; (8001518 <tasksWithReceivedDataFromPC+0x150>)
 8001488:	4827      	ldr	r0, [pc, #156]	; (8001528 <tasksWithReceivedDataFromPC+0x160>)
 800148a:	f004 fb99 	bl	8005bc0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800148e:	2200      	movs	r2, #0
 8001490:	4920      	ldr	r1, [pc, #128]	; (8001514 <tasksWithReceivedDataFromPC+0x14c>)
 8001492:	4825      	ldr	r0, [pc, #148]	; (8001528 <tasksWithReceivedDataFromPC+0x160>)
 8001494:	f004 fd22 	bl	8005edc <HAL_RTC_GetDate>
	MessageLen = sprintf(Message, "Date: %02d.%02d.20%02d Time: %02d:%02d:%02d\n\r", Date.Date, Date.Month, Date.Year, Time.Hours, Time.Minutes, Time.Seconds);
 8001498:	4b1e      	ldr	r3, [pc, #120]	; (8001514 <tasksWithReceivedDataFromPC+0x14c>)
 800149a:	789b      	ldrb	r3, [r3, #2]
 800149c:	461d      	mov	r5, r3
 800149e:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <tasksWithReceivedDataFromPC+0x14c>)
 80014a0:	785b      	ldrb	r3, [r3, #1]
 80014a2:	461e      	mov	r6, r3
 80014a4:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <tasksWithReceivedDataFromPC+0x14c>)
 80014a6:	78db      	ldrb	r3, [r3, #3]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <tasksWithReceivedDataFromPC+0x150>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	4619      	mov	r1, r3
 80014b0:	4b19      	ldr	r3, [pc, #100]	; (8001518 <tasksWithReceivedDataFromPC+0x150>)
 80014b2:	785b      	ldrb	r3, [r3, #1]
 80014b4:	461c      	mov	r4, r3
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <tasksWithReceivedDataFromPC+0x150>)
 80014b8:	789b      	ldrb	r3, [r3, #2]
 80014ba:	f107 0014 	add.w	r0, r7, #20
 80014be:	9303      	str	r3, [sp, #12]
 80014c0:	9402      	str	r4, [sp, #8]
 80014c2:	9101      	str	r1, [sp, #4]
 80014c4:	9200      	str	r2, [sp, #0]
 80014c6:	4633      	mov	r3, r6
 80014c8:	462a      	mov	r2, r5
 80014ca:	4914      	ldr	r1, [pc, #80]	; (800151c <tasksWithReceivedDataFromPC+0x154>)
 80014cc:	f00e fd0a 	bl	800fee4 <siprintf>
 80014d0:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
	CDC_Transmit_FS((uint8_t*)Message, MessageLen);
 80014d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80014d8:	b29a      	uxth	r2, r3
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4611      	mov	r1, r2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f00d fff5 	bl	800f4d0 <CDC_Transmit_FS>
  }

  // polecenie 3: ustawienie daty "setdate "
  cmp = strncmp((char*)ReceivedData, strSetDate, 8);
 80014e6:	2208      	movs	r2, #8
 80014e8:	4910      	ldr	r1, [pc, #64]	; (800152c <tasksWithReceivedDataFromPC+0x164>)
 80014ea:	4808      	ldr	r0, [pc, #32]	; (800150c <tasksWithReceivedDataFromPC+0x144>)
 80014ec:	f00e fd2f 	bl	800ff4e <strncmp>
 80014f0:	4602      	mov	r2, r0
 80014f2:	4b07      	ldr	r3, [pc, #28]	; (8001510 <tasksWithReceivedDataFromPC+0x148>)
 80014f4:	601a      	str	r2, [r3, #0]
  if (cmp == 0)
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <tasksWithReceivedDataFromPC+0x148>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d162      	bne.n	80015c4 <tasksWithReceivedDataFromPC+0x1fc>
  {
	for (int i = 0; i<4; ++i)
 80014fe:	2300      	movs	r3, #0
 8001500:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001504:	e024      	b.n	8001550 <tasksWithReceivedDataFromPC+0x188>
 8001506:	bf00      	nop
 8001508:	08010a48 	.word	0x08010a48
 800150c:	200005cc 	.word	0x200005cc
 8001510:	20000208 	.word	0x20000208
 8001514:	200005c0 	.word	0x200005c0
 8001518:	200005f4 	.word	0x200005f4
 800151c:	08010604 	.word	0x08010604
 8001520:	08010a38 	.word	0x08010a38
 8001524:	20000200 	.word	0x20000200
 8001528:	200005f8 	.word	0x200005f8
 800152c:	08010a40 	.word	0x08010a40
    {
      date[i] = ReceivedData[i+8];
 8001530:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001534:	3308      	adds	r3, #8
 8001536:	4aa0      	ldr	r2, [pc, #640]	; (80017b8 <tasksWithReceivedDataFromPC+0x3f0>)
 8001538:	5cd1      	ldrb	r1, [r2, r3]
 800153a:	4aa0      	ldr	r2, [pc, #640]	; (80017bc <tasksWithReceivedDataFromPC+0x3f4>)
 800153c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001540:	4413      	add	r3, r2
 8001542:	460a      	mov	r2, r1
 8001544:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<4; ++i)
 8001546:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800154a:	3301      	adds	r3, #1
 800154c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001550:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001554:	2b03      	cmp	r3, #3
 8001556:	ddeb      	ble.n	8001530 <tasksWithReceivedDataFromPC+0x168>
    }
    setDate(date);
 8001558:	4898      	ldr	r0, [pc, #608]	; (80017bc <tasksWithReceivedDataFromPC+0x3f4>)
 800155a:	f000 fc93 	bl	8001e84 <setDate>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800155e:	2200      	movs	r2, #0
 8001560:	4997      	ldr	r1, [pc, #604]	; (80017c0 <tasksWithReceivedDataFromPC+0x3f8>)
 8001562:	4898      	ldr	r0, [pc, #608]	; (80017c4 <tasksWithReceivedDataFromPC+0x3fc>)
 8001564:	f004 fcba 	bl	8005edc <HAL_RTC_GetDate>
	writeDateToBackupRegister();
 8001568:	f7ff feb2 	bl	80012d0 <writeDateToBackupRegister>

    //wysłanie do PC aktualnej daty i godziny
	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN); //daty już nie trzeba pobierać
 800156c:	2200      	movs	r2, #0
 800156e:	4996      	ldr	r1, [pc, #600]	; (80017c8 <tasksWithReceivedDataFromPC+0x400>)
 8001570:	4894      	ldr	r0, [pc, #592]	; (80017c4 <tasksWithReceivedDataFromPC+0x3fc>)
 8001572:	f004 fb25 	bl	8005bc0 <HAL_RTC_GetTime>
	MessageLen = sprintf(Message, "Date: %02d.%02d.20%02d Time: %02d:%02d:%02d\n\r", Date.Date, Date.Month, Date.Year, Time.Hours, Time.Minutes, Time.Seconds);
 8001576:	4b92      	ldr	r3, [pc, #584]	; (80017c0 <tasksWithReceivedDataFromPC+0x3f8>)
 8001578:	789b      	ldrb	r3, [r3, #2]
 800157a:	461d      	mov	r5, r3
 800157c:	4b90      	ldr	r3, [pc, #576]	; (80017c0 <tasksWithReceivedDataFromPC+0x3f8>)
 800157e:	785b      	ldrb	r3, [r3, #1]
 8001580:	461e      	mov	r6, r3
 8001582:	4b8f      	ldr	r3, [pc, #572]	; (80017c0 <tasksWithReceivedDataFromPC+0x3f8>)
 8001584:	78db      	ldrb	r3, [r3, #3]
 8001586:	461a      	mov	r2, r3
 8001588:	4b8f      	ldr	r3, [pc, #572]	; (80017c8 <tasksWithReceivedDataFromPC+0x400>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	4619      	mov	r1, r3
 800158e:	4b8e      	ldr	r3, [pc, #568]	; (80017c8 <tasksWithReceivedDataFromPC+0x400>)
 8001590:	785b      	ldrb	r3, [r3, #1]
 8001592:	461c      	mov	r4, r3
 8001594:	4b8c      	ldr	r3, [pc, #560]	; (80017c8 <tasksWithReceivedDataFromPC+0x400>)
 8001596:	789b      	ldrb	r3, [r3, #2]
 8001598:	f107 0014 	add.w	r0, r7, #20
 800159c:	9303      	str	r3, [sp, #12]
 800159e:	9402      	str	r4, [sp, #8]
 80015a0:	9101      	str	r1, [sp, #4]
 80015a2:	9200      	str	r2, [sp, #0]
 80015a4:	4633      	mov	r3, r6
 80015a6:	462a      	mov	r2, r5
 80015a8:	4988      	ldr	r1, [pc, #544]	; (80017cc <tasksWithReceivedDataFromPC+0x404>)
 80015aa:	f00e fc9b 	bl	800fee4 <siprintf>
 80015ae:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
	CDC_Transmit_FS((uint8_t*)Message, MessageLen);
 80015b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4611      	mov	r1, r2
 80015be:	4618      	mov	r0, r3
 80015c0:	f00d ff86 	bl	800f4d0 <CDC_Transmit_FS>
  }

  //polecenie 4: odczyt informacji o pliku
  cmp = strncmp((char*)ReceivedData, strGetFileInfo, 3);
 80015c4:	2203      	movs	r2, #3
 80015c6:	4982      	ldr	r1, [pc, #520]	; (80017d0 <tasksWithReceivedDataFromPC+0x408>)
 80015c8:	487b      	ldr	r0, [pc, #492]	; (80017b8 <tasksWithReceivedDataFromPC+0x3f0>)
 80015ca:	f00e fcc0 	bl	800ff4e <strncmp>
 80015ce:	4602      	mov	r2, r0
 80015d0:	4b80      	ldr	r3, [pc, #512]	; (80017d4 <tasksWithReceivedDataFromPC+0x40c>)
 80015d2:	601a      	str	r2, [r3, #0]
  if (cmp == 0)
 80015d4:	4b7f      	ldr	r3, [pc, #508]	; (80017d4 <tasksWithReceivedDataFromPC+0x40c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d13a      	bne.n	8001652 <tasksWithReceivedDataFromPC+0x28a>
  {
	    MessageLen = sprintf(Message, "File info: size=%ldB pointer=%ld written=%dB eof=%ld; Last measurement: %fdegC %fhPa %f%%RH\n\r",
 80015dc:	4b7e      	ldr	r3, [pc, #504]	; (80017d8 <tasksWithReceivedDataFromPC+0x410>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	4b7e      	ldr	r3, [pc, #504]	; (80017dc <tasksWithReceivedDataFromPC+0x414>)
 80015e4:	6819      	ldr	r1, [r3, #0]
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	4b7d      	ldr	r3, [pc, #500]	; (80017e0 <tasksWithReceivedDataFromPC+0x418>)
 80015ea:	681e      	ldr	r6, [r3, #0]
 80015ec:	4b7d      	ldr	r3, [pc, #500]	; (80017e4 <tasksWithReceivedDataFromPC+0x41c>)
 80015ee:	6818      	ldr	r0, [r3, #0]
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	4b7d      	ldr	r3, [pc, #500]	; (80017e8 <tasksWithReceivedDataFromPC+0x420>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ff78 	bl	80004ec <__aeabi_f2d>
 80015fc:	4604      	mov	r4, r0
 80015fe:	460d      	mov	r5, r1
 8001600:	4b7a      	ldr	r3, [pc, #488]	; (80017ec <tasksWithReceivedDataFromPC+0x424>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe ff71 	bl	80004ec <__aeabi_f2d>
 800160a:	4680      	mov	r8, r0
 800160c:	4689      	mov	r9, r1
 800160e:	4b78      	ldr	r3, [pc, #480]	; (80017f0 <tasksWithReceivedDataFromPC+0x428>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe ff6a 	bl	80004ec <__aeabi_f2d>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	f107 0014 	add.w	r0, r7, #20
 8001620:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001624:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001628:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800162c:	687c      	ldr	r4, [r7, #4]
 800162e:	9401      	str	r4, [sp, #4]
 8001630:	9600      	str	r6, [sp, #0]
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	496f      	ldr	r1, [pc, #444]	; (80017f4 <tasksWithReceivedDataFromPC+0x42c>)
 8001638:	f00e fc54 	bl	800fee4 <siprintf>
 800163c:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
	    		fileSize, pointer, nrWrittenBytes, eof, lastTemperature, lastPressure, lastHumidity);
		CDC_Transmit_FS((uint8_t*)Message, MessageLen);
 8001640:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001644:	b29a      	uxth	r2, r3
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4611      	mov	r1, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f00d ff3f 	bl	800f4d0 <CDC_Transmit_FS>
  }

  //polecenie 5: ustawienie odstępu pomiędzy pomiarami (interwału)
  cmp = strncmp((char*)ReceivedData, strSetInterval, 8);
 8001652:	2208      	movs	r2, #8
 8001654:	4968      	ldr	r1, [pc, #416]	; (80017f8 <tasksWithReceivedDataFromPC+0x430>)
 8001656:	4858      	ldr	r0, [pc, #352]	; (80017b8 <tasksWithReceivedDataFromPC+0x3f0>)
 8001658:	f00e fc79 	bl	800ff4e <strncmp>
 800165c:	4602      	mov	r2, r0
 800165e:	4b5d      	ldr	r3, [pc, #372]	; (80017d4 <tasksWithReceivedDataFromPC+0x40c>)
 8001660:	601a      	str	r2, [r3, #0]
  if (cmp == 0)
 8001662:	4b5c      	ldr	r3, [pc, #368]	; (80017d4 <tasksWithReceivedDataFromPC+0x40c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d153      	bne.n	8001712 <tasksWithReceivedDataFromPC+0x34a>
  {
	uint8_t i = ReceivedData[8];
 800166a:	4b53      	ldr	r3, [pc, #332]	; (80017b8 <tasksWithReceivedDataFromPC+0x3f0>)
 800166c:	7a1b      	ldrb	r3, [r3, #8]
 800166e:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
	if ((i == 1 ) || (i == 5) || (i == 10) || (i == 15) || (i == 20) || (i == 30) || (i == 60))
 8001672:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 8001676:	2b01      	cmp	r3, #1
 8001678:	d017      	beq.n	80016aa <tasksWithReceivedDataFromPC+0x2e2>
 800167a:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 800167e:	2b05      	cmp	r3, #5
 8001680:	d013      	beq.n	80016aa <tasksWithReceivedDataFromPC+0x2e2>
 8001682:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 8001686:	2b0a      	cmp	r3, #10
 8001688:	d00f      	beq.n	80016aa <tasksWithReceivedDataFromPC+0x2e2>
 800168a:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 800168e:	2b0f      	cmp	r3, #15
 8001690:	d00b      	beq.n	80016aa <tasksWithReceivedDataFromPC+0x2e2>
 8001692:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 8001696:	2b14      	cmp	r3, #20
 8001698:	d007      	beq.n	80016aa <tasksWithReceivedDataFromPC+0x2e2>
 800169a:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 800169e:	2b1e      	cmp	r3, #30
 80016a0:	d003      	beq.n	80016aa <tasksWithReceivedDataFromPC+0x2e2>
 80016a2:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 80016a6:	2b3c      	cmp	r3, #60	; 0x3c
 80016a8:	d11f      	bne.n	80016ea <tasksWithReceivedDataFromPC+0x322>
	{
		writeMeasurementIntervalToBackupRegister(i);
 80016aa:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fe38 	bl	8001324 <writeMeasurementIntervalToBackupRegister>
		measurementInterval = readMeasurementIntervalFromBackupRegister();	//measurementInterval jest zmienną globalną i jest zadeklarowana w main.c
 80016b4:	f7ff fe2a 	bl	800130c <readMeasurementIntervalFromBackupRegister>
 80016b8:	4603      	mov	r3, r0
 80016ba:	461a      	mov	r2, r3
 80016bc:	4b4f      	ldr	r3, [pc, #316]	; (80017fc <tasksWithReceivedDataFromPC+0x434>)
 80016be:	701a      	strb	r2, [r3, #0]
		MessageLen = sprintf(Message, "The correct value was received: %d. Measurement every %d minutes.\n\r", i, measurementInterval);
 80016c0:	f897 2143 	ldrb.w	r2, [r7, #323]	; 0x143
 80016c4:	4b4d      	ldr	r3, [pc, #308]	; (80017fc <tasksWithReceivedDataFromPC+0x434>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	f107 0014 	add.w	r0, r7, #20
 80016cc:	494c      	ldr	r1, [pc, #304]	; (8001800 <tasksWithReceivedDataFromPC+0x438>)
 80016ce:	f00e fc09 	bl	800fee4 <siprintf>
 80016d2:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
		CDC_Transmit_FS((uint8_t*)Message, MessageLen);
 80016d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80016da:	b29a      	uxth	r2, r3
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	4611      	mov	r1, r2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f00d fef4 	bl	800f4d0 <CDC_Transmit_FS>
 80016e8:	e013      	b.n	8001712 <tasksWithReceivedDataFromPC+0x34a>
	} else
	{
		MessageLen = sprintf(Message, "Incorrect value was received: %d! Measurement every %d minutes.\n\r", i, measurementInterval);
 80016ea:	f897 2143 	ldrb.w	r2, [r7, #323]	; 0x143
 80016ee:	4b43      	ldr	r3, [pc, #268]	; (80017fc <tasksWithReceivedDataFromPC+0x434>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	f107 0014 	add.w	r0, r7, #20
 80016f6:	4943      	ldr	r1, [pc, #268]	; (8001804 <tasksWithReceivedDataFromPC+0x43c>)
 80016f8:	f00e fbf4 	bl	800fee4 <siprintf>
 80016fc:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
		CDC_Transmit_FS((uint8_t*)Message, MessageLen);
 8001700:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001704:	b29a      	uxth	r2, r3
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4611      	mov	r1, r2
 800170c:	4618      	mov	r0, r3
 800170e:	f00d fedf 	bl	800f4d0 <CDC_Transmit_FS>
	}
  }

  //polecenie 6: odczyt aktualnego odstępu pomiędzy pomiarami (interwału)
    cmp = strncmp((char*)ReceivedData, strGetInterval, 8);
 8001712:	2208      	movs	r2, #8
 8001714:	493c      	ldr	r1, [pc, #240]	; (8001808 <tasksWithReceivedDataFromPC+0x440>)
 8001716:	4828      	ldr	r0, [pc, #160]	; (80017b8 <tasksWithReceivedDataFromPC+0x3f0>)
 8001718:	f00e fc19 	bl	800ff4e <strncmp>
 800171c:	4602      	mov	r2, r0
 800171e:	4b2d      	ldr	r3, [pc, #180]	; (80017d4 <tasksWithReceivedDataFromPC+0x40c>)
 8001720:	601a      	str	r2, [r3, #0]
    if (cmp == 0)
 8001722:	4b2c      	ldr	r3, [pc, #176]	; (80017d4 <tasksWithReceivedDataFromPC+0x40c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d113      	bne.n	8001752 <tasksWithReceivedDataFromPC+0x38a>
    {
  		MessageLen = sprintf(Message, "Measurement every %d minutes.\n\r", measurementInterval);
 800172a:	4b34      	ldr	r3, [pc, #208]	; (80017fc <tasksWithReceivedDataFromPC+0x434>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	461a      	mov	r2, r3
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4935      	ldr	r1, [pc, #212]	; (800180c <tasksWithReceivedDataFromPC+0x444>)
 8001736:	4618      	mov	r0, r3
 8001738:	f00e fbd4 	bl	800fee4 <siprintf>
 800173c:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  		CDC_Transmit_FS((uint8_t*)Message, MessageLen);
 8001740:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001744:	b29a      	uxth	r2, r3
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4611      	mov	r1, r2
 800174c:	4618      	mov	r0, r3
 800174e:	f00d febf 	bl	800f4d0 <CDC_Transmit_FS>
    }

    //polecenie 7: ustawienie aktualnego ustawienia określającego przez jaki czas ma odbywać się zapis pomiarów do jednego pliku (dzień lub tydzień)
    cmp = strncmp((char*)ReceivedData, strSetDaysPerFile, 8);
 8001752:	2208      	movs	r2, #8
 8001754:	492e      	ldr	r1, [pc, #184]	; (8001810 <tasksWithReceivedDataFromPC+0x448>)
 8001756:	4818      	ldr	r0, [pc, #96]	; (80017b8 <tasksWithReceivedDataFromPC+0x3f0>)
 8001758:	f00e fbf9 	bl	800ff4e <strncmp>
 800175c:	4602      	mov	r2, r0
 800175e:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <tasksWithReceivedDataFromPC+0x40c>)
 8001760:	601a      	str	r2, [r3, #0]
    if (cmp == 0)
 8001762:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <tasksWithReceivedDataFromPC+0x40c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d16f      	bne.n	800184a <tasksWithReceivedDataFromPC+0x482>
    {
  	uint8_t dpf = ReceivedData[8];
 800176a:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <tasksWithReceivedDataFromPC+0x3f0>)
 800176c:	7a1b      	ldrb	r3, [r3, #8]
 800176e:	f887 3142 	strb.w	r3, [r7, #322]	; 0x142
  	if ((dpf == 0 ) || (dpf == 1))
 8001772:	f897 3142 	ldrb.w	r3, [r7, #322]	; 0x142
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <tasksWithReceivedDataFromPC+0x3ba>
 800177a:	f897 3142 	ldrb.w	r3, [r7, #322]	; 0x142
 800177e:	2b01      	cmp	r3, #1
 8001780:	d14a      	bne.n	8001818 <tasksWithReceivedDataFromPC+0x450>
  	{
  		writeDaysPerFileSettingToBackupRegister(dpf);
 8001782:	f897 3142 	ldrb.w	r3, [r7, #322]	; 0x142
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fdfc 	bl	8001384 <writeDaysPerFileSettingToBackupRegister>
  		MessageLen = sprintf(Message, "OK.\n\r");
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	4a20      	ldr	r2, [pc, #128]	; (8001814 <tasksWithReceivedDataFromPC+0x44c>)
 8001792:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001796:	6018      	str	r0, [r3, #0]
 8001798:	3304      	adds	r3, #4
 800179a:	8019      	strh	r1, [r3, #0]
 800179c:	2305      	movs	r3, #5
 800179e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  		CDC_Transmit_FS((uint8_t*)Message, MessageLen);
 80017a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	4611      	mov	r1, r2
 80017ae:	4618      	mov	r0, r3
 80017b0:	f00d fe8e 	bl	800f4d0 <CDC_Transmit_FS>
 80017b4:	e049      	b.n	800184a <tasksWithReceivedDataFromPC+0x482>
 80017b6:	bf00      	nop
 80017b8:	200005cc 	.word	0x200005cc
 80017bc:	20000204 	.word	0x20000204
 80017c0:	200005c0 	.word	0x200005c0
 80017c4:	200005f8 	.word	0x200005f8
 80017c8:	200005f4 	.word	0x200005f4
 80017cc:	08010604 	.word	0x08010604
 80017d0:	08010a50 	.word	0x08010a50
 80017d4:	20000208 	.word	0x20000208
 80017d8:	2000020c 	.word	0x2000020c
 80017dc:	200005c8 	.word	0x200005c8
 80017e0:	200005c4 	.word	0x200005c4
 80017e4:	200005b8 	.word	0x200005b8
 80017e8:	20000210 	.word	0x20000210
 80017ec:	20000214 	.word	0x20000214
 80017f0:	20000218 	.word	0x20000218
 80017f4:	08010634 	.word	0x08010634
 80017f8:	08010a54 	.word	0x08010a54
 80017fc:	20000480 	.word	0x20000480
 8001800:	08010694 	.word	0x08010694
 8001804:	080106d8 	.word	0x080106d8
 8001808:	08010a5c 	.word	0x08010a5c
 800180c:	0801071c 	.word	0x0801071c
 8001810:	08010a64 	.word	0x08010a64
 8001814:	0801073c 	.word	0x0801073c
  	} else
  	{
  		MessageLen = sprintf(Message, "Incorrect value!\n\r");
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	4a37      	ldr	r2, [pc, #220]	; (80018fc <tasksWithReceivedDataFromPC+0x534>)
 800181e:	461c      	mov	r4, r3
 8001820:	4615      	mov	r5, r2
 8001822:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001824:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001826:	682b      	ldr	r3, [r5, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	8022      	strh	r2, [r4, #0]
 800182c:	3402      	adds	r4, #2
 800182e:	0c1b      	lsrs	r3, r3, #16
 8001830:	7023      	strb	r3, [r4, #0]
 8001832:	2312      	movs	r3, #18
 8001834:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  		CDC_Transmit_FS((uint8_t*)Message, MessageLen);
 8001838:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800183c:	b29a      	uxth	r2, r3
 800183e:	f107 0314 	add.w	r3, r7, #20
 8001842:	4611      	mov	r1, r2
 8001844:	4618      	mov	r0, r3
 8001846:	f00d fe43 	bl	800f4d0 <CDC_Transmit_FS>
  	}
    }

    //polecenie 8: odczyt aktualnego ustawienia określającego przez jaki czas ma odbywać się zapis pomiarów do jednego pliku (dzień lub tydzień)
      cmp = strncmp((char*)ReceivedData, strGetDaysPerFile, 8);
 800184a:	2208      	movs	r2, #8
 800184c:	492c      	ldr	r1, [pc, #176]	; (8001900 <tasksWithReceivedDataFromPC+0x538>)
 800184e:	482d      	ldr	r0, [pc, #180]	; (8001904 <tasksWithReceivedDataFromPC+0x53c>)
 8001850:	f00e fb7d 	bl	800ff4e <strncmp>
 8001854:	4602      	mov	r2, r0
 8001856:	4b2c      	ldr	r3, [pc, #176]	; (8001908 <tasksWithReceivedDataFromPC+0x540>)
 8001858:	601a      	str	r2, [r3, #0]
      if (cmp == 0)
 800185a:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <tasksWithReceivedDataFromPC+0x540>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d146      	bne.n	80018f0 <tasksWithReceivedDataFromPC+0x528>
      {
    	  	enum period dayPerFileSetting = readDaysPerFileSettingFromBackupRegister(); //wystarczy że będzi epobierane w chwili pomiaru i przy ustawianiu /odczycie przez USB
 8001862:	f7ff fd81 	bl	8001368 <readDaysPerFileSettingFromBackupRegister>
 8001866:	4603      	mov	r3, r0
 8001868:	f887 3141 	strb.w	r3, [r7, #321]	; 0x141
    		if (dayPerFileSetting == WEEK)
 800186c:	f897 3141 	ldrb.w	r3, [r7, #321]	; 0x141
 8001870:	2b00      	cmp	r3, #0
 8001872:	d111      	bne.n	8001898 <tasksWithReceivedDataFromPC+0x4d0>
    		{
        	  	MessageLen = sprintf(Message, "Weekly data in one file.\n\r");
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	4a24      	ldr	r2, [pc, #144]	; (800190c <tasksWithReceivedDataFromPC+0x544>)
 800187a:	461c      	mov	r4, r3
 800187c:	4615      	mov	r5, r2
 800187e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001880:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001882:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001886:	c403      	stmia	r4!, {r0, r1}
 8001888:	8022      	strh	r2, [r4, #0]
 800188a:	3402      	adds	r4, #2
 800188c:	0c13      	lsrs	r3, r2, #16
 800188e:	7023      	strb	r3, [r4, #0]
 8001890:	231a      	movs	r3, #26
 8001892:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001896:	e022      	b.n	80018de <tasksWithReceivedDataFromPC+0x516>
    		} else if(dayPerFileSetting == ONE_DAY)
 8001898:	f897 3141 	ldrb.w	r3, [r7, #321]	; 0x141
 800189c:	2b01      	cmp	r3, #1
 800189e:	d10e      	bne.n	80018be <tasksWithReceivedDataFromPC+0x4f6>
    		{
        	  	MessageLen = sprintf(Message, "Daily data in one file.\n\r");
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4a1a      	ldr	r2, [pc, #104]	; (8001910 <tasksWithReceivedDataFromPC+0x548>)
 80018a6:	461c      	mov	r4, r3
 80018a8:	4615      	mov	r5, r2
 80018aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018b2:	c403      	stmia	r4!, {r0, r1}
 80018b4:	8022      	strh	r2, [r4, #0]
 80018b6:	2319      	movs	r3, #25
 80018b8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80018bc:	e00f      	b.n	80018de <tasksWithReceivedDataFromPC+0x516>
    		} else
    		{
        	  	MessageLen = sprintf(Message, "ERROR! Wrong value in the backup register!\n\r");
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	4a14      	ldr	r2, [pc, #80]	; (8001914 <tasksWithReceivedDataFromPC+0x54c>)
 80018c4:	461c      	mov	r4, r3
 80018c6:	4615      	mov	r5, r2
 80018c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80018d4:	c407      	stmia	r4!, {r0, r1, r2}
 80018d6:	7023      	strb	r3, [r4, #0]
 80018d8:	232c      	movs	r3, #44	; 0x2c
 80018da:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    		}
    		CDC_Transmit_FS((uint8_t*)Message, MessageLen);
 80018de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	4611      	mov	r1, r2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f00d fdf0 	bl	800f4d0 <CDC_Transmit_FS>
      }
}
 80018f0:	bf00      	nop
 80018f2:	f507 77aa 	add.w	r7, r7, #340	; 0x154
 80018f6:	46bd      	mov	sp, r7
 80018f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018fc:	08010744 	.word	0x08010744
 8001900:	08010a6c 	.word	0x08010a6c
 8001904:	200005cc 	.word	0x200005cc
 8001908:	20000208 	.word	0x20000208
 800190c:	08010758 	.word	0x08010758
 8001910:	08010774 	.word	0x08010774
 8001914:	08010790 	.word	0x08010790

08001918 <presentWeekInMonth>:
	CDC_Transmit_FS((uint8_t*)info, strlen(info));
}*/

// zwraca numer obecego tygodnia w miesiącu (od 1 do 5) lub 0 - gdy obecny tydzień zaczął sie jeszcze w poprzednim miesiacu, lub 9 jeśli błąd
uint8_t presentWeekInMonth()
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
	uint8_t week; //numer tygodnia w miesiącu, 1 to pierwszy pełny tydzień w niesiącu, 5 to ostatni (niepełny);
	uint8_t dayOfWeek = Date.WeekDay;
 800191e:	4b25      	ldr	r3, [pc, #148]	; (80019b4 <presentWeekInMonth+0x9c>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	71bb      	strb	r3, [r7, #6]
	if (dayOfWeek == 0)
 8001924:	79bb      	ldrb	r3, [r7, #6]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <presentWeekInMonth+0x16>
	{
		dayOfWeek = 7;
 800192a:	2307      	movs	r3, #7
 800192c:	71bb      	strb	r3, [r7, #6]
	}
	if (dayOfWeek > Date.Date)
 800192e:	4b21      	ldr	r3, [pc, #132]	; (80019b4 <presentWeekInMonth+0x9c>)
 8001930:	789b      	ldrb	r3, [r3, #2]
 8001932:	79ba      	ldrb	r2, [r7, #6]
 8001934:	429a      	cmp	r2, r3
 8001936:	d901      	bls.n	800193c <presentWeekInMonth+0x24>
	{
		return 0; // początek obecnego tygodnia nalezął do poprzedniego miesica
 8001938:	2300      	movs	r3, #0
 800193a:	e036      	b.n	80019aa <presentWeekInMonth+0x92>
	}
	uint8_t lastMonday = Date.Date - (dayOfWeek - 1);
 800193c:	4b1d      	ldr	r3, [pc, #116]	; (80019b4 <presentWeekInMonth+0x9c>)
 800193e:	789a      	ldrb	r2, [r3, #2]
 8001940:	79bb      	ldrb	r3, [r7, #6]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	b2db      	uxtb	r3, r3
 8001946:	3301      	adds	r3, #1
 8001948:	717b      	strb	r3, [r7, #5]
	if ((lastMonday >= 1) && (lastMonday < 8))
 800194a:	797b      	ldrb	r3, [r7, #5]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d005      	beq.n	800195c <presentWeekInMonth+0x44>
 8001950:	797b      	ldrb	r3, [r7, #5]
 8001952:	2b07      	cmp	r3, #7
 8001954:	d802      	bhi.n	800195c <presentWeekInMonth+0x44>
	{
		week = 1;
 8001956:	2301      	movs	r3, #1
 8001958:	71fb      	strb	r3, [r7, #7]
 800195a:	e025      	b.n	80019a8 <presentWeekInMonth+0x90>
	} else if ((lastMonday >= 8) && (lastMonday < 15))
 800195c:	797b      	ldrb	r3, [r7, #5]
 800195e:	2b07      	cmp	r3, #7
 8001960:	d905      	bls.n	800196e <presentWeekInMonth+0x56>
 8001962:	797b      	ldrb	r3, [r7, #5]
 8001964:	2b0e      	cmp	r3, #14
 8001966:	d802      	bhi.n	800196e <presentWeekInMonth+0x56>
	{
		week = 2;
 8001968:	2302      	movs	r3, #2
 800196a:	71fb      	strb	r3, [r7, #7]
 800196c:	e01c      	b.n	80019a8 <presentWeekInMonth+0x90>
	} else if ((lastMonday >= 15) && (lastMonday < 22))
 800196e:	797b      	ldrb	r3, [r7, #5]
 8001970:	2b0e      	cmp	r3, #14
 8001972:	d905      	bls.n	8001980 <presentWeekInMonth+0x68>
 8001974:	797b      	ldrb	r3, [r7, #5]
 8001976:	2b15      	cmp	r3, #21
 8001978:	d802      	bhi.n	8001980 <presentWeekInMonth+0x68>
	{
		week = 3;
 800197a:	2303      	movs	r3, #3
 800197c:	71fb      	strb	r3, [r7, #7]
 800197e:	e013      	b.n	80019a8 <presentWeekInMonth+0x90>
	} else if ((lastMonday >= 22) && (lastMonday < 29))
 8001980:	797b      	ldrb	r3, [r7, #5]
 8001982:	2b15      	cmp	r3, #21
 8001984:	d905      	bls.n	8001992 <presentWeekInMonth+0x7a>
 8001986:	797b      	ldrb	r3, [r7, #5]
 8001988:	2b1c      	cmp	r3, #28
 800198a:	d802      	bhi.n	8001992 <presentWeekInMonth+0x7a>
	{
		week = 4;
 800198c:	2304      	movs	r3, #4
 800198e:	71fb      	strb	r3, [r7, #7]
 8001990:	e00a      	b.n	80019a8 <presentWeekInMonth+0x90>
	} else if ((lastMonday >= 29) && (lastMonday < 32))
 8001992:	797b      	ldrb	r3, [r7, #5]
 8001994:	2b1c      	cmp	r3, #28
 8001996:	d905      	bls.n	80019a4 <presentWeekInMonth+0x8c>
 8001998:	797b      	ldrb	r3, [r7, #5]
 800199a:	2b1f      	cmp	r3, #31
 800199c:	d802      	bhi.n	80019a4 <presentWeekInMonth+0x8c>
	{
		week = 5;
 800199e:	2305      	movs	r3, #5
 80019a0:	71fb      	strb	r3, [r7, #7]
 80019a2:	e001      	b.n	80019a8 <presentWeekInMonth+0x90>
	} else
	{
		return 9; //error
 80019a4:	2309      	movs	r3, #9
 80019a6:	e000      	b.n	80019aa <presentWeekInMonth+0x92>
	}
	return week;
 80019a8:	79fb      	ldrb	r3, [r7, #7]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr
 80019b4:	200005c0 	.word	0x200005c0

080019b8 <specifyBegininngOfFileName>:

EPR_STAT specifyBegininngOfFileName(char* fileName, uint8_t *len)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af02      	add	r7, sp, #8
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
	int textLen;
	uint8_t week;

	clearTableChar(fileName);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff fc6c 	bl	80012a0 <clearTableChar>
	enum period daysPerFile = readDaysPerFileSettingFromBackupRegister();
 80019c8:	f7ff fcce 	bl	8001368 <readDaysPerFileSettingFromBackupRegister>
 80019cc:	4603      	mov	r3, r0
 80019ce:	74bb      	strb	r3, [r7, #18]
	switch (daysPerFile)
 80019d0:	7cbb      	ldrb	r3, [r7, #18]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d002      	beq.n	80019dc <specifyBegininngOfFileName+0x24>
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d033      	beq.n	8001a42 <specifyBegininngOfFileName+0x8a>
 80019da:	e044      	b.n	8001a66 <specifyBegininngOfFileName+0xae>
	{
		case WEEK:
			week = presentWeekInMonth();
 80019dc:	f7ff ff9c 	bl	8001918 <presentWeekInMonth>
 80019e0:	4603      	mov	r3, r0
 80019e2:	74fb      	strb	r3, [r7, #19]
			if (week > 5)
 80019e4:	7cfb      	ldrb	r3, [r7, #19]
 80019e6:	2b05      	cmp	r3, #5
 80019e8:	d901      	bls.n	80019ee <specifyBegininngOfFileName+0x36>
			{
				return G_ERR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e042      	b.n	8001a74 <specifyBegininngOfFileName+0xbc>
			}
			RTC_DateTypeDef DateInFileName;
			DateInFileName.Year 	= Date.Year;
 80019ee:	4b23      	ldr	r3, [pc, #140]	; (8001a7c <specifyBegininngOfFileName+0xc4>)
 80019f0:	78db      	ldrb	r3, [r3, #3]
 80019f2:	73fb      	strb	r3, [r7, #15]
			DateInFileName.Month 	= Date.Month;
 80019f4:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <specifyBegininngOfFileName+0xc4>)
 80019f6:	785b      	ldrb	r3, [r3, #1]
 80019f8:	737b      	strb	r3, [r7, #13]
			if (week == 0)			//obecny tydzień zaczał się w poprzednim miesiącu, więc będzie 5 tygodniem poprzedniego miesiąca
 80019fa:	7cfb      	ldrb	r3, [r7, #19]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d111      	bne.n	8001a24 <specifyBegininngOfFileName+0x6c>
			{
				if (DateInFileName.Month != 1)
 8001a00:	7b7b      	ldrb	r3, [r7, #13]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d006      	beq.n	8001a14 <specifyBegininngOfFileName+0x5c>
				{
					DateInFileName.Month = DateInFileName.Month - 1;
 8001a06:	7b7b      	ldrb	r3, [r7, #13]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	737b      	strb	r3, [r7, #13]
					week = 5;
 8001a0e:	2305      	movs	r3, #5
 8001a10:	74fb      	strb	r3, [r7, #19]
 8001a12:	e007      	b.n	8001a24 <specifyBegininngOfFileName+0x6c>
				} else
				{
					DateInFileName.Month = 12;
 8001a14:	230c      	movs	r3, #12
 8001a16:	737b      	strb	r3, [r7, #13]
					DateInFileName.Year = DateInFileName.Year - 1;
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	73fb      	strb	r3, [r7, #15]
					week = 5;
 8001a20:	2305      	movs	r3, #5
 8001a22:	74fb      	strb	r3, [r7, #19]
				}
			}
			textLen = snprintf(fileName, 7, "%02d%02dW%01d", DateInFileName.Year, DateInFileName.Month, week);
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
 8001a26:	4619      	mov	r1, r3
 8001a28:	7b7b      	ldrb	r3, [r7, #13]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	7cfb      	ldrb	r3, [r7, #19]
 8001a2e:	9301      	str	r3, [sp, #4]
 8001a30:	9200      	str	r2, [sp, #0]
 8001a32:	460b      	mov	r3, r1
 8001a34:	4a12      	ldr	r2, [pc, #72]	; (8001a80 <specifyBegininngOfFileName+0xc8>)
 8001a36:	2107      	movs	r1, #7
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f00e fa1f 	bl	800fe7c <sniprintf>
 8001a3e:	6178      	str	r0, [r7, #20]
			break;
 8001a40:	e013      	b.n	8001a6a <specifyBegininngOfFileName+0xb2>

		case ONE_DAY:
			textLen = snprintf(fileName, 7, "%02d%02d%02d", Date.Year, Date.Month, Date.Date);
 8001a42:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <specifyBegininngOfFileName+0xc4>)
 8001a44:	78db      	ldrb	r3, [r3, #3]
 8001a46:	4619      	mov	r1, r3
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <specifyBegininngOfFileName+0xc4>)
 8001a4a:	785b      	ldrb	r3, [r3, #1]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <specifyBegininngOfFileName+0xc4>)
 8001a50:	789b      	ldrb	r3, [r3, #2]
 8001a52:	9301      	str	r3, [sp, #4]
 8001a54:	9200      	str	r2, [sp, #0]
 8001a56:	460b      	mov	r3, r1
 8001a58:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <specifyBegininngOfFileName+0xcc>)
 8001a5a:	2107      	movs	r1, #7
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f00e fa0d 	bl	800fe7c <sniprintf>
 8001a62:	6178      	str	r0, [r7, #20]
			break;
 8001a64:	e001      	b.n	8001a6a <specifyBegininngOfFileName+0xb2>

		default:
			return G_ERR; //error
 8001a66:	2301      	movs	r3, #1
 8001a68:	e004      	b.n	8001a74 <specifyBegininngOfFileName+0xbc>
	}
	*len = textLen;
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	701a      	strb	r2, [r3, #0]
	return S_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	200005c0 	.word	0x200005c0
 8001a80:	080107c0 	.word	0x080107c0
 8001a84:	080107d0 	.word	0x080107d0

08001a88 <specifyFileName>:

EPR_STAT specifyFileName(char *outName)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b092      	sub	sp, #72	; 0x48
 8001a8c:	af02      	add	r7, sp, #8
 8001a8e:	6078      	str	r0, [r7, #4]
	char startOfName[6];
	uint8_t len;
	char additionalFileID;
	FILINFO FileInfo;
	FRESULT FATres;
	DWORD maxFileSize = 51200; //50kB
 8001a90:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 8001a94:	63bb      	str	r3, [r7, #56]	; 0x38
	DWORD maxLineLen = 50; //42B pomiaru, 7B komentarza i '\0';
 8001a96:	2332      	movs	r3, #50	; 0x32
 8001a98:	637b      	str	r3, [r7, #52]	; 0x34
	DWORD max = maxFileSize - maxLineLen - 1;
 8001a9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	633b      	str	r3, [r7, #48]	; 0x30
	_Bool findFlag = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	#define NUM_ADDED_CHARACTERS	7	//(len + NUM_ADDED_CHARACTERS) < 14

	if (specifyBegininngOfFileName(startOfName, &len) != S_OK)
 8001aaa:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8001aae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ff7f 	bl	80019b8 <specifyBegininngOfFileName>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <specifyFileName+0x3c>
	{
		return G_ERR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e047      	b.n	8001b54 <specifyFileName+0xcc>
	}
	additionalFileID = 'A';
 8001ac4:	2341      	movs	r3, #65	; 0x41
 8001ac6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	while (!findFlag)
 8001aca:	e03b      	b.n	8001b44 <specifyFileName+0xbc>
	{
		snprintf(outName, len + NUM_ADDED_CHARACTERS, "M%6s%c.CSV", startOfName, additionalFileID);
 8001acc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ad0:	3307      	adds	r3, #7
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001ad8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	4a1e      	ldr	r2, [pc, #120]	; (8001b5c <specifyFileName+0xd4>)
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f00e f9ca 	bl	800fe7c <sniprintf>
		FATres = f_stat(outName, &FileInfo);
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	4619      	mov	r1, r3
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f00d fa0c 	bl	800ef0c <f_stat>
 8001af4:	4603      	mov	r3, r0
 8001af6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if ((FATres == FR_NO_FILE) || ((FATres == S_OK) && (FileInfo.fsize <= max)))
 8001afa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d007      	beq.n	8001b12 <specifyFileName+0x8a>
 8001b02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d107      	bne.n	8001b1a <specifyFileName+0x92>
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d303      	bcc.n	8001b1a <specifyFileName+0x92>
		{
			findFlag = 1;
 8001b12:	2301      	movs	r3, #1
 8001b14:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001b18:	e014      	b.n	8001b44 <specifyFileName+0xbc>
		} else if ((FATres == FR_OK) && (FileInfo.fsize > max))
 8001b1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10e      	bne.n	8001b40 <specifyFileName+0xb8>
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d20a      	bcs.n	8001b40 <specifyFileName+0xb8>
		{
			++additionalFileID;
 8001b2a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001b2e:	3301      	adds	r3, #1
 8001b30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  		if (additionalFileID > 'Z')
 8001b34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001b38:	2b5a      	cmp	r3, #90	; 0x5a
 8001b3a:	d903      	bls.n	8001b44 <specifyFileName+0xbc>
	  		{
	  			return G_ERR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e009      	b.n	8001b54 <specifyFileName+0xcc>
	  		}
		} else
		{
			return G_ERR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e007      	b.n	8001b54 <specifyFileName+0xcc>
	while (!findFlag)
 8001b44:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001b48:	f083 0301 	eor.w	r3, r3, #1
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1bc      	bne.n	8001acc <specifyFileName+0x44>
		}
	}
	return S_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3740      	adds	r7, #64	; 0x40
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	080107e0 	.word	0x080107e0

08001b60 <saveDataToSDCard>:

void saveDataToSDCard(float temperature, float pressure, float humidity)
{
 8001b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b64:	b0aa      	sub	sp, #168	; 0xa8
 8001b66:	af0c      	add	r7, sp, #48	; 0x30
 8001b68:	61f8      	str	r0, [r7, #28]
 8001b6a:	61b9      	str	r1, [r7, #24]
 8001b6c:	617a      	str	r2, [r7, #20]
	  FILINFO FileInfo;
	  FRESULT FATres;
	  char record[41];
	  uint8_t recordLen;
	  _Bool recordHasBeenMadeFlag = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	  //allLEDsOff();
	  if(BSP_SD_Init() == FR_OK)
 8001b74:	f008 ff9e 	bl	800aab4 <BSP_SD_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f040 80ae 	bne.w	8001cdc <saveDataToSDCard+0x17c>
	  {
		  if (f_mount(&SDFatFS, SDPath, 1) == FR_OK)
 8001b80:	2201      	movs	r2, #1
 8001b82:	496a      	ldr	r1, [pc, #424]	; (8001d2c <saveDataToSDCard+0x1cc>)
 8001b84:	486a      	ldr	r0, [pc, #424]	; (8001d30 <saveDataToSDCard+0x1d0>)
 8001b86:	f00c fa81 	bl	800e08c <f_mount>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f040 80a2 	bne.w	8001cd6 <saveDataToSDCard+0x176>
		  {
			  //HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, LED_ON);		//zapala się żółta LED, jeśli partycję udało się zamontować
		  	  char myPath[13];		//max 13, bo nie działą
		  	  if (specifyFileName(myPath) == S_OK)
 8001b92:	f107 0320 	add.w	r3, r7, #32
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff ff76 	bl	8001a88 <specifyFileName>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f040 8091 	bne.w	8001cc6 <saveDataToSDCard+0x166>
		  	  {
				  FATres = f_stat(myPath, &FileInfo);
 8001ba4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001ba8:	f107 0320 	add.w	r3, r7, #32
 8001bac:	4611      	mov	r1, r2
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f00d f9ac 	bl	800ef0c <f_stat>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
				  if (FATres == FR_OK || FATres == FR_NO_FILE)
 8001bba:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <saveDataToSDCard+0x6a>
 8001bc2:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d17d      	bne.n	8001cc6 <saveDataToSDCard+0x166>
				  {
					if (FATres == FR_NO_FILE)
 8001bca:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d10b      	bne.n	8001bea <saveDataToSDCard+0x8a>
					{
						f_open(&SDFile, myPath, FA_WRITE | FA_READ | FA_CREATE_NEW);
 8001bd2:	f107 0320 	add.w	r3, r7, #32
 8001bd6:	2207      	movs	r2, #7
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4856      	ldr	r0, [pc, #344]	; (8001d34 <saveDataToSDCard+0x1d4>)
 8001bdc:	f00c fa9e 	bl	800e11c <f_open>
						f_puts(firstLineOfFile, &SDFile);
 8001be0:	4954      	ldr	r1, [pc, #336]	; (8001d34 <saveDataToSDCard+0x1d4>)
 8001be2:	4855      	ldr	r0, [pc, #340]	; (8001d38 <saveDataToSDCard+0x1d8>)
 8001be4:	f00d fa18 	bl	800f018 <f_puts>
 8001be8:	e006      	b.n	8001bf8 <saveDataToSDCard+0x98>
					} else
					{
						f_open(&SDFile, myPath, FA_WRITE | FA_READ | FA_OPEN_EXISTING);
 8001bea:	f107 0320 	add.w	r3, r7, #32
 8001bee:	2203      	movs	r2, #3
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4850      	ldr	r0, [pc, #320]	; (8001d34 <saveDataToSDCard+0x1d4>)
 8001bf4:	f00c fa92 	bl	800e11c <f_open>
					}
					f_lseek(&SDFile, f_size(&SDFile));
 8001bf8:	4b4e      	ldr	r3, [pc, #312]	; (8001d34 <saveDataToSDCard+0x1d4>)
 8001bfa:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001bfe:	4619      	mov	r1, r3
 8001c00:	484c      	ldr	r0, [pc, #304]	; (8001d34 <saveDataToSDCard+0x1d4>)
 8001c02:	f00c ff25 	bl	800ea50 <f_lseek>
					fileSize = f_size(&SDFile);
 8001c06:	4b4b      	ldr	r3, [pc, #300]	; (8001d34 <saveDataToSDCard+0x1d4>)
 8001c08:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001c0c:	4a4b      	ldr	r2, [pc, #300]	; (8001d3c <saveDataToSDCard+0x1dc>)
 8001c0e:	6013      	str	r3, [r2, #0]
					pointer = f_tell(&SDFile);
 8001c10:	4b48      	ldr	r3, [pc, #288]	; (8001d34 <saveDataToSDCard+0x1d4>)
 8001c12:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001c16:	4a4a      	ldr	r2, [pc, #296]	; (8001d40 <saveDataToSDCard+0x1e0>)
 8001c18:	6013      	str	r3, [r2, #0]
					eof = f_eof(&SDFile);
 8001c1a:	4b46      	ldr	r3, [pc, #280]	; (8001d34 <saveDataToSDCard+0x1d4>)
 8001c1c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8001c20:	4b44      	ldr	r3, [pc, #272]	; (8001d34 <saveDataToSDCard+0x1d4>)
 8001c22:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001c26:	429a      	cmp	r2, r3
 8001c28:	bf0c      	ite	eq
 8001c2a:	2301      	moveq	r3, #1
 8001c2c:	2300      	movne	r3, #0
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	461a      	mov	r2, r3
 8001c32:	4b44      	ldr	r3, [pc, #272]	; (8001d44 <saveDataToSDCard+0x1e4>)
 8001c34:	601a      	str	r2, [r3, #0]

					recordLen = snprintf(record, 41, "\n20%02d-%02d-%02d %02d:%02d:%02d,%.02f,%.02f,%.0f,",
							Date.Year, Date.Month, Date.Date, Time.Hours, Time.Minutes, Time.Seconds,
 8001c36:	4b44      	ldr	r3, [pc, #272]	; (8001d48 <saveDataToSDCard+0x1e8>)
 8001c38:	78db      	ldrb	r3, [r3, #3]
					recordLen = snprintf(record, 41, "\n20%02d-%02d-%02d %02d:%02d:%02d,%.02f,%.02f,%.0f,",
 8001c3a:	469a      	mov	sl, r3
							Date.Year, Date.Month, Date.Date, Time.Hours, Time.Minutes, Time.Seconds,
 8001c3c:	4b42      	ldr	r3, [pc, #264]	; (8001d48 <saveDataToSDCard+0x1e8>)
 8001c3e:	785b      	ldrb	r3, [r3, #1]
					recordLen = snprintf(record, 41, "\n20%02d-%02d-%02d %02d:%02d:%02d,%.02f,%.02f,%.0f,",
 8001c40:	461e      	mov	r6, r3
							Date.Year, Date.Month, Date.Date, Time.Hours, Time.Minutes, Time.Seconds,
 8001c42:	4b41      	ldr	r3, [pc, #260]	; (8001d48 <saveDataToSDCard+0x1e8>)
 8001c44:	789b      	ldrb	r3, [r3, #2]
					recordLen = snprintf(record, 41, "\n20%02d-%02d-%02d %02d:%02d:%02d,%.02f,%.02f,%.0f,",
 8001c46:	613b      	str	r3, [r7, #16]
							Date.Year, Date.Month, Date.Date, Time.Hours, Time.Minutes, Time.Seconds,
 8001c48:	4b40      	ldr	r3, [pc, #256]	; (8001d4c <saveDataToSDCard+0x1ec>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
					recordLen = snprintf(record, 41, "\n20%02d-%02d-%02d %02d:%02d:%02d,%.02f,%.02f,%.0f,",
 8001c4c:	60fb      	str	r3, [r7, #12]
							Date.Year, Date.Month, Date.Date, Time.Hours, Time.Minutes, Time.Seconds,
 8001c4e:	4b3f      	ldr	r3, [pc, #252]	; (8001d4c <saveDataToSDCard+0x1ec>)
 8001c50:	785b      	ldrb	r3, [r3, #1]
					recordLen = snprintf(record, 41, "\n20%02d-%02d-%02d %02d:%02d:%02d,%.02f,%.02f,%.0f,",
 8001c52:	60bb      	str	r3, [r7, #8]
							Date.Year, Date.Month, Date.Date, Time.Hours, Time.Minutes, Time.Seconds,
 8001c54:	4b3d      	ldr	r3, [pc, #244]	; (8001d4c <saveDataToSDCard+0x1ec>)
 8001c56:	789b      	ldrb	r3, [r3, #2]
					recordLen = snprintf(record, 41, "\n20%02d-%02d-%02d %02d:%02d:%02d,%.02f,%.02f,%.0f,",
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	69f8      	ldr	r0, [r7, #28]
 8001c5c:	f7fe fc46 	bl	80004ec <__aeabi_f2d>
 8001c60:	4604      	mov	r4, r0
 8001c62:	460d      	mov	r5, r1
 8001c64:	69b8      	ldr	r0, [r7, #24]
 8001c66:	f7fe fc41 	bl	80004ec <__aeabi_f2d>
 8001c6a:	4680      	mov	r8, r0
 8001c6c:	4689      	mov	r9, r1
 8001c6e:	6978      	ldr	r0, [r7, #20]
 8001c70:	f7fe fc3c 	bl	80004ec <__aeabi_f2d>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001c7c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001c80:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8001c84:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	9204      	str	r2, [sp, #16]
 8001c8c:	68ba      	ldr	r2, [r7, #8]
 8001c8e:	9203      	str	r2, [sp, #12]
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	9202      	str	r2, [sp, #8]
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	9301      	str	r3, [sp, #4]
 8001c98:	9600      	str	r6, [sp, #0]
 8001c9a:	4653      	mov	r3, sl
 8001c9c:	4a2c      	ldr	r2, [pc, #176]	; (8001d50 <saveDataToSDCard+0x1f0>)
 8001c9e:	2129      	movs	r1, #41	; 0x29
 8001ca0:	f00e f8ec 	bl	800fe7c <sniprintf>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
							temperature, pressure, humidity);
					if (f_write(&SDFile, record, recordLen, &nrWrittenBytes) == FR_OK)
 8001caa:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8001cae:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001cb2:	4b28      	ldr	r3, [pc, #160]	; (8001d54 <saveDataToSDCard+0x1f4>)
 8001cb4:	481f      	ldr	r0, [pc, #124]	; (8001d34 <saveDataToSDCard+0x1d4>)
 8001cb6:	f00c fc3c 	bl	800e532 <f_write>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d102      	bne.n	8001cc6 <saveDataToSDCard+0x166>
					{
						recordHasBeenMadeFlag = 1;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
					}
				  }
		  	  }
		  	  f_close(&SDFile);
 8001cc6:	481b      	ldr	r0, [pc, #108]	; (8001d34 <saveDataToSDCard+0x1d4>)
 8001cc8:	f00c fe9a 	bl	800ea00 <f_close>
			  f_mount(&SDFatFS, SDPath, 0);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	4917      	ldr	r1, [pc, #92]	; (8001d2c <saveDataToSDCard+0x1cc>)
 8001cd0:	4817      	ldr	r0, [pc, #92]	; (8001d30 <saveDataToSDCard+0x1d0>)
 8001cd2:	f00c f9db 	bl	800e08c <f_mount>
		  	  //allLEDsOff();							//wył. wszyskich LED
		  }
		  HAL_SD_DeInit(&hsd);
 8001cd6:	4820      	ldr	r0, [pc, #128]	; (8001d58 <saveDataToSDCard+0x1f8>)
 8001cd8:	f004 fdb2 	bl	8006840 <HAL_SD_DeInit>
	  }
	  if (recordHasBeenMadeFlag)
 8001cdc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d00e      	beq.n	8001d02 <saveDataToSDCard+0x1a2>
	  {
			HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, LED_ON);	//wł. zielonej LED, jesli zapis do pliku się udał
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2102      	movs	r1, #2
 8001ce8:	481c      	ldr	r0, [pc, #112]	; (8001d5c <saveDataToSDCard+0x1fc>)
 8001cea:	f001 fca0 	bl	800362e <HAL_GPIO_WritePin>
			HAL_Delay(400);
 8001cee:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001cf2:	f001 f91f 	bl	8002f34 <HAL_Delay>
			HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, LED_OFF);
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	2102      	movs	r1, #2
 8001cfa:	4818      	ldr	r0, [pc, #96]	; (8001d5c <saveDataToSDCard+0x1fc>)
 8001cfc:	f001 fc97 	bl	800362e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, LED_OFF);	//wył. czerwoną LED na 0,2s, jeśli zaspis do pliku się nie udał, mrógnięcie diodą
			HAL_Delay(200);
			HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, LED_ON);
			HAL_Delay(200);							//potrzebne, bo czerwona LED jest wł. podczas całego stanu pracy i gaszona przed samym uśpieniem.
	  }
}
 8001d00:	e00f      	b.n	8001d22 <saveDataToSDCard+0x1c2>
			HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, LED_OFF);	//wył. czerwoną LED na 0,2s, jeśli zaspis do pliku się nie udał, mrógnięcie diodą
 8001d02:	2201      	movs	r2, #1
 8001d04:	2108      	movs	r1, #8
 8001d06:	4815      	ldr	r0, [pc, #84]	; (8001d5c <saveDataToSDCard+0x1fc>)
 8001d08:	f001 fc91 	bl	800362e <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8001d0c:	20c8      	movs	r0, #200	; 0xc8
 8001d0e:	f001 f911 	bl	8002f34 <HAL_Delay>
			HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, LED_ON);
 8001d12:	2200      	movs	r2, #0
 8001d14:	2108      	movs	r1, #8
 8001d16:	4811      	ldr	r0, [pc, #68]	; (8001d5c <saveDataToSDCard+0x1fc>)
 8001d18:	f001 fc89 	bl	800362e <HAL_GPIO_WritePin>
			HAL_Delay(200);							//potrzebne, bo czerwona LED jest wł. podczas całego stanu pracy i gaszona przed samym uśpieniem.
 8001d1c:	20c8      	movs	r0, #200	; 0xc8
 8001d1e:	f001 f909 	bl	8002f34 <HAL_Delay>
}
 8001d22:	bf00      	nop
 8001d24:	3778      	adds	r7, #120	; 0x78
 8001d26:	46bd      	mov	sp, r7
 8001d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d2c:	20000744 	.word	0x20000744
 8001d30:	20000974 	.word	0x20000974
 8001d34:	20000748 	.word	0x20000748
 8001d38:	080109c0 	.word	0x080109c0
 8001d3c:	2000020c 	.word	0x2000020c
 8001d40:	200005c8 	.word	0x200005c8
 8001d44:	200005b8 	.word	0x200005b8
 8001d48:	200005c0 	.word	0x200005c0
 8001d4c:	200005f4 	.word	0x200005f4
 8001d50:	080107ec 	.word	0x080107ec
 8001d54:	200005c4 	.word	0x200005c4
 8001d58:	2000060c 	.word	0x2000060c
 8001d5c:	40011000 	.word	0x40011000

08001d60 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8001d66:	f107 0308 	add.w	r3, r7, #8
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	460a      	mov	r2, r1
 8001d6e:	801a      	strh	r2, [r3, #0]
 8001d70:	460a      	mov	r2, r1
 8001d72:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001d74:	2300      	movs	r3, #0
 8001d76:	607b      	str	r3, [r7, #4]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001d78:	4b1b      	ldr	r3, [pc, #108]	; (8001de8 <MX_RTC_Init+0x88>)
 8001d7a:	4a1c      	ldr	r2, [pc, #112]	; (8001dec <MX_RTC_Init+0x8c>)
 8001d7c:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001d7e:	4b1a      	ldr	r3, [pc, #104]	; (8001de8 <MX_RTC_Init+0x88>)
 8001d80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d84:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001d86:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <MX_RTC_Init+0x88>)
 8001d88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d8c:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d8e:	4816      	ldr	r0, [pc, #88]	; (8001de8 <MX_RTC_Init+0x88>)
 8001d90:	f003 fde8 	bl	8005964 <HAL_RTC_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001d9a:	f7ff fa7b 	bl	8001294 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  HAL_PWR_EnableBkUpAccess();
 8001d9e:	f003 f813 	bl	8004dc8 <HAL_PWR_EnableBkUpAccess>
  uint8_t dateFromBackup[4];
  uint16_t bufBKP_DR1, bufBKP_DR2;
  bufBKP_DR1 = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1);
 8001da2:	2101      	movs	r1, #1
 8001da4:	4810      	ldr	r0, [pc, #64]	; (8001de8 <MX_RTC_Init+0x88>)
 8001da6:	f004 fc9f 	bl	80066e8 <HAL_RTCEx_BKUPRead>
 8001daa:	4603      	mov	r3, r0
 8001dac:	81fb      	strh	r3, [r7, #14]
  bufBKP_DR2 = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2);
 8001dae:	2102      	movs	r1, #2
 8001db0:	480d      	ldr	r0, [pc, #52]	; (8001de8 <MX_RTC_Init+0x88>)
 8001db2:	f004 fc99 	bl	80066e8 <HAL_RTCEx_BKUPRead>
 8001db6:	4603      	mov	r3, r0
 8001db8:	81bb      	strh	r3, [r7, #12]
  dateFromBackup[0] = bufBKP_DR2 >> 8;	//rok
 8001dba:	89bb      	ldrh	r3, [r7, #12]
 8001dbc:	0a1b      	lsrs	r3, r3, #8
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	703b      	strb	r3, [r7, #0]
  dateFromBackup[1] = bufBKP_DR2;		//mies.
 8001dc4:	89bb      	ldrh	r3, [r7, #12]
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	707b      	strb	r3, [r7, #1]
  dateFromBackup[2] = bufBKP_DR1 >> 8;	//dzień
 8001dca:	89fb      	ldrh	r3, [r7, #14]
 8001dcc:	0a1b      	lsrs	r3, r3, #8
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	70bb      	strb	r3, [r7, #2]
  dateFromBackup[3] = bufBKP_DR1;		//dz. tyg.
 8001dd4:	89fb      	ldrh	r3, [r7, #14]
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	70fb      	strb	r3, [r7, #3]
  setDate(dateFromBackup);
 8001dda:	463b      	mov	r3, r7
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f000 f851 	bl	8001e84 <setDate>
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
  {
    Error_Handler();
  }

}
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	200005f8 	.word	0x200005f8
 8001dec:	40002800 	.word	0x40002800

08001df0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a0b      	ldr	r2, [pc, #44]	; (8001e2c <HAL_RTC_MspInit+0x3c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d110      	bne.n	8001e24 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001e02:	f002 ffe1 	bl	8004dc8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001e06:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <HAL_RTC_MspInit+0x40>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	4a09      	ldr	r2, [pc, #36]	; (8001e30 <HAL_RTC_MspInit+0x40>)
 8001e0c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e10:	61d3      	str	r3, [r2, #28]
 8001e12:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <HAL_RTC_MspInit+0x40>)
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e1e:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_RTC_MspInit+0x44>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001e24:	bf00      	nop
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40002800 	.word	0x40002800
 8001e30:	40021000 	.word	0x40021000
 8001e34:	4242043c 	.word	0x4242043c

08001e38 <setTime>:
  }
}

/* USER CODE BEGIN 1 */
void setTime(uint8_t* time)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef Time = {0};
 8001e40:	f107 030c 	add.w	r3, r7, #12
 8001e44:	2100      	movs	r1, #0
 8001e46:	460a      	mov	r2, r1
 8001e48:	801a      	strh	r2, [r3, #0]
 8001e4a:	460a      	mov	r2, r1
 8001e4c:	709a      	strb	r2, [r3, #2]

  Time.Hours = time[0];
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	733b      	strb	r3, [r7, #12]
  Time.Minutes = time[1];
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	785b      	ldrb	r3, [r3, #1]
 8001e58:	737b      	strb	r3, [r7, #13]
  Time.Seconds = time[2];
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	789b      	ldrb	r3, [r3, #2]
 8001e5e:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN) != HAL_OK)
 8001e60:	f107 030c 	add.w	r3, r7, #12
 8001e64:	2200      	movs	r2, #0
 8001e66:	4619      	mov	r1, r3
 8001e68:	4805      	ldr	r0, [pc, #20]	; (8001e80 <setTime+0x48>)
 8001e6a:	f003 fe11 	bl	8005a90 <HAL_RTC_SetTime>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <setTime+0x40>
  {
    Error_Handler();
 8001e74:	f7ff fa0e 	bl	8001294 <Error_Handler>
  }
}
 8001e78:	bf00      	nop
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	200005f8 	.word	0x200005f8

08001e84 <setDate>:

void setDate(uint8_t* date)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  RTC_DateTypeDef NewDate = {0};
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]

  NewDate.Year = date[0];
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	73fb      	strb	r3, [r7, #15]
  NewDate.Month = date[1];
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	785b      	ldrb	r3, [r3, #1]
 8001e9a:	737b      	strb	r3, [r7, #13]
  NewDate.Date = date[2];
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	789b      	ldrb	r3, [r3, #2]
 8001ea0:	73bb      	strb	r3, [r7, #14]
  NewDate.WeekDay = date[3];
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	78db      	ldrb	r3, [r3, #3]
 8001ea6:	733b      	strb	r3, [r7, #12]
  DateComapare = NewDate;
 8001ea8:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <setDate+0x50>)
 8001eaa:	461a      	mov	r2, r3
 8001eac:	f107 030c 	add.w	r3, r7, #12
 8001eb0:	6818      	ldr	r0, [r3, #0]
 8001eb2:	6010      	str	r0, [r2, #0]
  if (HAL_RTC_SetDate(&hrtc, &NewDate, RTC_FORMAT_BIN) != HAL_OK)
 8001eb4:	f107 030c 	add.w	r3, r7, #12
 8001eb8:	2200      	movs	r2, #0
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4806      	ldr	r0, [pc, #24]	; (8001ed8 <setDate+0x54>)
 8001ebe:	f003 ff57 	bl	8005d70 <HAL_RTC_SetDate>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <setDate+0x48>
  {
    Error_Handler();
 8001ec8:	f7ff f9e4 	bl	8001294 <Error_Handler>
  }

}
 8001ecc:	bf00      	nop
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	200005bc 	.word	0x200005bc
 8001ed8:	200005f8 	.word	0x200005f8

08001edc <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <MX_SDIO_SD_Init+0x38>)
 8001ee2:	4a0d      	ldr	r2, [pc, #52]	; (8001f18 <MX_SDIO_SD_Init+0x3c>)
 8001ee4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001ee6:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <MX_SDIO_SD_Init+0x38>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001eec:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <MX_SDIO_SD_Init+0x38>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001ef2:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <MX_SDIO_SD_Init+0x38>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001ef8:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <MX_SDIO_SD_Init+0x38>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001efe:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <MX_SDIO_SD_Init+0x38>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001f04:	4b03      	ldr	r3, [pc, #12]	; (8001f14 <MX_SDIO_SD_Init+0x38>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	619a      	str	r2, [r3, #24]

}
 8001f0a:	bf00      	nop
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	2000060c 	.word	0x2000060c
 8001f18:	40018000 	.word	0x40018000

08001f1c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08a      	sub	sp, #40	; 0x28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 0318 	add.w	r3, r7, #24
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
  if(sdHandle->Instance==SDIO)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a22      	ldr	r2, [pc, #136]	; (8001fc0 <HAL_SD_MspInit+0xa4>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d13c      	bne.n	8001fb6 <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001f3c:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <HAL_SD_MspInit+0xa8>)
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	4a20      	ldr	r2, [pc, #128]	; (8001fc4 <HAL_SD_MspInit+0xa8>)
 8001f42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f46:	6153      	str	r3, [r2, #20]
 8001f48:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <HAL_SD_MspInit+0xa8>)
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f54:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <HAL_SD_MspInit+0xa8>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	4a1a      	ldr	r2, [pc, #104]	; (8001fc4 <HAL_SD_MspInit+0xa8>)
 8001f5a:	f043 0310 	orr.w	r3, r3, #16
 8001f5e:	6193      	str	r3, [r2, #24]
 8001f60:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <HAL_SD_MspInit+0xa8>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	f003 0310 	and.w	r3, r3, #16
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f6c:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <HAL_SD_MspInit+0xa8>)
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	4a14      	ldr	r2, [pc, #80]	; (8001fc4 <HAL_SD_MspInit+0xa8>)
 8001f72:	f043 0320 	orr.w	r3, r3, #32
 8001f76:	6193      	str	r3, [r2, #24]
 8001f78:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <HAL_SD_MspInit+0xa8>)
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	f003 0320 	and.w	r3, r3, #32
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8001f84:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f92:	f107 0318 	add.w	r3, r7, #24
 8001f96:	4619      	mov	r1, r3
 8001f98:	480b      	ldr	r0, [pc, #44]	; (8001fc8 <HAL_SD_MspInit+0xac>)
 8001f9a:	f001 f8fb 	bl	8003194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f9e:	2304      	movs	r3, #4
 8001fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001faa:	f107 0318 	add.w	r3, r7, #24
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4806      	ldr	r0, [pc, #24]	; (8001fcc <HAL_SD_MspInit+0xb0>)
 8001fb2:	f001 f8ef 	bl	8003194 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001fb6:	bf00      	nop
 8001fb8:	3728      	adds	r7, #40	; 0x28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40018000 	.word	0x40018000
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40011000 	.word	0x40011000
 8001fcc:	40011400 	.word	0x40011400

08001fd0 <HAL_SD_MspDeInit>:

void HAL_SD_MspDeInit(SD_HandleTypeDef* sdHandle)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]

  if(sdHandle->Instance==SDIO)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <HAL_SD_MspDeInit+0x38>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d10e      	bne.n	8002000 <HAL_SD_MspDeInit+0x30>
  {
  /* USER CODE BEGIN SDIO_MspDeInit 0 */

  /* USER CODE END SDIO_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SDIO_CLK_DISABLE();
 8001fe2:	4b0a      	ldr	r3, [pc, #40]	; (800200c <HAL_SD_MspDeInit+0x3c>)
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	4a09      	ldr	r2, [pc, #36]	; (800200c <HAL_SD_MspDeInit+0x3c>)
 8001fe8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fec:	6153      	str	r3, [r2, #20]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8|GPIO_PIN_12);
 8001fee:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 8001ff2:	4807      	ldr	r0, [pc, #28]	; (8002010 <HAL_SD_MspDeInit+0x40>)
 8001ff4:	f001 fa38 	bl	8003468 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 8001ff8:	2104      	movs	r1, #4
 8001ffa:	4806      	ldr	r0, [pc, #24]	; (8002014 <HAL_SD_MspDeInit+0x44>)
 8001ffc:	f001 fa34 	bl	8003468 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SDIO_MspDeInit 1 */

  /* USER CODE END SDIO_MspDeInit 1 */
  }
}
 8002000:	bf00      	nop
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40018000 	.word	0x40018000
 800200c:	40021000 	.word	0x40021000
 8002010:	40011000 	.word	0x40011000
 8002014:	40011400 	.word	0x40011400

08002018 <clearTable>:
char digH6;
uint8_t dig1[26];
uint8_t dig2[7];

void clearTable(uint8_t *tab)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < sizeof(tab); ++i)
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	e007      	b.n	8002036 <clearTable+0x1e>
	{
		tab[i] = 0;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	4413      	add	r3, r2
 800202c:	2200      	movs	r2, #0
 800202e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(tab); ++i)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	3301      	adds	r3, #1
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2b03      	cmp	r3, #3
 800203a:	d9f4      	bls.n	8002026 <clearTable+0xe>
	}
}
 800203c:	bf00      	nop
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr
	...

08002048 <BME280Read>:

void BME280Read(uint8_t address, uint8_t numberOfBytes, uint8_t* answer)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b088      	sub	sp, #32
 800204c:	af02      	add	r7, sp, #8
 800204e:	4603      	mov	r3, r0
 8002050:	603a      	str	r2, [r7, #0]
 8002052:	71fb      	strb	r3, [r7, #7]
 8002054:	460b      	mov	r3, r1
 8002056:	71bb      	strb	r3, [r7, #6]
	uint8_t *tx, *rx;
	tx = malloc((numberOfBytes + 1) * sizeof *tx);
 8002058:	79bb      	ldrb	r3, [r7, #6]
 800205a:	3301      	adds	r3, #1
 800205c:	4618      	mov	r0, r3
 800205e:	f00d fe3f 	bl	800fce0 <malloc>
 8002062:	4603      	mov	r3, r0
 8002064:	613b      	str	r3, [r7, #16]
	rx = malloc((numberOfBytes + 1) * sizeof *rx);
 8002066:	79bb      	ldrb	r3, [r7, #6]
 8002068:	3301      	adds	r3, #1
 800206a:	4618      	mov	r0, r3
 800206c:	f00d fe38 	bl	800fce0 <malloc>
 8002070:	4603      	mov	r3, r0
 8002072:	60fb      	str	r3, [r7, #12]
	tx[0] = address | (1<<7);			//dla odczytu pamięci, 7 bit adresu jest zawsze 1
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800207a:	b2da      	uxtb	r2, r3
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	701a      	strb	r2, [r3, #0]
	clearTable(answer);
 8002080:	6838      	ldr	r0, [r7, #0]
 8002082:	f7ff ffc9 	bl	8002018 <clearTable>
	HAL_GPIO_WritePin(BME280_CS_GPIO_Port, BME280_CS_Pin, RESET);
 8002086:	2200      	movs	r2, #0
 8002088:	2101      	movs	r1, #1
 800208a:	4818      	ldr	r0, [pc, #96]	; (80020ec <BME280Read+0xa4>)
 800208c:	f001 facf 	bl	800362e <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(SPI_BME280, tx, rx, numberOfBytes + 1, 5);
 8002090:	79bb      	ldrb	r3, [r7, #6]
 8002092:	b29b      	uxth	r3, r3
 8002094:	3301      	adds	r3, #1
 8002096:	b29a      	uxth	r2, r3
 8002098:	2305      	movs	r3, #5
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	4613      	mov	r3, r2
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	6939      	ldr	r1, [r7, #16]
 80020a2:	4813      	ldr	r0, [pc, #76]	; (80020f0 <BME280Read+0xa8>)
 80020a4:	f005 fcc7 	bl	8007a36 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BME280_CS_GPIO_Port, BME280_CS_Pin, SET);
 80020a8:	2201      	movs	r2, #1
 80020aa:	2101      	movs	r1, #1
 80020ac:	480f      	ldr	r0, [pc, #60]	; (80020ec <BME280Read+0xa4>)
 80020ae:	f001 fabe 	bl	800362e <HAL_GPIO_WritePin>
	for (int i = 0; i < numberOfBytes; ++i)
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	e00b      	b.n	80020d0 <BME280Read+0x88>
	{
		answer[i] = rx[i + 1];
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	3301      	adds	r3, #1
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	441a      	add	r2, r3
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	6839      	ldr	r1, [r7, #0]
 80020c4:	440b      	add	r3, r1
 80020c6:	7812      	ldrb	r2, [r2, #0]
 80020c8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < numberOfBytes; ++i)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	3301      	adds	r3, #1
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	79bb      	ldrb	r3, [r7, #6]
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	dbef      	blt.n	80020b8 <BME280Read+0x70>
	}
	free(rx);
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f00d fe09 	bl	800fcf0 <free>
	free(tx);
 80020de:	6938      	ldr	r0, [r7, #16]
 80020e0:	f00d fe06 	bl	800fcf0 <free>
}
 80020e4:	bf00      	nop
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40010c00 	.word	0x40010c00
 80020f0:	200006e4 	.word	0x200006e4

080020f4 <BME280Write>:

uint8_t BME280Write(uint8_t address, uint8_t data)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	460a      	mov	r2, r1
 80020fe:	71fb      	strb	r3, [r7, #7]
 8002100:	4613      	mov	r3, r2
 8002102:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	uint8_t verify = 0;
 8002104:	2300      	movs	r3, #0
 8002106:	72fb      	strb	r3, [r7, #11]
	uint8_t oldData = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	72bb      	strb	r3, [r7, #10]
	uint8_t mask = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	73fb      	strb	r3, [r7, #15]
	if ((address != BME280_ADDRESS_CONFIG) && (address != BME280_ADDRESS_CTRL_MEAS) && (address != BME280_ADDRESS_CTRL_HUM))
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	2bf5      	cmp	r3, #245	; 0xf5
 8002114:	d007      	beq.n	8002126 <BME280Write+0x32>
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	2bf4      	cmp	r3, #244	; 0xf4
 800211a:	d004      	beq.n	8002126 <BME280Write+0x32>
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	2bf2      	cmp	r3, #242	; 0xf2
 8002120:	d001      	beq.n	8002126 <BME280Write+0x32>
		return STATUS_WRONG_ARGUMENT;
 8002122:	2302      	movs	r3, #2
 8002124:	e047      	b.n	80021b6 <BME280Write+0xc2>
	switch (address)
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	2bf2      	cmp	r3, #242	; 0xf2
 800212a:	d004      	beq.n	8002136 <BME280Write+0x42>
 800212c:	2bf5      	cmp	r3, #245	; 0xf5
 800212e:	d105      	bne.n	800213c <BME280Write+0x48>
	{
		case BME280_ADDRESS_CONFIG:
			mask = 0b00000010;
 8002130:	2302      	movs	r3, #2
 8002132:	73fb      	strb	r3, [r7, #15]
			break;
 8002134:	e002      	b.n	800213c <BME280Write+0x48>
		case BME280_ADDRESS_CTRL_HUM:
			mask = 0b11111000;
 8002136:	23f8      	movs	r3, #248	; 0xf8
 8002138:	73fb      	strb	r3, [r7, #15]
			break;
 800213a:	bf00      	nop
	}
	BME280Read(address, 1, &oldData);
 800213c:	f107 020a 	add.w	r2, r7, #10
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	2101      	movs	r1, #1
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff ff7f 	bl	8002048 <BME280Read>
	data &= ~mask;										//wyzeruje bity argumentu data, które nie powinno się zmieniać (dokumentacja BME280 str. 27)
 800214a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800214e:	43db      	mvns	r3, r3
 8002150:	b25a      	sxtb	r2, r3
 8002152:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002156:	4013      	ands	r3, r2
 8002158:	b25b      	sxtb	r3, r3
 800215a:	71bb      	strb	r3, [r7, #6]
	data |= (oldData & mask);							//wyzeruje stare bity, które można zmieniać i w ich miejsce wstawi nowe
 800215c:	7aba      	ldrb	r2, [r7, #10]
 800215e:	7bfb      	ldrb	r3, [r7, #15]
 8002160:	4013      	ands	r3, r2
 8002162:	b2da      	uxtb	r2, r3
 8002164:	79bb      	ldrb	r3, [r7, #6]
 8002166:	4313      	orrs	r3, r2
 8002168:	71bb      	strb	r3, [r7, #6]
	tx[0] = address & 0b01111111;						//dla zapisu do pamięci 7 bit adresu jest zawsze 0
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002170:	b2db      	uxtb	r3, r3
 8002172:	733b      	strb	r3, [r7, #12]
	tx[1] = data;
 8002174:	79bb      	ldrb	r3, [r7, #6]
 8002176:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(BME280_CS_GPIO_Port, BME280_CS_Pin, RESET);
 8002178:	2200      	movs	r2, #0
 800217a:	2101      	movs	r1, #1
 800217c:	4810      	ldr	r0, [pc, #64]	; (80021c0 <BME280Write+0xcc>)
 800217e:	f001 fa56 	bl	800362e <HAL_GPIO_WritePin>
 	HAL_SPI_Transmit(SPI_BME280, tx, 2, 5);
 8002182:	f107 010c 	add.w	r1, r7, #12
 8002186:	2305      	movs	r3, #5
 8002188:	2202      	movs	r2, #2
 800218a:	480e      	ldr	r0, [pc, #56]	; (80021c4 <BME280Write+0xd0>)
 800218c:	f005 fb17 	bl	80077be <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(BME280_CS_GPIO_Port, BME280_CS_Pin, SET);
 8002190:	2201      	movs	r2, #1
 8002192:	2101      	movs	r1, #1
 8002194:	480a      	ldr	r0, [pc, #40]	; (80021c0 <BME280Write+0xcc>)
 8002196:	f001 fa4a 	bl	800362e <HAL_GPIO_WritePin>
 	BME280Read(address, 1, &verify);
 800219a:	f107 020b 	add.w	r2, r7, #11
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	2101      	movs	r1, #1
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff ff50 	bl	8002048 <BME280Read>
 	if (verify == data)
 80021a8:	7afb      	ldrb	r3, [r7, #11]
 80021aa:	79ba      	ldrb	r2, [r7, #6]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d101      	bne.n	80021b4 <BME280Write+0xc0>
 		return STATUS_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	e000      	b.n	80021b6 <BME280Write+0xc2>
 	else
 		return STATUS_ERROR;
 80021b4:	2301      	movs	r3, #1
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40010c00 	.word	0x40010c00
 80021c4:	200006e4 	.word	0x200006e4

080021c8 <BME280compensateT>:
int32_t BME280compensateT(int32_t adcT)
{  //dokumentacja BME280 str. 25)
 80021c8:	b480      	push	{r7}
 80021ca:	b087      	sub	sp, #28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adcT >> 3) - ((int32_t)digT1 << 1))) * ((int32_t)digT2)) >> 11;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	10da      	asrs	r2, r3, #3
 80021d4:	4b18      	ldr	r3, [pc, #96]	; (8002238 <BME280compensateT+0x70>)
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	4a17      	ldr	r2, [pc, #92]	; (800223c <BME280compensateT+0x74>)
 80021de:	f9b2 2000 	ldrsh.w	r2, [r2]
 80021e2:	fb02 f303 	mul.w	r3, r2, r3
 80021e6:	12db      	asrs	r3, r3, #11
 80021e8:	617b      	str	r3, [r7, #20]
	var2 = (((((adcT >> 4) - ((int32_t)digT1)) * ((adcT >> 4) - ((int32_t)digT1))) >> 12) * ((int32_t)digT3)) >> 14;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	111b      	asrs	r3, r3, #4
 80021ee:	4a12      	ldr	r2, [pc, #72]	; (8002238 <BME280compensateT+0x70>)
 80021f0:	8812      	ldrh	r2, [r2, #0]
 80021f2:	1a9b      	subs	r3, r3, r2
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	1112      	asrs	r2, r2, #4
 80021f8:	490f      	ldr	r1, [pc, #60]	; (8002238 <BME280compensateT+0x70>)
 80021fa:	8809      	ldrh	r1, [r1, #0]
 80021fc:	1a52      	subs	r2, r2, r1
 80021fe:	fb02 f303 	mul.w	r3, r2, r3
 8002202:	131b      	asrs	r3, r3, #12
 8002204:	4a0e      	ldr	r2, [pc, #56]	; (8002240 <BME280compensateT+0x78>)
 8002206:	f9b2 2000 	ldrsh.w	r2, [r2]
 800220a:	fb02 f303 	mul.w	r3, r2, r3
 800220e:	139b      	asrs	r3, r3, #14
 8002210:	613b      	str	r3, [r7, #16]
	tFine = var1 + var2;
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	4413      	add	r3, r2
 8002218:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <BME280compensateT+0x7c>)
 800221a:	6013      	str	r3, [r2, #0]
	T = (tFine * 5 + 128) >> 8;
 800221c:	4b09      	ldr	r3, [pc, #36]	; (8002244 <BME280compensateT+0x7c>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	3380      	adds	r3, #128	; 0x80
 8002228:	121b      	asrs	r3, r3, #8
 800222a:	60fb      	str	r3, [r7, #12]
	return T;
 800222c:	68fb      	ldr	r3, [r7, #12]
}
 800222e:	4618      	mov	r0, r3
 8002230:	371c      	adds	r7, #28
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr
 8002238:	200006ce 	.word	0x200006ce
 800223c:	200006be 	.word	0x200006be
 8002240:	200006b4 	.word	0x200006b4
 8002244:	20000690 	.word	0x20000690

08002248 <BME280compensateP>:

uint32_t BME280compensateP(int32_t adcP)
{
 8002248:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 800224c:	b088      	sub	sp, #32
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
	int64_t var1, var2, p;
	var1 = ((int64_t)tFine) - 128000;
 8002252:	4b65      	ldr	r3, [pc, #404]	; (80023e8 <BME280compensateP+0x1a0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4619      	mov	r1, r3
 8002258:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800225c:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8002260:	f142 34ff 	adc.w	r4, r2, #4294967295	; 0xffffffff
 8002264:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var1 * var1 * (int64_t)digP6;
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	fb02 f203 	mul.w	r2, r2, r3
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	69b9      	ldr	r1, [r7, #24]
 8002274:	fb01 f303 	mul.w	r3, r1, r3
 8002278:	441a      	add	r2, r3
 800227a:	69b9      	ldr	r1, [r7, #24]
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	fba1 3403 	umull	r3, r4, r1, r3
 8002282:	4422      	add	r2, r4
 8002284:	4614      	mov	r4, r2
 8002286:	4a59      	ldr	r2, [pc, #356]	; (80023ec <BME280compensateP+0x1a4>)
 8002288:	f9b2 2000 	ldrsh.w	r2, [r2]
 800228c:	b211      	sxth	r1, r2
 800228e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002292:	fb01 f504 	mul.w	r5, r1, r4
 8002296:	fb03 f002 	mul.w	r0, r3, r2
 800229a:	4428      	add	r0, r5
 800229c:	fba3 3401 	umull	r3, r4, r3, r1
 80022a0:	1902      	adds	r2, r0, r4
 80022a2:	4614      	mov	r4, r2
 80022a4:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80022a8:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var2 = var2 + ((var1 * (int64_t)digP5) << 17);
 80022ac:	4b50      	ldr	r3, [pc, #320]	; (80023f0 <BME280compensateP+0x1a8>)
 80022ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022b2:	b21b      	sxth	r3, r3
 80022b4:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	fb04 f102 	mul.w	r1, r4, r2
 80022be:	69fa      	ldr	r2, [r7, #28]
 80022c0:	fb03 f202 	mul.w	r2, r3, r2
 80022c4:	1888      	adds	r0, r1, r2
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	fba2 1203 	umull	r1, r2, r2, r3
 80022cc:	1883      	adds	r3, r0, r2
 80022ce:	461a      	mov	r2, r3
 80022d0:	f04f 0500 	mov.w	r5, #0
 80022d4:	f04f 0600 	mov.w	r6, #0
 80022d8:	0456      	lsls	r6, r2, #17
 80022da:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 80022de:	044d      	lsls	r5, r1, #17
 80022e0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80022e4:	186b      	adds	r3, r5, r1
 80022e6:	eb46 0402 	adc.w	r4, r6, r2
 80022ea:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var2 = var2 +(((int64_t)digP4) << 35);
 80022ee:	4b41      	ldr	r3, [pc, #260]	; (80023f4 <BME280compensateP+0x1ac>)
 80022f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022f4:	b219      	sxth	r1, r3
 80022f6:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80022fa:	f04f 0500 	mov.w	r5, #0
 80022fe:	f04f 0600 	mov.w	r6, #0
 8002302:	00ce      	lsls	r6, r1, #3
 8002304:	2500      	movs	r5, #0
 8002306:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800230a:	186b      	adds	r3, r5, r1
 800230c:	eb46 0402 	adc.w	r4, r6, r2
 8002310:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((var1 * var1 * (int64_t)digP3) >> 8) + ((var1 * (int64_t)digP2) << 12);
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	fb02 f203 	mul.w	r2, r2, r3
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	69b9      	ldr	r1, [r7, #24]
 8002320:	fb01 f303 	mul.w	r3, r1, r3
 8002324:	441a      	add	r2, r3
 8002326:	69b9      	ldr	r1, [r7, #24]
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	fba1 3403 	umull	r3, r4, r1, r3
 800232e:	4422      	add	r2, r4
 8002330:	4614      	mov	r4, r2
 8002332:	4a31      	ldr	r2, [pc, #196]	; (80023f8 <BME280compensateP+0x1b0>)
 8002334:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002338:	b211      	sxth	r1, r2
 800233a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800233e:	fb01 f504 	mul.w	r5, r1, r4
 8002342:	fb03 f002 	mul.w	r0, r3, r2
 8002346:	4428      	add	r0, r5
 8002348:	fba3 3401 	umull	r3, r4, r3, r1
 800234c:	1902      	adds	r2, r0, r4
 800234e:	4614      	mov	r4, r2
 8002350:	f04f 0100 	mov.w	r1, #0
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	0a19      	lsrs	r1, r3, #8
 800235a:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 800235e:	1222      	asrs	r2, r4, #8
 8002360:	4b26      	ldr	r3, [pc, #152]	; (80023fc <BME280compensateP+0x1b4>)
 8002362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002366:	b21b      	sxth	r3, r3
 8002368:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800236c:	69b8      	ldr	r0, [r7, #24]
 800236e:	fb04 f500 	mul.w	r5, r4, r0
 8002372:	69f8      	ldr	r0, [r7, #28]
 8002374:	fb03 f000 	mul.w	r0, r3, r0
 8002378:	4428      	add	r0, r5
 800237a:	69bd      	ldr	r5, [r7, #24]
 800237c:	fba5 5603 	umull	r5, r6, r5, r3
 8002380:	1983      	adds	r3, r0, r6
 8002382:	461e      	mov	r6, r3
 8002384:	f04f 0b00 	mov.w	fp, #0
 8002388:	f04f 0c00 	mov.w	ip, #0
 800238c:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 8002390:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 8002394:	ea4f 3b05 	mov.w	fp, r5, lsl #12
 8002398:	eb1b 0301 	adds.w	r3, fp, r1
 800239c:	eb4c 0402 	adc.w	r4, ip, r2
 80023a0:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)digP1) >> 33;
 80023a4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80023a8:	1c19      	adds	r1, r3, #0
 80023aa:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 80023ae:	4b14      	ldr	r3, [pc, #80]	; (8002400 <BME280compensateP+0x1b8>)
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	f04f 0400 	mov.w	r4, #0
 80023b8:	fb03 f502 	mul.w	r5, r3, r2
 80023bc:	fb01 f004 	mul.w	r0, r1, r4
 80023c0:	4428      	add	r0, r5
 80023c2:	fba1 3403 	umull	r3, r4, r1, r3
 80023c6:	1902      	adds	r2, r0, r4
 80023c8:	4614      	mov	r4, r2
 80023ca:	f04f 0100 	mov.w	r1, #0
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	1061      	asrs	r1, r4, #1
 80023d4:	17e2      	asrs	r2, r4, #31
 80023d6:	e9c7 1206 	strd	r1, r2, [r7, #24]
	if (var1 == 0)
 80023da:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80023de:	4323      	orrs	r3, r4
 80023e0:	d110      	bne.n	8002404 <BME280compensateP+0x1bc>
	{
		return 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	e0e3      	b.n	80025ae <BME280compensateP+0x366>
 80023e6:	bf00      	nop
 80023e8:	20000690 	.word	0x20000690
 80023ec:	200006d0 	.word	0x200006d0
 80023f0:	200006d2 	.word	0x200006d2
 80023f4:	20000696 	.word	0x20000696
 80023f8:	200006ca 	.word	0x200006ca
 80023fc:	200006ba 	.word	0x200006ba
 8002400:	200006b2 	.word	0x200006b2
	}
	p = 1048576 - adcP;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800240a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800240e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	p = (((p << 31) - var2) * 3125) / var1;
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	ea4f 0963 	mov.w	r9, r3, asr #1
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 800241e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002422:	4645      	mov	r5, r8
 8002424:	464e      	mov	r6, r9
 8002426:	1aed      	subs	r5, r5, r3
 8002428:	eb66 0604 	sbc.w	r6, r6, r4
 800242c:	46a8      	mov	r8, r5
 800242e:	46b1      	mov	r9, r6
 8002430:	eb18 0308 	adds.w	r3, r8, r8
 8002434:	eb49 0409 	adc.w	r4, r9, r9
 8002438:	4698      	mov	r8, r3
 800243a:	46a1      	mov	r9, r4
 800243c:	eb18 0805 	adds.w	r8, r8, r5
 8002440:	eb49 0906 	adc.w	r9, r9, r6
 8002444:	f04f 0100 	mov.w	r1, #0
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	ea4f 1289 	mov.w	r2, r9, lsl #6
 8002450:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8002454:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8002458:	eb18 0801 	adds.w	r8, r8, r1
 800245c:	eb49 0902 	adc.w	r9, r9, r2
 8002460:	f04f 0100 	mov.w	r1, #0
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	ea4f 0289 	mov.w	r2, r9, lsl #2
 800246c:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8002470:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8002474:	4688      	mov	r8, r1
 8002476:	4691      	mov	r9, r2
 8002478:	eb18 0805 	adds.w	r8, r8, r5
 800247c:	eb49 0906 	adc.w	r9, r9, r6
 8002480:	f04f 0100 	mov.w	r1, #0
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	ea4f 0289 	mov.w	r2, r9, lsl #2
 800248c:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8002490:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8002494:	4688      	mov	r8, r1
 8002496:	4691      	mov	r9, r2
 8002498:	eb18 0005 	adds.w	r0, r8, r5
 800249c:	eb49 0106 	adc.w	r1, r9, r6
 80024a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024a4:	f7fe fafe 	bl	8000aa4 <__aeabi_ldivmod>
 80024a8:	4603      	mov	r3, r0
 80024aa:	460c      	mov	r4, r1
 80024ac:	e9c7 3402 	strd	r3, r4, [r7, #8]
	var1 = (((int64_t)digP9) * (p >> 13) * (p >> 13)) >> 25;
 80024b0:	4b41      	ldr	r3, [pc, #260]	; (80025b8 <BME280compensateP+0x370>)
 80024b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024b6:	b219      	sxth	r1, r3
 80024b8:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80024bc:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 80024c0:	f04f 0300 	mov.w	r3, #0
 80024c4:	f04f 0400 	mov.w	r4, #0
 80024c8:	0b6b      	lsrs	r3, r5, #13
 80024ca:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 80024ce:	1374      	asrs	r4, r6, #13
 80024d0:	fb03 f502 	mul.w	r5, r3, r2
 80024d4:	fb01 f004 	mul.w	r0, r1, r4
 80024d8:	4428      	add	r0, r5
 80024da:	fba1 1203 	umull	r1, r2, r1, r3
 80024de:	1883      	adds	r3, r0, r2
 80024e0:	461a      	mov	r2, r3
 80024e2:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 80024e6:	f04f 0300 	mov.w	r3, #0
 80024ea:	f04f 0400 	mov.w	r4, #0
 80024ee:	0b6b      	lsrs	r3, r5, #13
 80024f0:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 80024f4:	1374      	asrs	r4, r6, #13
 80024f6:	fb03 f502 	mul.w	r5, r3, r2
 80024fa:	fb01 f004 	mul.w	r0, r1, r4
 80024fe:	4428      	add	r0, r5
 8002500:	fba1 1203 	umull	r1, r2, r1, r3
 8002504:	1883      	adds	r3, r0, r2
 8002506:	461a      	mov	r2, r3
 8002508:	f04f 0300 	mov.w	r3, #0
 800250c:	f04f 0400 	mov.w	r4, #0
 8002510:	0e4b      	lsrs	r3, r1, #25
 8002512:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8002516:	1654      	asrs	r4, r2, #25
 8002518:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = (((int64_t)digP8) * p) >> 19;
 800251c:	4b27      	ldr	r3, [pc, #156]	; (80025bc <BME280compensateP+0x374>)
 800251e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002522:	b21b      	sxth	r3, r3
 8002524:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	fb04 f102 	mul.w	r1, r4, r2
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	fb03 f202 	mul.w	r2, r3, r2
 8002534:	1888      	adds	r0, r1, r2
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	fba2 1203 	umull	r1, r2, r2, r3
 800253c:	1883      	adds	r3, r0, r2
 800253e:	461a      	mov	r2, r3
 8002540:	f04f 0300 	mov.w	r3, #0
 8002544:	f04f 0400 	mov.w	r4, #0
 8002548:	0ccb      	lsrs	r3, r1, #19
 800254a:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800254e:	14d4      	asrs	r4, r2, #19
 8002550:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = ((p + var1 + var2) >> 8) + (((int64_t)digP7) << 4);
 8002554:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002558:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800255c:	eb11 0803 	adds.w	r8, r1, r3
 8002560:	eb42 0904 	adc.w	r9, r2, r4
 8002564:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002568:	eb13 0508 	adds.w	r5, r3, r8
 800256c:	eb44 0609 	adc.w	r6, r4, r9
 8002570:	f04f 0100 	mov.w	r1, #0
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	0a29      	lsrs	r1, r5, #8
 800257a:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 800257e:	1232      	asrs	r2, r6, #8
 8002580:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <BME280compensateP+0x378>)
 8002582:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002586:	b21d      	sxth	r5, r3
 8002588:	ea4f 76e5 	mov.w	r6, r5, asr #31
 800258c:	f04f 0800 	mov.w	r8, #0
 8002590:	f04f 0900 	mov.w	r9, #0
 8002594:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8002598:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 800259c:	ea4f 1805 	mov.w	r8, r5, lsl #4
 80025a0:	eb18 0301 	adds.w	r3, r8, r1
 80025a4:	eb49 0402 	adc.w	r4, r9, r2
 80025a8:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return (uint32_t)p;
 80025ac:	68bb      	ldr	r3, [r7, #8]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3720      	adds	r7, #32
 80025b2:	46bd      	mov	sp, r7
 80025b4:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 80025b8:	200006c6 	.word	0x200006c6
 80025bc:	200006e0 	.word	0x200006e0
 80025c0:	200006b8 	.word	0x200006b8

080025c4 <BME280compensateH>:

uint32_t BME280compensateH(int32_t adcH)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
	int32_t v;
	v = (tFine - ((int32_t)76800));
 80025cc:	4b2b      	ldr	r3, [pc, #172]	; (800267c <BME280compensateH+0xb8>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80025d4:	60fb      	str	r3, [r7, #12]
	v = (((((adcH <<14) - (((int32_t)digH4) << 20) - (((int32_t)digH5) * v)) + ((int32_t)16384)) >> 15) *
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	039a      	lsls	r2, r3, #14
 80025da:	4b29      	ldr	r3, [pc, #164]	; (8002680 <BME280compensateH+0xbc>)
 80025dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025e0:	051b      	lsls	r3, r3, #20
 80025e2:	1ad2      	subs	r2, r2, r3
 80025e4:	4b27      	ldr	r3, [pc, #156]	; (8002684 <BME280compensateH+0xc0>)
 80025e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ea:	4619      	mov	r1, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	fb03 f301 	mul.w	r3, r3, r1
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80025f8:	13db      	asrs	r3, r3, #15
			(((((((v * ((int32_t)digH6)) >> 10) * (((v * ((int32_t)digH3)) >> 11) + ((int32_t)32768))) >> 10) +
 80025fa:	4a23      	ldr	r2, [pc, #140]	; (8002688 <BME280compensateH+0xc4>)
 80025fc:	7812      	ldrb	r2, [r2, #0]
 80025fe:	4611      	mov	r1, r2
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	fb02 f201 	mul.w	r2, r2, r1
 8002606:	1292      	asrs	r2, r2, #10
 8002608:	4920      	ldr	r1, [pc, #128]	; (800268c <BME280compensateH+0xc8>)
 800260a:	7809      	ldrb	r1, [r1, #0]
 800260c:	4608      	mov	r0, r1
 800260e:	68f9      	ldr	r1, [r7, #12]
 8002610:	fb01 f100 	mul.w	r1, r1, r0
 8002614:	12c9      	asrs	r1, r1, #11
 8002616:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 800261a:	fb01 f202 	mul.w	r2, r1, r2
 800261e:	1292      	asrs	r2, r2, #10
 8002620:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					((int32_t)2097152)) * ((int32_t)digH2) + 8192) >> 14));
 8002624:	491a      	ldr	r1, [pc, #104]	; (8002690 <BME280compensateH+0xcc>)
 8002626:	f9b1 1000 	ldrsh.w	r1, [r1]
 800262a:	fb01 f202 	mul.w	r2, r1, r2
 800262e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8002632:	1392      	asrs	r2, r2, #14
	v = (((((adcH <<14) - (((int32_t)digH4) << 20) - (((int32_t)digH5) * v)) + ((int32_t)16384)) >> 15) *
 8002634:	fb02 f303 	mul.w	r3, r2, r3
 8002638:	60fb      	str	r3, [r7, #12]
	v = (v - (((((v >> 15) * (v >> 15)) >> 7) * ((int32_t)digH1)) >> 4));
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	13db      	asrs	r3, r3, #15
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	13d2      	asrs	r2, r2, #15
 8002642:	fb02 f303 	mul.w	r3, r2, r3
 8002646:	11db      	asrs	r3, r3, #7
 8002648:	4a12      	ldr	r2, [pc, #72]	; (8002694 <BME280compensateH+0xd0>)
 800264a:	7812      	ldrb	r2, [r2, #0]
 800264c:	fb02 f303 	mul.w	r3, r2, r3
 8002650:	111b      	asrs	r3, r3, #4
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	60fb      	str	r3, [r7, #12]
	v = (v < 0 ? 0 : v);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800265e:	60fb      	str	r3, [r7, #12]
	v = (v > 419430400 ? 419430400 : v);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8002666:	bfa8      	it	ge
 8002668:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 800266c:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v >> 12);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	131b      	asrs	r3, r3, #12
}
 8002672:	4618      	mov	r0, r3
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr
 800267c:	20000690 	.word	0x20000690
 8002680:	200006c2 	.word	0x200006c2
 8002684:	200006d4 	.word	0x200006d4
 8002688:	200006b6 	.word	0x200006b6
 800268c:	200006cc 	.word	0x200006cc
 8002690:	200006c8 	.word	0x200006c8
 8002694:	200006bc 	.word	0x200006bc

08002698 <BME280measurement>:

void BME280measurement(float* outTemperature, float* outPressure, float* outHumidity)
{
 8002698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800269a:	b0ab      	sub	sp, #172	; 0xac
 800269c:	af10      	add	r7, sp, #64	; 0x40
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
	/* Obsługa BME280 */
	  uint8_t temp[3] = {0, 0, 0};
 80026a4:	2300      	movs	r3, #0
 80026a6:	f887 3020 	strb.w	r3, [r7, #32]
 80026aa:	2300      	movs	r3, #0
 80026ac:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80026b0:	2300      	movs	r3, #0
 80026b2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  uint8_t press[3] = {0, 0, 0};
 80026b6:	2300      	movs	r3, #0
 80026b8:	773b      	strb	r3, [r7, #28]
 80026ba:	2300      	movs	r3, #0
 80026bc:	777b      	strb	r3, [r7, #29]
 80026be:	2300      	movs	r3, #0
 80026c0:	77bb      	strb	r3, [r7, #30]
	  uint8_t hum[2] = {0, 0};
 80026c2:	2300      	movs	r3, #0
 80026c4:	763b      	strb	r3, [r7, #24]
 80026c6:	2300      	movs	r3, #0
 80026c8:	767b      	strb	r3, [r7, #25]
	  uint8_t allADC[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 80026ca:	f107 0310 	add.w	r3, r7, #16
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	605a      	str	r2, [r3, #4]
	  uint8_t t_sb, filter, spi3w_en, config, osrs_p, osrs_t, mode, ctrl_meas, ctrl_hum;

	  t_sb = BME280_T_SB_20MS;
 80026d4:	2307      	movs	r3, #7
 80026d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	  filter = BME280_FILTER_OFF;
 80026da:	2300      	movs	r3, #0
 80026dc:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	  spi3w_en = BME280_SPI3W_EN_OFF;
 80026e0:	2300      	movs	r3, #0
 80026e2:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	  config = 0 | (t_sb << 5) | (filter << 2) | spi3w_en;
 80026e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80026ea:	015b      	lsls	r3, r3, #5
 80026ec:	b25a      	sxtb	r2, r3
 80026ee:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	b25b      	sxtb	r3, r3
 80026f6:	4313      	orrs	r3, r2
 80026f8:	b25a      	sxtb	r2, r3
 80026fa:	f997 3065 	ldrsb.w	r3, [r7, #101]	; 0x65
 80026fe:	4313      	orrs	r3, r2
 8002700:	b25b      	sxtb	r3, r3
 8002702:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

	  osrs_t = BME280_OSRS_X1;
 8002706:	2301      	movs	r3, #1
 8002708:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	  osrs_p = BME280_OSRS_X1;
 800270c:	2301      	movs	r3, #1
 800270e:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	  mode = BME280_MODE_FORCED;
 8002712:	2301      	movs	r3, #1
 8002714:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	  ctrl_meas = (osrs_t << 5) | (osrs_p << 2) | mode;
 8002718:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800271c:	015b      	lsls	r3, r3, #5
 800271e:	b25a      	sxtb	r2, r3
 8002720:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	b25b      	sxtb	r3, r3
 8002728:	4313      	orrs	r3, r2
 800272a:	b25a      	sxtb	r2, r3
 800272c:	f997 3061 	ldrsb.w	r3, [r7, #97]	; 0x61
 8002730:	4313      	orrs	r3, r2
 8002732:	b25b      	sxtb	r3, r3
 8002734:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60

	  ctrl_hum = BME280_OSRS_X1;
 8002738:	2301      	movs	r3, #1
 800273a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	  BME280Read(BME280_ADDRESS_ID, 1, &BME280id);
 800273e:	4aa2      	ldr	r2, [pc, #648]	; (80029c8 <BME280measurement+0x330>)
 8002740:	2101      	movs	r1, #1
 8002742:	20d0      	movs	r0, #208	; 0xd0
 8002744:	f7ff fc80 	bl	8002048 <BME280Read>
	  status = BME280Write(BME280_ADDRESS_CONFIG, config);
 8002748:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800274c:	4619      	mov	r1, r3
 800274e:	20f5      	movs	r0, #245	; 0xf5
 8002750:	f7ff fcd0 	bl	80020f4 <BME280Write>
 8002754:	4603      	mov	r3, r0
 8002756:	461a      	mov	r2, r3
 8002758:	4b9c      	ldr	r3, [pc, #624]	; (80029cc <BME280measurement+0x334>)
 800275a:	701a      	strb	r2, [r3, #0]
	  status = BME280Write(BME280_ADDRESS_CTRL_MEAS, ctrl_meas);
 800275c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8002760:	4619      	mov	r1, r3
 8002762:	20f4      	movs	r0, #244	; 0xf4
 8002764:	f7ff fcc6 	bl	80020f4 <BME280Write>
 8002768:	4603      	mov	r3, r0
 800276a:	461a      	mov	r2, r3
 800276c:	4b97      	ldr	r3, [pc, #604]	; (80029cc <BME280measurement+0x334>)
 800276e:	701a      	strb	r2, [r3, #0]
	  status = BME280Write(BME280_ADDRESS_CTRL_HUM, ctrl_hum);
 8002770:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002774:	4619      	mov	r1, r3
 8002776:	20f2      	movs	r0, #242	; 0xf2
 8002778:	f7ff fcbc 	bl	80020f4 <BME280Write>
 800277c:	4603      	mov	r3, r0
 800277e:	461a      	mov	r2, r3
 8002780:	4b92      	ldr	r3, [pc, #584]	; (80029cc <BME280measurement+0x334>)
 8002782:	701a      	strb	r2, [r3, #0]
	  status = BME280Write(BME280_ADDRESS_CTRL_MEAS, ctrl_meas);
 8002784:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8002788:	4619      	mov	r1, r3
 800278a:	20f4      	movs	r0, #244	; 0xf4
 800278c:	f7ff fcb2 	bl	80020f4 <BME280Write>
 8002790:	4603      	mov	r3, r0
 8002792:	461a      	mov	r2, r3
 8002794:	4b8d      	ldr	r3, [pc, #564]	; (80029cc <BME280measurement+0x334>)
 8002796:	701a      	strb	r2, [r3, #0]

	  //mode = BME280_MODE_FORCED;
	  //ctrl_meas = (osrs_t << 5) | (osrs_p << 2) | mode;
	  //status = BME280Write(BME280_ADDRESS_CTRL_MEAS, ctrl_meas);

	  HAL_Delay(12);
 8002798:	200c      	movs	r0, #12
 800279a:	f000 fbcb 	bl	8002f34 <HAL_Delay>
	  BME280Read(BME280_ADDRESS_CONFIG, 1, &conf1);
 800279e:	4a8c      	ldr	r2, [pc, #560]	; (80029d0 <BME280measurement+0x338>)
 80027a0:	2101      	movs	r1, #1
 80027a2:	20f5      	movs	r0, #245	; 0xf5
 80027a4:	f7ff fc50 	bl	8002048 <BME280Read>
	  BME280Read(BME280_ADDRESS_CTRL_MEAS, 1, &meas1);
 80027a8:	4a8a      	ldr	r2, [pc, #552]	; (80029d4 <BME280measurement+0x33c>)
 80027aa:	2101      	movs	r1, #1
 80027ac:	20f4      	movs	r0, #244	; 0xf4
 80027ae:	f7ff fc4b 	bl	8002048 <BME280Read>
	  BME280Read(BME280_ADDRESS_CTRL_HUM, 1, &ctrl_hum1);
 80027b2:	4a89      	ldr	r2, [pc, #548]	; (80029d8 <BME280measurement+0x340>)
 80027b4:	2101      	movs	r1, #1
 80027b6:	20f2      	movs	r0, #242	; 0xf2
 80027b8:	f7ff fc46 	bl	8002048 <BME280Read>
	  BME280Read(BME280_ADDRESS_FIRST_BYTE_OF_ADC_VALUE, 8, allADC);
 80027bc:	f107 0310 	add.w	r3, r7, #16
 80027c0:	461a      	mov	r2, r3
 80027c2:	2108      	movs	r1, #8
 80027c4:	20f7      	movs	r0, #247	; 0xf7
 80027c6:	f7ff fc3f 	bl	8002048 <BME280Read>
	  BME280Read(0x88, 26, dig1);
 80027ca:	4a84      	ldr	r2, [pc, #528]	; (80029dc <BME280measurement+0x344>)
 80027cc:	211a      	movs	r1, #26
 80027ce:	2088      	movs	r0, #136	; 0x88
 80027d0:	f7ff fc3a 	bl	8002048 <BME280Read>
	  BME280Read(0xE1, 7, dig2);
 80027d4:	4a82      	ldr	r2, [pc, #520]	; (80029e0 <BME280measurement+0x348>)
 80027d6:	2107      	movs	r1, #7
 80027d8:	20e1      	movs	r0, #225	; 0xe1
 80027da:	f7ff fc35 	bl	8002048 <BME280Read>
	  digT1 = (unsigned short)((dig1[1] << 8) | dig1[0]);
 80027de:	4b7f      	ldr	r3, [pc, #508]	; (80029dc <BME280measurement+0x344>)
 80027e0:	785b      	ldrb	r3, [r3, #1]
 80027e2:	021b      	lsls	r3, r3, #8
 80027e4:	b21a      	sxth	r2, r3
 80027e6:	4b7d      	ldr	r3, [pc, #500]	; (80029dc <BME280measurement+0x344>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	b21b      	sxth	r3, r3
 80027ec:	4313      	orrs	r3, r2
 80027ee:	b21b      	sxth	r3, r3
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	4b7c      	ldr	r3, [pc, #496]	; (80029e4 <BME280measurement+0x34c>)
 80027f4:	801a      	strh	r2, [r3, #0]
	  digT2 = (short)((dig1[3] << 8) | dig1[2]);
 80027f6:	4b79      	ldr	r3, [pc, #484]	; (80029dc <BME280measurement+0x344>)
 80027f8:	78db      	ldrb	r3, [r3, #3]
 80027fa:	021b      	lsls	r3, r3, #8
 80027fc:	b21a      	sxth	r2, r3
 80027fe:	4b77      	ldr	r3, [pc, #476]	; (80029dc <BME280measurement+0x344>)
 8002800:	789b      	ldrb	r3, [r3, #2]
 8002802:	b21b      	sxth	r3, r3
 8002804:	4313      	orrs	r3, r2
 8002806:	b21a      	sxth	r2, r3
 8002808:	4b77      	ldr	r3, [pc, #476]	; (80029e8 <BME280measurement+0x350>)
 800280a:	801a      	strh	r2, [r3, #0]
	  digT3 = (short)((dig1[5] << 8) | dig1[4]);
 800280c:	4b73      	ldr	r3, [pc, #460]	; (80029dc <BME280measurement+0x344>)
 800280e:	795b      	ldrb	r3, [r3, #5]
 8002810:	021b      	lsls	r3, r3, #8
 8002812:	b21a      	sxth	r2, r3
 8002814:	4b71      	ldr	r3, [pc, #452]	; (80029dc <BME280measurement+0x344>)
 8002816:	791b      	ldrb	r3, [r3, #4]
 8002818:	b21b      	sxth	r3, r3
 800281a:	4313      	orrs	r3, r2
 800281c:	b21a      	sxth	r2, r3
 800281e:	4b73      	ldr	r3, [pc, #460]	; (80029ec <BME280measurement+0x354>)
 8002820:	801a      	strh	r2, [r3, #0]
	  digP1 = (unsigned short)((dig1[7] << 8) | dig1[6]);
 8002822:	4b6e      	ldr	r3, [pc, #440]	; (80029dc <BME280measurement+0x344>)
 8002824:	79db      	ldrb	r3, [r3, #7]
 8002826:	021b      	lsls	r3, r3, #8
 8002828:	b21a      	sxth	r2, r3
 800282a:	4b6c      	ldr	r3, [pc, #432]	; (80029dc <BME280measurement+0x344>)
 800282c:	799b      	ldrb	r3, [r3, #6]
 800282e:	b21b      	sxth	r3, r3
 8002830:	4313      	orrs	r3, r2
 8002832:	b21b      	sxth	r3, r3
 8002834:	b29a      	uxth	r2, r3
 8002836:	4b6e      	ldr	r3, [pc, #440]	; (80029f0 <BME280measurement+0x358>)
 8002838:	801a      	strh	r2, [r3, #0]
	  digP2 = (short)((dig1[9] << 8) | dig1[8]);
 800283a:	4b68      	ldr	r3, [pc, #416]	; (80029dc <BME280measurement+0x344>)
 800283c:	7a5b      	ldrb	r3, [r3, #9]
 800283e:	021b      	lsls	r3, r3, #8
 8002840:	b21a      	sxth	r2, r3
 8002842:	4b66      	ldr	r3, [pc, #408]	; (80029dc <BME280measurement+0x344>)
 8002844:	7a1b      	ldrb	r3, [r3, #8]
 8002846:	b21b      	sxth	r3, r3
 8002848:	4313      	orrs	r3, r2
 800284a:	b21a      	sxth	r2, r3
 800284c:	4b69      	ldr	r3, [pc, #420]	; (80029f4 <BME280measurement+0x35c>)
 800284e:	801a      	strh	r2, [r3, #0]
	  digP3 = (short)((dig1[11] << 8) | dig1[10]);
 8002850:	4b62      	ldr	r3, [pc, #392]	; (80029dc <BME280measurement+0x344>)
 8002852:	7adb      	ldrb	r3, [r3, #11]
 8002854:	021b      	lsls	r3, r3, #8
 8002856:	b21a      	sxth	r2, r3
 8002858:	4b60      	ldr	r3, [pc, #384]	; (80029dc <BME280measurement+0x344>)
 800285a:	7a9b      	ldrb	r3, [r3, #10]
 800285c:	b21b      	sxth	r3, r3
 800285e:	4313      	orrs	r3, r2
 8002860:	b21a      	sxth	r2, r3
 8002862:	4b65      	ldr	r3, [pc, #404]	; (80029f8 <BME280measurement+0x360>)
 8002864:	801a      	strh	r2, [r3, #0]
	  digP4 = (short)((dig1[13] << 8) | dig1[12]);
 8002866:	4b5d      	ldr	r3, [pc, #372]	; (80029dc <BME280measurement+0x344>)
 8002868:	7b5b      	ldrb	r3, [r3, #13]
 800286a:	021b      	lsls	r3, r3, #8
 800286c:	b21a      	sxth	r2, r3
 800286e:	4b5b      	ldr	r3, [pc, #364]	; (80029dc <BME280measurement+0x344>)
 8002870:	7b1b      	ldrb	r3, [r3, #12]
 8002872:	b21b      	sxth	r3, r3
 8002874:	4313      	orrs	r3, r2
 8002876:	b21a      	sxth	r2, r3
 8002878:	4b60      	ldr	r3, [pc, #384]	; (80029fc <BME280measurement+0x364>)
 800287a:	801a      	strh	r2, [r3, #0]
	  digP5 = (short)((dig1[15] << 8) | dig1[14]);
 800287c:	4b57      	ldr	r3, [pc, #348]	; (80029dc <BME280measurement+0x344>)
 800287e:	7bdb      	ldrb	r3, [r3, #15]
 8002880:	021b      	lsls	r3, r3, #8
 8002882:	b21a      	sxth	r2, r3
 8002884:	4b55      	ldr	r3, [pc, #340]	; (80029dc <BME280measurement+0x344>)
 8002886:	7b9b      	ldrb	r3, [r3, #14]
 8002888:	b21b      	sxth	r3, r3
 800288a:	4313      	orrs	r3, r2
 800288c:	b21a      	sxth	r2, r3
 800288e:	4b5c      	ldr	r3, [pc, #368]	; (8002a00 <BME280measurement+0x368>)
 8002890:	801a      	strh	r2, [r3, #0]
	  digP6 = (short)((dig1[17] << 8) | dig1[16]);
 8002892:	4b52      	ldr	r3, [pc, #328]	; (80029dc <BME280measurement+0x344>)
 8002894:	7c5b      	ldrb	r3, [r3, #17]
 8002896:	021b      	lsls	r3, r3, #8
 8002898:	b21a      	sxth	r2, r3
 800289a:	4b50      	ldr	r3, [pc, #320]	; (80029dc <BME280measurement+0x344>)
 800289c:	7c1b      	ldrb	r3, [r3, #16]
 800289e:	b21b      	sxth	r3, r3
 80028a0:	4313      	orrs	r3, r2
 80028a2:	b21a      	sxth	r2, r3
 80028a4:	4b57      	ldr	r3, [pc, #348]	; (8002a04 <BME280measurement+0x36c>)
 80028a6:	801a      	strh	r2, [r3, #0]
	  digP7 = (short)((dig1[19] << 8) | dig1[18]);
 80028a8:	4b4c      	ldr	r3, [pc, #304]	; (80029dc <BME280measurement+0x344>)
 80028aa:	7cdb      	ldrb	r3, [r3, #19]
 80028ac:	021b      	lsls	r3, r3, #8
 80028ae:	b21a      	sxth	r2, r3
 80028b0:	4b4a      	ldr	r3, [pc, #296]	; (80029dc <BME280measurement+0x344>)
 80028b2:	7c9b      	ldrb	r3, [r3, #18]
 80028b4:	b21b      	sxth	r3, r3
 80028b6:	4313      	orrs	r3, r2
 80028b8:	b21a      	sxth	r2, r3
 80028ba:	4b53      	ldr	r3, [pc, #332]	; (8002a08 <BME280measurement+0x370>)
 80028bc:	801a      	strh	r2, [r3, #0]
	  digP8 = (short)((dig1[21] << 8) | dig1[20]);
 80028be:	4b47      	ldr	r3, [pc, #284]	; (80029dc <BME280measurement+0x344>)
 80028c0:	7d5b      	ldrb	r3, [r3, #21]
 80028c2:	021b      	lsls	r3, r3, #8
 80028c4:	b21a      	sxth	r2, r3
 80028c6:	4b45      	ldr	r3, [pc, #276]	; (80029dc <BME280measurement+0x344>)
 80028c8:	7d1b      	ldrb	r3, [r3, #20]
 80028ca:	b21b      	sxth	r3, r3
 80028cc:	4313      	orrs	r3, r2
 80028ce:	b21a      	sxth	r2, r3
 80028d0:	4b4e      	ldr	r3, [pc, #312]	; (8002a0c <BME280measurement+0x374>)
 80028d2:	801a      	strh	r2, [r3, #0]
	  digP2 = (short)((dig1[23] << 8) | dig1[22]);
 80028d4:	4b41      	ldr	r3, [pc, #260]	; (80029dc <BME280measurement+0x344>)
 80028d6:	7ddb      	ldrb	r3, [r3, #23]
 80028d8:	021b      	lsls	r3, r3, #8
 80028da:	b21a      	sxth	r2, r3
 80028dc:	4b3f      	ldr	r3, [pc, #252]	; (80029dc <BME280measurement+0x344>)
 80028de:	7d9b      	ldrb	r3, [r3, #22]
 80028e0:	b21b      	sxth	r3, r3
 80028e2:	4313      	orrs	r3, r2
 80028e4:	b21a      	sxth	r2, r3
 80028e6:	4b43      	ldr	r3, [pc, #268]	; (80029f4 <BME280measurement+0x35c>)
 80028e8:	801a      	strh	r2, [r3, #0]
	  digH1 = (unsigned char)dig1[25];
 80028ea:	4b3c      	ldr	r3, [pc, #240]	; (80029dc <BME280measurement+0x344>)
 80028ec:	7e5a      	ldrb	r2, [r3, #25]
 80028ee:	4b48      	ldr	r3, [pc, #288]	; (8002a10 <BME280measurement+0x378>)
 80028f0:	701a      	strb	r2, [r3, #0]
	  digH2 = (short)((dig2[1] << 8) | dig2[0]);
 80028f2:	4b3b      	ldr	r3, [pc, #236]	; (80029e0 <BME280measurement+0x348>)
 80028f4:	785b      	ldrb	r3, [r3, #1]
 80028f6:	021b      	lsls	r3, r3, #8
 80028f8:	b21a      	sxth	r2, r3
 80028fa:	4b39      	ldr	r3, [pc, #228]	; (80029e0 <BME280measurement+0x348>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	b21b      	sxth	r3, r3
 8002900:	4313      	orrs	r3, r2
 8002902:	b21a      	sxth	r2, r3
 8002904:	4b43      	ldr	r3, [pc, #268]	; (8002a14 <BME280measurement+0x37c>)
 8002906:	801a      	strh	r2, [r3, #0]
	  digH3 = (unsigned char)dig2[2];
 8002908:	4b35      	ldr	r3, [pc, #212]	; (80029e0 <BME280measurement+0x348>)
 800290a:	789a      	ldrb	r2, [r3, #2]
 800290c:	4b42      	ldr	r3, [pc, #264]	; (8002a18 <BME280measurement+0x380>)
 800290e:	701a      	strb	r2, [r3, #0]
	  digH4 = (short)((dig2[3] << 4) | (dig2[4] & 0x0F));
 8002910:	4b33      	ldr	r3, [pc, #204]	; (80029e0 <BME280measurement+0x348>)
 8002912:	78db      	ldrb	r3, [r3, #3]
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	b21a      	sxth	r2, r3
 8002918:	4b31      	ldr	r3, [pc, #196]	; (80029e0 <BME280measurement+0x348>)
 800291a:	791b      	ldrb	r3, [r3, #4]
 800291c:	b21b      	sxth	r3, r3
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	b21b      	sxth	r3, r3
 8002924:	4313      	orrs	r3, r2
 8002926:	b21a      	sxth	r2, r3
 8002928:	4b3c      	ldr	r3, [pc, #240]	; (8002a1c <BME280measurement+0x384>)
 800292a:	801a      	strh	r2, [r3, #0]
	  digH5 = (short)(((dig2[4] & 0xF0) >> 4) | (dig2[5] << 4));
 800292c:	4b2c      	ldr	r3, [pc, #176]	; (80029e0 <BME280measurement+0x348>)
 800292e:	791b      	ldrb	r3, [r3, #4]
 8002930:	091b      	lsrs	r3, r3, #4
 8002932:	b2db      	uxtb	r3, r3
 8002934:	b21a      	sxth	r2, r3
 8002936:	4b2a      	ldr	r3, [pc, #168]	; (80029e0 <BME280measurement+0x348>)
 8002938:	795b      	ldrb	r3, [r3, #5]
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	b21b      	sxth	r3, r3
 800293e:	4313      	orrs	r3, r2
 8002940:	b21a      	sxth	r2, r3
 8002942:	4b37      	ldr	r3, [pc, #220]	; (8002a20 <BME280measurement+0x388>)
 8002944:	801a      	strh	r2, [r3, #0]
	  digH6 = (char)dig2[6];
 8002946:	4b26      	ldr	r3, [pc, #152]	; (80029e0 <BME280measurement+0x348>)
 8002948:	799a      	ldrb	r2, [r3, #6]
 800294a:	4b36      	ldr	r3, [pc, #216]	; (8002a24 <BME280measurement+0x38c>)
 800294c:	701a      	strb	r2, [r3, #0]
	  press[0] = allADC[0];
 800294e:	7c3b      	ldrb	r3, [r7, #16]
 8002950:	773b      	strb	r3, [r7, #28]
	  press[1] = allADC[1];
 8002952:	7c7b      	ldrb	r3, [r7, #17]
 8002954:	777b      	strb	r3, [r7, #29]
	  press[2] = allADC[2];
 8002956:	7cbb      	ldrb	r3, [r7, #18]
 8002958:	77bb      	strb	r3, [r7, #30]
	  temp[0] = allADC[3];
 800295a:	7cfb      	ldrb	r3, [r7, #19]
 800295c:	f887 3020 	strb.w	r3, [r7, #32]
	  temp[1] = allADC[4];
 8002960:	7d3b      	ldrb	r3, [r7, #20]
 8002962:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	  temp[2] = allADC[5];
 8002966:	7d7b      	ldrb	r3, [r7, #21]
 8002968:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  hum[0] = allADC[6];
 800296c:	7dbb      	ldrb	r3, [r7, #22]
 800296e:	763b      	strb	r3, [r7, #24]
	  hum[1] = allADC[7];
 8002970:	7dfb      	ldrb	r3, [r7, #23]
 8002972:	767b      	strb	r3, [r7, #25]
	  int32_t t, p, h;
	  t = p = h = 0;
 8002974:	2300      	movs	r3, #0
 8002976:	65bb      	str	r3, [r7, #88]	; 0x58
 8002978:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800297a:	657b      	str	r3, [r7, #84]	; 0x54
 800297c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800297e:	653b      	str	r3, [r7, #80]	; 0x50
	  t = (int32_t)((temp[0] << 12) | (temp[1] << 4) | (temp[2] >> 4));
 8002980:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002984:	031a      	lsls	r2, r3, #12
 8002986:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800298a:	011b      	lsls	r3, r3, #4
 800298c:	4313      	orrs	r3, r2
 800298e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002992:	0912      	lsrs	r2, r2, #4
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	4313      	orrs	r3, r2
 8002998:	653b      	str	r3, [r7, #80]	; 0x50
	  p = (int32_t)((press[0] << 12) | (press[1] << 4) | ((press)[2] >> 4));
 800299a:	7f3b      	ldrb	r3, [r7, #28]
 800299c:	031a      	lsls	r2, r3, #12
 800299e:	7f7b      	ldrb	r3, [r7, #29]
 80029a0:	011b      	lsls	r3, r3, #4
 80029a2:	4313      	orrs	r3, r2
 80029a4:	7fba      	ldrb	r2, [r7, #30]
 80029a6:	0912      	lsrs	r2, r2, #4
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	4313      	orrs	r3, r2
 80029ac:	657b      	str	r3, [r7, #84]	; 0x54
	  h = (int32_t)((hum[0] << 8) | hum[1]);
 80029ae:	7e3b      	ldrb	r3, [r7, #24]
 80029b0:	021b      	lsls	r3, r3, #8
 80029b2:	7e7a      	ldrb	r2, [r7, #25]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	65bb      	str	r3, [r7, #88]	; 0x58
	  int ti = BME280compensateT(t);
 80029b8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80029ba:	f7ff fc05 	bl	80021c8 <BME280compensateT>
 80029be:	64f8      	str	r0, [r7, #76]	; 0x4c
	  uint32_t pi = BME280compensateP(p);
 80029c0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80029c2:	f7ff fc41 	bl	8002248 <BME280compensateP>
 80029c6:	e02f      	b.n	8002a28 <BME280measurement+0x390>
 80029c8:	200006c4 	.word	0x200006c4
 80029cc:	200006e2 	.word	0x200006e2
 80029d0:	200006df 	.word	0x200006df
 80029d4:	200006c0 	.word	0x200006c0
 80029d8:	200006e3 	.word	0x200006e3
 80029dc:	20000698 	.word	0x20000698
 80029e0:	200006d8 	.word	0x200006d8
 80029e4:	200006ce 	.word	0x200006ce
 80029e8:	200006be 	.word	0x200006be
 80029ec:	200006b4 	.word	0x200006b4
 80029f0:	200006b2 	.word	0x200006b2
 80029f4:	200006ba 	.word	0x200006ba
 80029f8:	200006ca 	.word	0x200006ca
 80029fc:	20000696 	.word	0x20000696
 8002a00:	200006d2 	.word	0x200006d2
 8002a04:	200006d0 	.word	0x200006d0
 8002a08:	200006b8 	.word	0x200006b8
 8002a0c:	200006e0 	.word	0x200006e0
 8002a10:	200006bc 	.word	0x200006bc
 8002a14:	200006c8 	.word	0x200006c8
 8002a18:	200006cc 	.word	0x200006cc
 8002a1c:	200006c2 	.word	0x200006c2
 8002a20:	200006d4 	.word	0x200006d4
 8002a24:	200006b6 	.word	0x200006b6
 8002a28:	64b8      	str	r0, [r7, #72]	; 0x48
	  int pic = pi / 25600;
 8002a2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a2c:	4a58      	ldr	r2, [pc, #352]	; (8002b90 <BME280measurement+0x4f8>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	0b5b      	lsrs	r3, r3, #13
 8002a34:	647b      	str	r3, [r7, #68]	; 0x44
	  int piu = (int)((((float)pi / (float)25600) - (float)pic) * 1000);
 8002a36:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002a38:	f7fd fe66 	bl	8000708 <__aeabi_ui2f>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	4955      	ldr	r1, [pc, #340]	; (8002b94 <BME280measurement+0x4fc>)
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fd ff6d 	bl	8000920 <__aeabi_fdiv>
 8002a46:	4603      	mov	r3, r0
 8002a48:	461c      	mov	r4, r3
 8002a4a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002a4c:	f7fd fe60 	bl	8000710 <__aeabi_i2f>
 8002a50:	4603      	mov	r3, r0
 8002a52:	4619      	mov	r1, r3
 8002a54:	4620      	mov	r0, r4
 8002a56:	f7fd fda5 	bl	80005a4 <__aeabi_fsub>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	494e      	ldr	r1, [pc, #312]	; (8002b98 <BME280measurement+0x500>)
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fd feaa 	bl	80007b8 <__aeabi_fmul>
 8002a64:	4603      	mov	r3, r0
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fd fff6 	bl	8000a58 <__aeabi_f2iz>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	643b      	str	r3, [r7, #64]	; 0x40
	  uint32_t hi = BME280compensateH(h);
 8002a70:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002a72:	f7ff fda7 	bl	80025c4 <BME280compensateH>
 8002a76:	63f8      	str	r0, [r7, #60]	; 0x3c
	  int hic = hi / 1024;
 8002a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a7a:	0a9b      	lsrs	r3, r3, #10
 8002a7c:	63bb      	str	r3, [r7, #56]	; 0x38
	  int hiu = (int)((((float)hi / (float)1024) - (float)hic) * 1000);
 8002a7e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002a80:	f7fd fe42 	bl	8000708 <__aeabi_ui2f>
 8002a84:	4603      	mov	r3, r0
 8002a86:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fd ff48 	bl	8000920 <__aeabi_fdiv>
 8002a90:	4603      	mov	r3, r0
 8002a92:	461c      	mov	r4, r3
 8002a94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a96:	f7fd fe3b 	bl	8000710 <__aeabi_i2f>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4620      	mov	r0, r4
 8002aa0:	f7fd fd80 	bl	80005a4 <__aeabi_fsub>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	493c      	ldr	r1, [pc, #240]	; (8002b98 <BME280measurement+0x500>)
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fd fe85 	bl	80007b8 <__aeabi_fmul>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fd ffd1 	bl	8000a58 <__aeabi_f2iz>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	637b      	str	r3, [r7, #52]	; 0x34
	  clearTable(lastMeasurementInfoString);
 8002aba:	4838      	ldr	r0, [pc, #224]	; (8002b9c <BME280measurement+0x504>)
 8002abc:	f7ff faac 	bl	8002018 <clearTable>
	  int j = snprintf((char*)lastMeasurementInfoString, 300, "Chip ID: %x , status meas = %d, conf = %x, "
 8002ac0:	4b37      	ldr	r3, [pc, #220]	; (8002ba0 <BME280measurement+0x508>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	461e      	mov	r6, r3
 8002ac6:	4b37      	ldr	r3, [pc, #220]	; (8002ba4 <BME280measurement+0x50c>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	4619      	mov	r1, r3
 8002acc:	4b36      	ldr	r3, [pc, #216]	; (8002ba8 <BME280measurement+0x510>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	4b36      	ldr	r3, [pc, #216]	; (8002bac <BME280measurement+0x514>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	461c      	mov	r4, r3
 8002ad8:	4b35      	ldr	r3, [pc, #212]	; (8002bb0 <BME280measurement+0x518>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	461d      	mov	r5, r3
 8002ade:	4b35      	ldr	r3, [pc, #212]	; (8002bb4 <BME280measurement+0x51c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ae4:	920e      	str	r2, [sp, #56]	; 0x38
 8002ae6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ae8:	920d      	str	r2, [sp, #52]	; 0x34
 8002aea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002aec:	920c      	str	r2, [sp, #48]	; 0x30
 8002aee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002af0:	920b      	str	r2, [sp, #44]	; 0x2c
 8002af2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002af4:	920a      	str	r2, [sp, #40]	; 0x28
 8002af6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002af8:	9209      	str	r2, [sp, #36]	; 0x24
 8002afa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002afc:	9208      	str	r2, [sp, #32]
 8002afe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b00:	9207      	str	r2, [sp, #28]
 8002b02:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b04:	9206      	str	r2, [sp, #24]
 8002b06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002b08:	9205      	str	r2, [sp, #20]
 8002b0a:	9304      	str	r3, [sp, #16]
 8002b0c:	9503      	str	r5, [sp, #12]
 8002b0e:	9402      	str	r4, [sp, #8]
 8002b10:	9001      	str	r0, [sp, #4]
 8002b12:	9100      	str	r1, [sp, #0]
 8002b14:	4633      	mov	r3, r6
 8002b16:	4a28      	ldr	r2, [pc, #160]	; (8002bb8 <BME280measurement+0x520>)
 8002b18:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002b1c:	481f      	ldr	r0, [pc, #124]	; (8002b9c <BME280measurement+0x504>)
 8002b1e:	f00d f9ad 	bl	800fe7c <sniprintf>
 8002b22:	6338      	str	r0, [r7, #48]	; 0x30
			  "wilg = %ld /1024 %%RH, wilgotnosc =%d.%d %%RH",
			  BME280id, status, conf1, meas1, ctrl_hum1, tFine, t, p, h, ti, pi, pic, piu, hi, hic, hiu);

	  //TRZEBA KONIECZNIE ZADBAĆ BY...wartość t, p, h
	  //były poprwanie zaokrąglane, a nie ucinane przy zapisie na kartę SD!!!!!
	  float Temperature = (float)ti / 100;
 8002b24:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002b26:	f7fd fdf3 	bl	8000710 <__aeabi_i2f>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	4923      	ldr	r1, [pc, #140]	; (8002bbc <BME280measurement+0x524>)
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fd fef6 	bl	8000920 <__aeabi_fdiv>
 8002b34:	4603      	mov	r3, r0
 8002b36:	62fb      	str	r3, [r7, #44]	; 0x2c
	  *outTemperature = Temperature;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b3c:	601a      	str	r2, [r3, #0]
	  float Pressure = (float)pi / 25600;
 8002b3e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002b40:	f7fd fde2 	bl	8000708 <__aeabi_ui2f>
 8002b44:	4603      	mov	r3, r0
 8002b46:	4913      	ldr	r1, [pc, #76]	; (8002b94 <BME280measurement+0x4fc>)
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7fd fee9 	bl	8000920 <__aeabi_fdiv>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	62bb      	str	r3, [r7, #40]	; 0x28
	  *outPressure = Pressure;
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b56:	601a      	str	r2, [r3, #0]
	  float Humidity = (float)hi / 1024;
 8002b58:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002b5a:	f7fd fdd5 	bl	8000708 <__aeabi_ui2f>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fd fedb 	bl	8000920 <__aeabi_fdiv>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
	  *outHumidity = Humidity;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b72:	601a      	str	r2, [r3, #0]

	  //przekazanie wyników pomiaru do zmiannych globalnych z rps.c, potrzebnych do ewentualnego przekazania do PC po komendzie "gfi" ("I")
	  lastTemperature = Temperature;
 8002b74:	4a12      	ldr	r2, [pc, #72]	; (8002bc0 <BME280measurement+0x528>)
 8002b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b78:	6013      	str	r3, [r2, #0]
	  lastPressure = Pressure;
 8002b7a:	4a12      	ldr	r2, [pc, #72]	; (8002bc4 <BME280measurement+0x52c>)
 8002b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7e:	6013      	str	r3, [r2, #0]
	  lastHumidity = Humidity;
 8002b80:	4a11      	ldr	r2, [pc, #68]	; (8002bc8 <BME280measurement+0x530>)
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	6013      	str	r3, [r2, #0]
}
 8002b86:	bf00      	nop
 8002b88:	376c      	adds	r7, #108	; 0x6c
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	51eb851f 	.word	0x51eb851f
 8002b94:	46c80000 	.word	0x46c80000
 8002b98:	447a0000 	.word	0x447a0000
 8002b9c:	2000048c 	.word	0x2000048c
 8002ba0:	200006c4 	.word	0x200006c4
 8002ba4:	200006e2 	.word	0x200006e2
 8002ba8:	200006df 	.word	0x200006df
 8002bac:	200006c0 	.word	0x200006c0
 8002bb0:	200006e3 	.word	0x200006e3
 8002bb4:	20000690 	.word	0x20000690
 8002bb8:	08010820 	.word	0x08010820
 8002bbc:	42c80000 	.word	0x42c80000
 8002bc0:	20000210 	.word	0x20000210
 8002bc4:	20000214 	.word	0x20000214
 8002bc8:	20000218 	.word	0x20000218

08002bcc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002bd0:	4b17      	ldr	r3, [pc, #92]	; (8002c30 <MX_SPI1_Init+0x64>)
 8002bd2:	4a18      	ldr	r2, [pc, #96]	; (8002c34 <MX_SPI1_Init+0x68>)
 8002bd4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002bd6:	4b16      	ldr	r3, [pc, #88]	; (8002c30 <MX_SPI1_Init+0x64>)
 8002bd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002bdc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002bde:	4b14      	ldr	r3, [pc, #80]	; (8002c30 <MX_SPI1_Init+0x64>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002be4:	4b12      	ldr	r3, [pc, #72]	; (8002c30 <MX_SPI1_Init+0x64>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002bea:	4b11      	ldr	r3, [pc, #68]	; (8002c30 <MX_SPI1_Init+0x64>)
 8002bec:	2202      	movs	r2, #2
 8002bee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002bf0:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <MX_SPI1_Init+0x64>)
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002bf6:	4b0e      	ldr	r3, [pc, #56]	; (8002c30 <MX_SPI1_Init+0x64>)
 8002bf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bfc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002bfe:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <MX_SPI1_Init+0x64>)
 8002c00:	2230      	movs	r2, #48	; 0x30
 8002c02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c04:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <MX_SPI1_Init+0x64>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c0a:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <MX_SPI1_Init+0x64>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c10:	4b07      	ldr	r3, [pc, #28]	; (8002c30 <MX_SPI1_Init+0x64>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c16:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <MX_SPI1_Init+0x64>)
 8002c18:	220a      	movs	r2, #10
 8002c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c1c:	4804      	ldr	r0, [pc, #16]	; (8002c30 <MX_SPI1_Init+0x64>)
 8002c1e:	f004 fd4a 	bl	80076b6 <HAL_SPI_Init>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002c28:	f7fe fb34 	bl	8001294 <Error_Handler>
  }

}
 8002c2c:	bf00      	nop
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	200006e4 	.word	0x200006e4
 8002c34:	40013000 	.word	0x40013000

08002c38 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b088      	sub	sp, #32
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c40:	f107 0310 	add.w	r3, r7, #16
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a1b      	ldr	r2, [pc, #108]	; (8002cc0 <HAL_SPI_MspInit+0x88>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d12f      	bne.n	8002cb8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c58:	4b1a      	ldr	r3, [pc, #104]	; (8002cc4 <HAL_SPI_MspInit+0x8c>)
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	4a19      	ldr	r2, [pc, #100]	; (8002cc4 <HAL_SPI_MspInit+0x8c>)
 8002c5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c62:	6193      	str	r3, [r2, #24]
 8002c64:	4b17      	ldr	r3, [pc, #92]	; (8002cc4 <HAL_SPI_MspInit+0x8c>)
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c70:	4b14      	ldr	r3, [pc, #80]	; (8002cc4 <HAL_SPI_MspInit+0x8c>)
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	4a13      	ldr	r2, [pc, #76]	; (8002cc4 <HAL_SPI_MspInit+0x8c>)
 8002c76:	f043 0304 	orr.w	r3, r3, #4
 8002c7a:	6193      	str	r3, [r2, #24]
 8002c7c:	4b11      	ldr	r3, [pc, #68]	; (8002cc4 <HAL_SPI_MspInit+0x8c>)
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002c88:	23a0      	movs	r3, #160	; 0xa0
 8002c8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c90:	2303      	movs	r3, #3
 8002c92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c94:	f107 0310 	add.w	r3, r7, #16
 8002c98:	4619      	mov	r1, r3
 8002c9a:	480b      	ldr	r0, [pc, #44]	; (8002cc8 <HAL_SPI_MspInit+0x90>)
 8002c9c:	f000 fa7a 	bl	8003194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ca0:	2340      	movs	r3, #64	; 0x40
 8002ca2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cac:	f107 0310 	add.w	r3, r7, #16
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4805      	ldr	r0, [pc, #20]	; (8002cc8 <HAL_SPI_MspInit+0x90>)
 8002cb4:	f000 fa6e 	bl	8003194 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002cb8:	bf00      	nop
 8002cba:	3720      	adds	r7, #32
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40013000 	.word	0x40013000
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40010800 	.word	0x40010800

08002ccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002cd2:	4b15      	ldr	r3, [pc, #84]	; (8002d28 <HAL_MspInit+0x5c>)
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	4a14      	ldr	r2, [pc, #80]	; (8002d28 <HAL_MspInit+0x5c>)
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	6193      	str	r3, [r2, #24]
 8002cde:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <HAL_MspInit+0x5c>)
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	60bb      	str	r3, [r7, #8]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cea:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <HAL_MspInit+0x5c>)
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	4a0e      	ldr	r2, [pc, #56]	; (8002d28 <HAL_MspInit+0x5c>)
 8002cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf4:	61d3      	str	r3, [r2, #28]
 8002cf6:	4b0c      	ldr	r3, [pc, #48]	; (8002d28 <HAL_MspInit+0x5c>)
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfe:	607b      	str	r3, [r7, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002d02:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <HAL_MspInit+0x60>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	4a04      	ldr	r2, [pc, #16]	; (8002d2c <HAL_MspInit+0x60>)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	40010000 	.word	0x40010000

08002d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr

08002d3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d40:	e7fe      	b.n	8002d40 <HardFault_Handler+0x4>

08002d42 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d42:	b480      	push	{r7}
 8002d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d46:	e7fe      	b.n	8002d46 <MemManage_Handler+0x4>

08002d48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d4c:	e7fe      	b.n	8002d4c <BusFault_Handler+0x4>

08002d4e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d52:	e7fe      	b.n	8002d52 <UsageFault_Handler+0x4>

08002d54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d58:	bf00      	nop
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr

08002d60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d64:	bf00      	nop
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr

08002d6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d70:	bf00      	nop
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc80      	pop	{r7}
 8002d76:	4770      	bx	lr

08002d78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d7c:	f000 f8be 	bl	8002efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d80:	bf00      	nop
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002d88:	4802      	ldr	r0, [pc, #8]	; (8002d94 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002d8a:	f000 fdca 	bl	8003922 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002d8e:	bf00      	nop
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	20001838 	.word	0x20001838

08002d98 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002d9c:	2040      	movs	r0, #64	; 0x40
 8002d9e:	f000 fc77 	bl	8003690 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002da2:	2080      	movs	r0, #128	; 0x80
 8002da4:	f000 fc74 	bl	8003690 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002da8:	bf00      	nop
 8002daa:	bd80      	pop	{r7, pc}

08002dac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002db4:	4a14      	ldr	r2, [pc, #80]	; (8002e08 <_sbrk+0x5c>)
 8002db6:	4b15      	ldr	r3, [pc, #84]	; (8002e0c <_sbrk+0x60>)
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dc0:	4b13      	ldr	r3, [pc, #76]	; (8002e10 <_sbrk+0x64>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d102      	bne.n	8002dce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dc8:	4b11      	ldr	r3, [pc, #68]	; (8002e10 <_sbrk+0x64>)
 8002dca:	4a12      	ldr	r2, [pc, #72]	; (8002e14 <_sbrk+0x68>)
 8002dcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dce:	4b10      	ldr	r3, [pc, #64]	; (8002e10 <_sbrk+0x64>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d207      	bcs.n	8002dec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ddc:	f00c ff56 	bl	800fc8c <__errno>
 8002de0:	4602      	mov	r2, r0
 8002de2:	230c      	movs	r3, #12
 8002de4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002de6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dea:	e009      	b.n	8002e00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dec:	4b08      	ldr	r3, [pc, #32]	; (8002e10 <_sbrk+0x64>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002df2:	4b07      	ldr	r3, [pc, #28]	; (8002e10 <_sbrk+0x64>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4413      	add	r3, r2
 8002dfa:	4a05      	ldr	r2, [pc, #20]	; (8002e10 <_sbrk+0x64>)
 8002dfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	2000c000 	.word	0x2000c000
 8002e0c:	00000400 	.word	0x00000400
 8002e10:	2000021c 	.word	0x2000021c
 8002e14:	20001b28 	.word	0x20001b28

08002e18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e1c:	bf00      	nop
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr

08002e24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002e24:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002e26:	e003      	b.n	8002e30 <LoopCopyDataInit>

08002e28 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002e28:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002e2a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002e2c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002e2e:	3104      	adds	r1, #4

08002e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002e30:	480a      	ldr	r0, [pc, #40]	; (8002e5c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002e32:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002e34:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002e36:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002e38:	d3f6      	bcc.n	8002e28 <CopyDataInit>
  ldr r2, =_sbss
 8002e3a:	4a0a      	ldr	r2, [pc, #40]	; (8002e64 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002e3c:	e002      	b.n	8002e44 <LoopFillZerobss>

08002e3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002e3e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002e40:	f842 3b04 	str.w	r3, [r2], #4

08002e44 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002e44:	4b08      	ldr	r3, [pc, #32]	; (8002e68 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002e46:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002e48:	d3f9      	bcc.n	8002e3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e4a:	f7ff ffe5 	bl	8002e18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e4e:	f00c ff23 	bl	800fc98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e52:	f7fe f891 	bl	8000f78 <main>
  bx lr
 8002e56:	4770      	bx	lr
  ldr r3, =_sidata
 8002e58:	08010b64 	.word	0x08010b64
  ldr r0, =_sdata
 8002e5c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002e60:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8002e64:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8002e68:	20001b28 	.word	0x20001b28

08002e6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e6c:	e7fe      	b.n	8002e6c <ADC1_2_IRQHandler>
	...

08002e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e74:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <HAL_Init+0x28>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a07      	ldr	r2, [pc, #28]	; (8002e98 <HAL_Init+0x28>)
 8002e7a:	f043 0310 	orr.w	r3, r3, #16
 8002e7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e80:	2003      	movs	r0, #3
 8002e82:	f000 f945 	bl	8003110 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e86:	2000      	movs	r0, #0
 8002e88:	f000 f808 	bl	8002e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e8c:	f7ff ff1e 	bl	8002ccc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40022000 	.word	0x40022000

08002e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ea4:	4b12      	ldr	r3, [pc, #72]	; (8002ef0 <HAL_InitTick+0x54>)
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <HAL_InitTick+0x58>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	4619      	mov	r1, r3
 8002eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 f95d 	bl	800317a <HAL_SYSTICK_Config>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e00e      	b.n	8002ee8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b0f      	cmp	r3, #15
 8002ece:	d80a      	bhi.n	8002ee6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ed8:	f000 f925 	bl	8003126 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002edc:	4a06      	ldr	r2, [pc, #24]	; (8002ef8 <HAL_InitTick+0x5c>)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	e000      	b.n	8002ee8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	20000000 	.word	0x20000000
 8002ef4:	20000008 	.word	0x20000008
 8002ef8:	20000004 	.word	0x20000004

08002efc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f00:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <HAL_IncTick+0x1c>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	461a      	mov	r2, r3
 8002f06:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <HAL_IncTick+0x20>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	4a03      	ldr	r2, [pc, #12]	; (8002f1c <HAL_IncTick+0x20>)
 8002f0e:	6013      	str	r3, [r2, #0]
}
 8002f10:	bf00      	nop
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr
 8002f18:	20000008 	.word	0x20000008
 8002f1c:	2000073c 	.word	0x2000073c

08002f20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  return uwTick;
 8002f24:	4b02      	ldr	r3, [pc, #8]	; (8002f30 <HAL_GetTick+0x10>)
 8002f26:	681b      	ldr	r3, [r3, #0]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr
 8002f30:	2000073c 	.word	0x2000073c

08002f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f3c:	f7ff fff0 	bl	8002f20 <HAL_GetTick>
 8002f40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f4c:	d005      	beq.n	8002f5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f4e:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <HAL_Delay+0x40>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	461a      	mov	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	4413      	add	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f5a:	bf00      	nop
 8002f5c:	f7ff ffe0 	bl	8002f20 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d8f7      	bhi.n	8002f5c <HAL_Delay+0x28>
  {
  }
}
 8002f6c:	bf00      	nop
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	20000008 	.word	0x20000008

08002f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f88:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <__NVIC_SetPriorityGrouping+0x44>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f94:	4013      	ands	r3, r2
 8002f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002faa:	4a04      	ldr	r2, [pc, #16]	; (8002fbc <__NVIC_SetPriorityGrouping+0x44>)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	60d3      	str	r3, [r2, #12]
}
 8002fb0:	bf00      	nop
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bc80      	pop	{r7}
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	e000ed00 	.word	0xe000ed00

08002fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fc4:	4b04      	ldr	r3, [pc, #16]	; (8002fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	0a1b      	lsrs	r3, r3, #8
 8002fca:	f003 0307 	and.w	r3, r3, #7
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	e000ed00 	.word	0xe000ed00

08002fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	db0b      	blt.n	8003006 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fee:	79fb      	ldrb	r3, [r7, #7]
 8002ff0:	f003 021f 	and.w	r2, r3, #31
 8002ff4:	4906      	ldr	r1, [pc, #24]	; (8003010 <__NVIC_EnableIRQ+0x34>)
 8002ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8003002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr
 8003010:	e000e100 	.word	0xe000e100

08003014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	6039      	str	r1, [r7, #0]
 800301e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003024:	2b00      	cmp	r3, #0
 8003026:	db0a      	blt.n	800303e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	b2da      	uxtb	r2, r3
 800302c:	490c      	ldr	r1, [pc, #48]	; (8003060 <__NVIC_SetPriority+0x4c>)
 800302e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003032:	0112      	lsls	r2, r2, #4
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	440b      	add	r3, r1
 8003038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800303c:	e00a      	b.n	8003054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	b2da      	uxtb	r2, r3
 8003042:	4908      	ldr	r1, [pc, #32]	; (8003064 <__NVIC_SetPriority+0x50>)
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	3b04      	subs	r3, #4
 800304c:	0112      	lsls	r2, r2, #4
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	440b      	add	r3, r1
 8003052:	761a      	strb	r2, [r3, #24]
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	bc80      	pop	{r7}
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	e000e100 	.word	0xe000e100
 8003064:	e000ed00 	.word	0xe000ed00

08003068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003068:	b480      	push	{r7}
 800306a:	b089      	sub	sp, #36	; 0x24
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f1c3 0307 	rsb	r3, r3, #7
 8003082:	2b04      	cmp	r3, #4
 8003084:	bf28      	it	cs
 8003086:	2304      	movcs	r3, #4
 8003088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	3304      	adds	r3, #4
 800308e:	2b06      	cmp	r3, #6
 8003090:	d902      	bls.n	8003098 <NVIC_EncodePriority+0x30>
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	3b03      	subs	r3, #3
 8003096:	e000      	b.n	800309a <NVIC_EncodePriority+0x32>
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800309c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43da      	mvns	r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	401a      	ands	r2, r3
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ba:	43d9      	mvns	r1, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c0:	4313      	orrs	r3, r2
         );
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3724      	adds	r7, #36	; 0x24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr

080030cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030dc:	d301      	bcc.n	80030e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030de:	2301      	movs	r3, #1
 80030e0:	e00f      	b.n	8003102 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030e2:	4a0a      	ldr	r2, [pc, #40]	; (800310c <SysTick_Config+0x40>)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030ea:	210f      	movs	r1, #15
 80030ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030f0:	f7ff ff90 	bl	8003014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030f4:	4b05      	ldr	r3, [pc, #20]	; (800310c <SysTick_Config+0x40>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030fa:	4b04      	ldr	r3, [pc, #16]	; (800310c <SysTick_Config+0x40>)
 80030fc:	2207      	movs	r2, #7
 80030fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	e000e010 	.word	0xe000e010

08003110 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f7ff ff2d 	bl	8002f78 <__NVIC_SetPriorityGrouping>
}
 800311e:	bf00      	nop
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003126:	b580      	push	{r7, lr}
 8003128:	b086      	sub	sp, #24
 800312a:	af00      	add	r7, sp, #0
 800312c:	4603      	mov	r3, r0
 800312e:	60b9      	str	r1, [r7, #8]
 8003130:	607a      	str	r2, [r7, #4]
 8003132:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003134:	2300      	movs	r3, #0
 8003136:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003138:	f7ff ff42 	bl	8002fc0 <__NVIC_GetPriorityGrouping>
 800313c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	68b9      	ldr	r1, [r7, #8]
 8003142:	6978      	ldr	r0, [r7, #20]
 8003144:	f7ff ff90 	bl	8003068 <NVIC_EncodePriority>
 8003148:	4602      	mov	r2, r0
 800314a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800314e:	4611      	mov	r1, r2
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff ff5f 	bl	8003014 <__NVIC_SetPriority>
}
 8003156:	bf00      	nop
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b082      	sub	sp, #8
 8003162:	af00      	add	r7, sp, #0
 8003164:	4603      	mov	r3, r0
 8003166:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff ff35 	bl	8002fdc <__NVIC_EnableIRQ>
}
 8003172:	bf00      	nop
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b082      	sub	sp, #8
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7ff ffa2 	bl	80030cc <SysTick_Config>
 8003188:	4603      	mov	r3, r0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
	...

08003194 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003194:	b480      	push	{r7}
 8003196:	b08b      	sub	sp, #44	; 0x2c
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800319e:	2300      	movs	r3, #0
 80031a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80031a2:	2300      	movs	r3, #0
 80031a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031a6:	e133      	b.n	8003410 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80031a8:	2201      	movs	r2, #1
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	69fa      	ldr	r2, [r7, #28]
 80031b8:	4013      	ands	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	f040 8122 	bne.w	800340a <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b12      	cmp	r3, #18
 80031cc:	d034      	beq.n	8003238 <HAL_GPIO_Init+0xa4>
 80031ce:	2b12      	cmp	r3, #18
 80031d0:	d80d      	bhi.n	80031ee <HAL_GPIO_Init+0x5a>
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d02b      	beq.n	800322e <HAL_GPIO_Init+0x9a>
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d804      	bhi.n	80031e4 <HAL_GPIO_Init+0x50>
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d031      	beq.n	8003242 <HAL_GPIO_Init+0xae>
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d01c      	beq.n	800321c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80031e2:	e048      	b.n	8003276 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80031e4:	2b03      	cmp	r3, #3
 80031e6:	d043      	beq.n	8003270 <HAL_GPIO_Init+0xdc>
 80031e8:	2b11      	cmp	r3, #17
 80031ea:	d01b      	beq.n	8003224 <HAL_GPIO_Init+0x90>
          break;
 80031ec:	e043      	b.n	8003276 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80031ee:	4a8f      	ldr	r2, [pc, #572]	; (800342c <HAL_GPIO_Init+0x298>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d026      	beq.n	8003242 <HAL_GPIO_Init+0xae>
 80031f4:	4a8d      	ldr	r2, [pc, #564]	; (800342c <HAL_GPIO_Init+0x298>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d806      	bhi.n	8003208 <HAL_GPIO_Init+0x74>
 80031fa:	4a8d      	ldr	r2, [pc, #564]	; (8003430 <HAL_GPIO_Init+0x29c>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d020      	beq.n	8003242 <HAL_GPIO_Init+0xae>
 8003200:	4a8c      	ldr	r2, [pc, #560]	; (8003434 <HAL_GPIO_Init+0x2a0>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d01d      	beq.n	8003242 <HAL_GPIO_Init+0xae>
          break;
 8003206:	e036      	b.n	8003276 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003208:	4a8b      	ldr	r2, [pc, #556]	; (8003438 <HAL_GPIO_Init+0x2a4>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d019      	beq.n	8003242 <HAL_GPIO_Init+0xae>
 800320e:	4a8b      	ldr	r2, [pc, #556]	; (800343c <HAL_GPIO_Init+0x2a8>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d016      	beq.n	8003242 <HAL_GPIO_Init+0xae>
 8003214:	4a8a      	ldr	r2, [pc, #552]	; (8003440 <HAL_GPIO_Init+0x2ac>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d013      	beq.n	8003242 <HAL_GPIO_Init+0xae>
          break;
 800321a:	e02c      	b.n	8003276 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	623b      	str	r3, [r7, #32]
          break;
 8003222:	e028      	b.n	8003276 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	3304      	adds	r3, #4
 800322a:	623b      	str	r3, [r7, #32]
          break;
 800322c:	e023      	b.n	8003276 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	3308      	adds	r3, #8
 8003234:	623b      	str	r3, [r7, #32]
          break;
 8003236:	e01e      	b.n	8003276 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	330c      	adds	r3, #12
 800323e:	623b      	str	r3, [r7, #32]
          break;
 8003240:	e019      	b.n	8003276 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d102      	bne.n	8003250 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800324a:	2304      	movs	r3, #4
 800324c:	623b      	str	r3, [r7, #32]
          break;
 800324e:	e012      	b.n	8003276 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d105      	bne.n	8003264 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003258:	2308      	movs	r3, #8
 800325a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	69fa      	ldr	r2, [r7, #28]
 8003260:	611a      	str	r2, [r3, #16]
          break;
 8003262:	e008      	b.n	8003276 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003264:	2308      	movs	r3, #8
 8003266:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	69fa      	ldr	r2, [r7, #28]
 800326c:	615a      	str	r2, [r3, #20]
          break;
 800326e:	e002      	b.n	8003276 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003270:	2300      	movs	r3, #0
 8003272:	623b      	str	r3, [r7, #32]
          break;
 8003274:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	2bff      	cmp	r3, #255	; 0xff
 800327a:	d801      	bhi.n	8003280 <HAL_GPIO_Init+0xec>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	e001      	b.n	8003284 <HAL_GPIO_Init+0xf0>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3304      	adds	r3, #4
 8003284:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	2bff      	cmp	r3, #255	; 0xff
 800328a:	d802      	bhi.n	8003292 <HAL_GPIO_Init+0xfe>
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	e002      	b.n	8003298 <HAL_GPIO_Init+0x104>
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	3b08      	subs	r3, #8
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	210f      	movs	r1, #15
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	fa01 f303 	lsl.w	r3, r1, r3
 80032a6:	43db      	mvns	r3, r3
 80032a8:	401a      	ands	r2, r3
 80032aa:	6a39      	ldr	r1, [r7, #32]
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	fa01 f303 	lsl.w	r3, r1, r3
 80032b2:	431a      	orrs	r2, r3
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 80a2 	beq.w	800340a <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80032c6:	4b5f      	ldr	r3, [pc, #380]	; (8003444 <HAL_GPIO_Init+0x2b0>)
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	4a5e      	ldr	r2, [pc, #376]	; (8003444 <HAL_GPIO_Init+0x2b0>)
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	6193      	str	r3, [r2, #24]
 80032d2:	4b5c      	ldr	r3, [pc, #368]	; (8003444 <HAL_GPIO_Init+0x2b0>)
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	60bb      	str	r3, [r7, #8]
 80032dc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80032de:	4a5a      	ldr	r2, [pc, #360]	; (8003448 <HAL_GPIO_Init+0x2b4>)
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	089b      	lsrs	r3, r3, #2
 80032e4:	3302      	adds	r3, #2
 80032e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ea:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	220f      	movs	r2, #15
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	43db      	mvns	r3, r3
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	4013      	ands	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a51      	ldr	r2, [pc, #324]	; (800344c <HAL_GPIO_Init+0x2b8>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d01f      	beq.n	800334a <HAL_GPIO_Init+0x1b6>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a50      	ldr	r2, [pc, #320]	; (8003450 <HAL_GPIO_Init+0x2bc>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d019      	beq.n	8003346 <HAL_GPIO_Init+0x1b2>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a4f      	ldr	r2, [pc, #316]	; (8003454 <HAL_GPIO_Init+0x2c0>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d013      	beq.n	8003342 <HAL_GPIO_Init+0x1ae>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a4e      	ldr	r2, [pc, #312]	; (8003458 <HAL_GPIO_Init+0x2c4>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d00d      	beq.n	800333e <HAL_GPIO_Init+0x1aa>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a4d      	ldr	r2, [pc, #308]	; (800345c <HAL_GPIO_Init+0x2c8>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d007      	beq.n	800333a <HAL_GPIO_Init+0x1a6>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a4c      	ldr	r2, [pc, #304]	; (8003460 <HAL_GPIO_Init+0x2cc>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d101      	bne.n	8003336 <HAL_GPIO_Init+0x1a2>
 8003332:	2305      	movs	r3, #5
 8003334:	e00a      	b.n	800334c <HAL_GPIO_Init+0x1b8>
 8003336:	2306      	movs	r3, #6
 8003338:	e008      	b.n	800334c <HAL_GPIO_Init+0x1b8>
 800333a:	2304      	movs	r3, #4
 800333c:	e006      	b.n	800334c <HAL_GPIO_Init+0x1b8>
 800333e:	2303      	movs	r3, #3
 8003340:	e004      	b.n	800334c <HAL_GPIO_Init+0x1b8>
 8003342:	2302      	movs	r3, #2
 8003344:	e002      	b.n	800334c <HAL_GPIO_Init+0x1b8>
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <HAL_GPIO_Init+0x1b8>
 800334a:	2300      	movs	r3, #0
 800334c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800334e:	f002 0203 	and.w	r2, r2, #3
 8003352:	0092      	lsls	r2, r2, #2
 8003354:	4093      	lsls	r3, r2
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4313      	orrs	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800335c:	493a      	ldr	r1, [pc, #232]	; (8003448 <HAL_GPIO_Init+0x2b4>)
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	089b      	lsrs	r3, r3, #2
 8003362:	3302      	adds	r3, #2
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d006      	beq.n	8003384 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003376:	4b3b      	ldr	r3, [pc, #236]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	493a      	ldr	r1, [pc, #232]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	4313      	orrs	r3, r2
 8003380:	600b      	str	r3, [r1, #0]
 8003382:	e006      	b.n	8003392 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003384:	4b37      	ldr	r3, [pc, #220]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	43db      	mvns	r3, r3
 800338c:	4935      	ldr	r1, [pc, #212]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 800338e:	4013      	ands	r3, r2
 8003390:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d006      	beq.n	80033ac <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800339e:	4b31      	ldr	r3, [pc, #196]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	4930      	ldr	r1, [pc, #192]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	604b      	str	r3, [r1, #4]
 80033aa:	e006      	b.n	80033ba <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80033ac:	4b2d      	ldr	r3, [pc, #180]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	43db      	mvns	r3, r3
 80033b4:	492b      	ldr	r1, [pc, #172]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 80033b6:	4013      	ands	r3, r2
 80033b8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d006      	beq.n	80033d4 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80033c6:	4b27      	ldr	r3, [pc, #156]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 80033c8:	689a      	ldr	r2, [r3, #8]
 80033ca:	4926      	ldr	r1, [pc, #152]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	608b      	str	r3, [r1, #8]
 80033d2:	e006      	b.n	80033e2 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80033d4:	4b23      	ldr	r3, [pc, #140]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	43db      	mvns	r3, r3
 80033dc:	4921      	ldr	r1, [pc, #132]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 80033de:	4013      	ands	r3, r2
 80033e0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d006      	beq.n	80033fc <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80033ee:	4b1d      	ldr	r3, [pc, #116]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	491c      	ldr	r1, [pc, #112]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	60cb      	str	r3, [r1, #12]
 80033fa:	e006      	b.n	800340a <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033fc:	4b19      	ldr	r3, [pc, #100]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 80033fe:	68da      	ldr	r2, [r3, #12]
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	43db      	mvns	r3, r3
 8003404:	4917      	ldr	r1, [pc, #92]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 8003406:	4013      	ands	r3, r2
 8003408:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	3301      	adds	r3, #1
 800340e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	fa22 f303 	lsr.w	r3, r2, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	f47f aec4 	bne.w	80031a8 <HAL_GPIO_Init+0x14>
  }
}
 8003420:	bf00      	nop
 8003422:	372c      	adds	r7, #44	; 0x2c
 8003424:	46bd      	mov	sp, r7
 8003426:	bc80      	pop	{r7}
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	10210000 	.word	0x10210000
 8003430:	10110000 	.word	0x10110000
 8003434:	10120000 	.word	0x10120000
 8003438:	10310000 	.word	0x10310000
 800343c:	10320000 	.word	0x10320000
 8003440:	10220000 	.word	0x10220000
 8003444:	40021000 	.word	0x40021000
 8003448:	40010000 	.word	0x40010000
 800344c:	40010800 	.word	0x40010800
 8003450:	40010c00 	.word	0x40010c00
 8003454:	40011000 	.word	0x40011000
 8003458:	40011400 	.word	0x40011400
 800345c:	40011800 	.word	0x40011800
 8003460:	40011c00 	.word	0x40011c00
 8003464:	40010400 	.word	0x40010400

08003468 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003468:	b480      	push	{r7}
 800346a:	b089      	sub	sp, #36	; 0x24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003472:	2300      	movs	r3, #0
 8003474:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8003476:	e0a6      	b.n	80035c6 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003478:	2201      	movs	r2, #1
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	4013      	ands	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 8099 	beq.w	80035c0 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800348e:	4a54      	ldr	r2, [pc, #336]	; (80035e0 <HAL_GPIO_DeInit+0x178>)
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	089b      	lsrs	r3, r3, #2
 8003494:	3302      	adds	r3, #2
 8003496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800349a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	220f      	movs	r2, #15
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	4013      	ands	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a4c      	ldr	r2, [pc, #304]	; (80035e4 <HAL_GPIO_DeInit+0x17c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d01f      	beq.n	80034f8 <HAL_GPIO_DeInit+0x90>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a4b      	ldr	r2, [pc, #300]	; (80035e8 <HAL_GPIO_DeInit+0x180>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d019      	beq.n	80034f4 <HAL_GPIO_DeInit+0x8c>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a4a      	ldr	r2, [pc, #296]	; (80035ec <HAL_GPIO_DeInit+0x184>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d013      	beq.n	80034f0 <HAL_GPIO_DeInit+0x88>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a49      	ldr	r2, [pc, #292]	; (80035f0 <HAL_GPIO_DeInit+0x188>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d00d      	beq.n	80034ec <HAL_GPIO_DeInit+0x84>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a48      	ldr	r2, [pc, #288]	; (80035f4 <HAL_GPIO_DeInit+0x18c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d007      	beq.n	80034e8 <HAL_GPIO_DeInit+0x80>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a47      	ldr	r2, [pc, #284]	; (80035f8 <HAL_GPIO_DeInit+0x190>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d101      	bne.n	80034e4 <HAL_GPIO_DeInit+0x7c>
 80034e0:	2305      	movs	r3, #5
 80034e2:	e00a      	b.n	80034fa <HAL_GPIO_DeInit+0x92>
 80034e4:	2306      	movs	r3, #6
 80034e6:	e008      	b.n	80034fa <HAL_GPIO_DeInit+0x92>
 80034e8:	2304      	movs	r3, #4
 80034ea:	e006      	b.n	80034fa <HAL_GPIO_DeInit+0x92>
 80034ec:	2303      	movs	r3, #3
 80034ee:	e004      	b.n	80034fa <HAL_GPIO_DeInit+0x92>
 80034f0:	2302      	movs	r3, #2
 80034f2:	e002      	b.n	80034fa <HAL_GPIO_DeInit+0x92>
 80034f4:	2301      	movs	r3, #1
 80034f6:	e000      	b.n	80034fa <HAL_GPIO_DeInit+0x92>
 80034f8:	2300      	movs	r3, #0
 80034fa:	69fa      	ldr	r2, [r7, #28]
 80034fc:	f002 0203 	and.w	r2, r2, #3
 8003500:	0092      	lsls	r2, r2, #2
 8003502:	4093      	lsls	r3, r2
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	429a      	cmp	r2, r3
 8003508:	d132      	bne.n	8003570 <HAL_GPIO_DeInit+0x108>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	f003 0303 	and.w	r3, r3, #3
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	220f      	movs	r2, #15
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800351a:	4a31      	ldr	r2, [pc, #196]	; (80035e0 <HAL_GPIO_DeInit+0x178>)
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	089b      	lsrs	r3, r3, #2
 8003520:	3302      	adds	r3, #2
 8003522:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	43da      	mvns	r2, r3
 800352a:	482d      	ldr	r0, [pc, #180]	; (80035e0 <HAL_GPIO_DeInit+0x178>)
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	089b      	lsrs	r3, r3, #2
 8003530:	400a      	ands	r2, r1
 8003532:	3302      	adds	r3, #2
 8003534:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8003538:	4b30      	ldr	r3, [pc, #192]	; (80035fc <HAL_GPIO_DeInit+0x194>)
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	43db      	mvns	r3, r3
 8003540:	492e      	ldr	r1, [pc, #184]	; (80035fc <HAL_GPIO_DeInit+0x194>)
 8003542:	4013      	ands	r3, r2
 8003544:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8003546:	4b2d      	ldr	r3, [pc, #180]	; (80035fc <HAL_GPIO_DeInit+0x194>)
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	43db      	mvns	r3, r3
 800354e:	492b      	ldr	r1, [pc, #172]	; (80035fc <HAL_GPIO_DeInit+0x194>)
 8003550:	4013      	ands	r3, r2
 8003552:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8003554:	4b29      	ldr	r3, [pc, #164]	; (80035fc <HAL_GPIO_DeInit+0x194>)
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	43db      	mvns	r3, r3
 800355c:	4927      	ldr	r1, [pc, #156]	; (80035fc <HAL_GPIO_DeInit+0x194>)
 800355e:	4013      	ands	r3, r2
 8003560:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8003562:	4b26      	ldr	r3, [pc, #152]	; (80035fc <HAL_GPIO_DeInit+0x194>)
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	43db      	mvns	r3, r3
 800356a:	4924      	ldr	r1, [pc, #144]	; (80035fc <HAL_GPIO_DeInit+0x194>)
 800356c:	4013      	ands	r3, r2
 800356e:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	2bff      	cmp	r3, #255	; 0xff
 8003574:	d801      	bhi.n	800357a <HAL_GPIO_DeInit+0x112>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	e001      	b.n	800357e <HAL_GPIO_DeInit+0x116>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	3304      	adds	r3, #4
 800357e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	2bff      	cmp	r3, #255	; 0xff
 8003584:	d802      	bhi.n	800358c <HAL_GPIO_DeInit+0x124>
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	e002      	b.n	8003592 <HAL_GPIO_DeInit+0x12a>
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	3b08      	subs	r3, #8
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	210f      	movs	r1, #15
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	fa01 f303 	lsl.w	r3, r1, r3
 80035a0:	43db      	mvns	r3, r3
 80035a2:	401a      	ands	r2, r3
 80035a4:	2104      	movs	r1, #4
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	fa01 f303 	lsl.w	r3, r1, r3
 80035ac:	431a      	orrs	r2, r3
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	43db      	mvns	r3, r3
 80035ba:	401a      	ands	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	60da      	str	r2, [r3, #12]
    }

    position++;
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	3301      	adds	r3, #1
 80035c4:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	fa22 f303 	lsr.w	r3, r2, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f47f af52 	bne.w	8003478 <HAL_GPIO_DeInit+0x10>
  }
}
 80035d4:	bf00      	nop
 80035d6:	3724      	adds	r7, #36	; 0x24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bc80      	pop	{r7}
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	40010000 	.word	0x40010000
 80035e4:	40010800 	.word	0x40010800
 80035e8:	40010c00 	.word	0x40010c00
 80035ec:	40011000 	.word	0x40011000
 80035f0:	40011400 	.word	0x40011400
 80035f4:	40011800 	.word	0x40011800
 80035f8:	40011c00 	.word	0x40011c00
 80035fc:	40010400 	.word	0x40010400

08003600 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	460b      	mov	r3, r1
 800360a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	887b      	ldrh	r3, [r7, #2]
 8003612:	4013      	ands	r3, r2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d002      	beq.n	800361e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003618:	2301      	movs	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
 800361c:	e001      	b.n	8003622 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800361e:	2300      	movs	r3, #0
 8003620:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003622:	7bfb      	ldrb	r3, [r7, #15]
}
 8003624:	4618      	mov	r0, r3
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr

0800362e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
 8003636:	460b      	mov	r3, r1
 8003638:	807b      	strh	r3, [r7, #2]
 800363a:	4613      	mov	r3, r2
 800363c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800363e:	787b      	ldrb	r3, [r7, #1]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d003      	beq.n	800364c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003644:	887a      	ldrh	r2, [r7, #2]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800364a:	e003      	b.n	8003654 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800364c:	887b      	ldrh	r3, [r7, #2]
 800364e:	041a      	lsls	r2, r3, #16
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	611a      	str	r2, [r3, #16]
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr

0800365e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800365e:	b480      	push	{r7}
 8003660:	b085      	sub	sp, #20
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
 8003666:	460b      	mov	r3, r1
 8003668:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003670:	887a      	ldrh	r2, [r7, #2]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4013      	ands	r3, r2
 8003676:	041a      	lsls	r2, r3, #16
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	43d9      	mvns	r1, r3
 800367c:	887b      	ldrh	r3, [r7, #2]
 800367e:	400b      	ands	r3, r1
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	611a      	str	r2, [r3, #16]
}
 8003686:	bf00      	nop
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	bc80      	pop	{r7}
 800368e:	4770      	bx	lr

08003690 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	4603      	mov	r3, r0
 8003698:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800369a:	4b08      	ldr	r3, [pc, #32]	; (80036bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800369c:	695a      	ldr	r2, [r3, #20]
 800369e:	88fb      	ldrh	r3, [r7, #6]
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d006      	beq.n	80036b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036a6:	4a05      	ldr	r2, [pc, #20]	; (80036bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036a8:	88fb      	ldrh	r3, [r7, #6]
 80036aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036ac:	88fb      	ldrh	r3, [r7, #6]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fd fdc0 	bl	8001234 <HAL_GPIO_EXTI_Callback>
  }
}
 80036b4:	bf00      	nop
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40010400 	.word	0x40010400

080036c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80036c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036c2:	b08b      	sub	sp, #44	; 0x2c
 80036c4:	af06      	add	r7, sp, #24
 80036c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e0fd      	b.n	80038ce <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d106      	bne.n	80036ec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f00c f826 	bl	800f738 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2203      	movs	r2, #3
 80036f0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f005 f933 	bl	8008964 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	603b      	str	r3, [r7, #0]
 8003704:	687e      	ldr	r6, [r7, #4]
 8003706:	466d      	mov	r5, sp
 8003708:	f106 0410 	add.w	r4, r6, #16
 800370c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800370e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003710:	6823      	ldr	r3, [r4, #0]
 8003712:	602b      	str	r3, [r5, #0]
 8003714:	1d33      	adds	r3, r6, #4
 8003716:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003718:	6838      	ldr	r0, [r7, #0]
 800371a:	f005 f8fd 	bl	8008918 <USB_CoreInit>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d005      	beq.n	8003730 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2202      	movs	r2, #2
 8003728:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e0ce      	b.n	80038ce <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2100      	movs	r1, #0
 8003736:	4618      	mov	r0, r3
 8003738:	f005 f92e 	bl	8008998 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800373c:	2300      	movs	r3, #0
 800373e:	73fb      	strb	r3, [r7, #15]
 8003740:	e04c      	b.n	80037dc <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003742:	7bfb      	ldrb	r3, [r7, #15]
 8003744:	6879      	ldr	r1, [r7, #4]
 8003746:	1c5a      	adds	r2, r3, #1
 8003748:	4613      	mov	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	440b      	add	r3, r1
 8003752:	3301      	adds	r3, #1
 8003754:	2201      	movs	r2, #1
 8003756:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003758:	7bfb      	ldrb	r3, [r7, #15]
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	4613      	mov	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4413      	add	r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	440b      	add	r3, r1
 8003768:	7bfa      	ldrb	r2, [r7, #15]
 800376a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800376c:	7bfa      	ldrb	r2, [r7, #15]
 800376e:	7bfb      	ldrb	r3, [r7, #15]
 8003770:	b298      	uxth	r0, r3
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	4613      	mov	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	440b      	add	r3, r1
 800377e:	3336      	adds	r3, #54	; 0x36
 8003780:	4602      	mov	r2, r0
 8003782:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003784:	7bfb      	ldrb	r3, [r7, #15]
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	1c5a      	adds	r2, r3, #1
 800378a:	4613      	mov	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	440b      	add	r3, r1
 8003794:	3303      	adds	r3, #3
 8003796:	2200      	movs	r2, #0
 8003798:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800379a:	7bfa      	ldrb	r2, [r7, #15]
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	4613      	mov	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	440b      	add	r3, r1
 80037a8:	3338      	adds	r3, #56	; 0x38
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80037ae:	7bfa      	ldrb	r2, [r7, #15]
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	4613      	mov	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	440b      	add	r3, r1
 80037bc:	333c      	adds	r3, #60	; 0x3c
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037c2:	7bfa      	ldrb	r2, [r7, #15]
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	4613      	mov	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4413      	add	r3, r2
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	440b      	add	r3, r1
 80037d0:	3340      	adds	r3, #64	; 0x40
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037d6:	7bfb      	ldrb	r3, [r7, #15]
 80037d8:	3301      	adds	r3, #1
 80037da:	73fb      	strb	r3, [r7, #15]
 80037dc:	7bfa      	ldrb	r2, [r7, #15]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d3ad      	bcc.n	8003742 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037e6:	2300      	movs	r3, #0
 80037e8:	73fb      	strb	r3, [r7, #15]
 80037ea:	e044      	b.n	8003876 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037ec:	7bfa      	ldrb	r2, [r7, #15]
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	4613      	mov	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	440b      	add	r3, r1
 80037fa:	f203 1369 	addw	r3, r3, #361	; 0x169
 80037fe:	2200      	movs	r2, #0
 8003800:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003802:	7bfa      	ldrb	r2, [r7, #15]
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	4613      	mov	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4413      	add	r3, r2
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	440b      	add	r3, r1
 8003810:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003814:	7bfa      	ldrb	r2, [r7, #15]
 8003816:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003818:	7bfa      	ldrb	r2, [r7, #15]
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	440b      	add	r3, r1
 8003826:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800382a:	2200      	movs	r2, #0
 800382c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800382e:	7bfa      	ldrb	r2, [r7, #15]
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	4613      	mov	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	440b      	add	r3, r1
 800383c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003844:	7bfa      	ldrb	r2, [r7, #15]
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	4613      	mov	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	440b      	add	r3, r1
 8003852:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800385a:	7bfa      	ldrb	r2, [r7, #15]
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	440b      	add	r3, r1
 8003868:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003870:	7bfb      	ldrb	r3, [r7, #15]
 8003872:	3301      	adds	r3, #1
 8003874:	73fb      	strb	r3, [r7, #15]
 8003876:	7bfa      	ldrb	r2, [r7, #15]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	429a      	cmp	r2, r3
 800387e:	d3b5      	bcc.n	80037ec <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	603b      	str	r3, [r7, #0]
 8003886:	687e      	ldr	r6, [r7, #4]
 8003888:	466d      	mov	r5, sp
 800388a:	f106 0410 	add.w	r4, r6, #16
 800388e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003890:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	602b      	str	r3, [r5, #0]
 8003896:	1d33      	adds	r3, r6, #4
 8003898:	cb0e      	ldmia	r3, {r1, r2, r3}
 800389a:	6838      	ldr	r0, [r7, #0]
 800389c:	f005 f888 	bl	80089b0 <USB_DevInit>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d005      	beq.n	80038b2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2202      	movs	r2, #2
 80038aa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e00d      	b.n	80038ce <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f007 f822 	bl	800a910 <USB_DevDisconnect>

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3714      	adds	r7, #20
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038d6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b082      	sub	sp, #8
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_PCD_Start+0x16>
 80038e8:	2302      	movs	r3, #2
 80038ea:	e016      	b.n	800391a <HAL_PCD_Start+0x44>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f005 f81d 	bl	8008938 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80038fe:	2101      	movs	r1, #1
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f00c f98c 	bl	800fc1e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f006 fff6 	bl	800a8fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b088      	sub	sp, #32
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f006 fff8 	bl	800a924 <USB_ReadInterrupts>
 8003934:	4603      	mov	r3, r0
 8003936:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800393a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800393e:	d102      	bne.n	8003946 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 fb61 	bl	8004008 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f006 ffea 	bl	800a924 <USB_ReadInterrupts>
 8003950:	4603      	mov	r3, r0
 8003952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800395a:	d112      	bne.n	8003982 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003964:	b29a      	uxth	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800396e:	b292      	uxth	r2, r2
 8003970:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f00b ff5a 	bl	800f82e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800397a:	2100      	movs	r1, #0
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 f925 	bl	8003bcc <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f006 ffcc 	bl	800a924 <USB_ReadInterrupts>
 800398c:	4603      	mov	r3, r0
 800398e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003992:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003996:	d10b      	bne.n	80039b0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039aa:	b292      	uxth	r2, r2
 80039ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f006 ffb5 	bl	800a924 <USB_ReadInterrupts>
 80039ba:	4603      	mov	r3, r0
 80039bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039c4:	d10b      	bne.n	80039de <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039d8:	b292      	uxth	r2, r2
 80039da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f006 ff9e 	bl	800a924 <USB_ReadInterrupts>
 80039e8:	4603      	mov	r3, r0
 80039ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f2:	d126      	bne.n	8003a42 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0204 	bic.w	r2, r2, #4
 8003a06:	b292      	uxth	r2, r2
 8003a08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0208 	bic.w	r2, r2, #8
 8003a1e:	b292      	uxth	r2, r2
 8003a20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f00b ff3b 	bl	800f8a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a3c:	b292      	uxth	r2, r2
 8003a3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f006 ff6c 	bl	800a924 <USB_ReadInterrupts>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a56:	f040 8084 	bne.w	8003b62 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	77fb      	strb	r3, [r7, #31]
 8003a5e:	e011      	b.n	8003a84 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	461a      	mov	r2, r3
 8003a66:	7ffb      	ldrb	r3, [r7, #31]
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	441a      	add	r2, r3
 8003a6c:	7ffb      	ldrb	r3, [r7, #31]
 8003a6e:	8812      	ldrh	r2, [r2, #0]
 8003a70:	b292      	uxth	r2, r2
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	f107 0120 	add.w	r1, r7, #32
 8003a78:	440b      	add	r3, r1
 8003a7a:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8003a7e:	7ffb      	ldrb	r3, [r7, #31]
 8003a80:	3301      	adds	r3, #1
 8003a82:	77fb      	strb	r3, [r7, #31]
 8003a84:	7ffb      	ldrb	r3, [r7, #31]
 8003a86:	2b07      	cmp	r3, #7
 8003a88:	d9ea      	bls.n	8003a60 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f042 0201 	orr.w	r2, r2, #1
 8003a9c:	b292      	uxth	r2, r2
 8003a9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0201 	bic.w	r2, r2, #1
 8003ab4:	b292      	uxth	r2, r2
 8003ab6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003aba:	bf00      	nop
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0f6      	beq.n	8003abc <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae0:	b292      	uxth	r2, r2
 8003ae2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	77fb      	strb	r3, [r7, #31]
 8003aea:	e010      	b.n	8003b0e <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003aec:	7ffb      	ldrb	r3, [r7, #31]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6812      	ldr	r2, [r2, #0]
 8003af2:	4611      	mov	r1, r2
 8003af4:	7ffa      	ldrb	r2, [r7, #31]
 8003af6:	0092      	lsls	r2, r2, #2
 8003af8:	440a      	add	r2, r1
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	f107 0120 	add.w	r1, r7, #32
 8003b00:	440b      	add	r3, r1
 8003b02:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003b06:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003b08:	7ffb      	ldrb	r3, [r7, #31]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	77fb      	strb	r3, [r7, #31]
 8003b0e:	7ffb      	ldrb	r3, [r7, #31]
 8003b10:	2b07      	cmp	r3, #7
 8003b12:	d9eb      	bls.n	8003aec <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0208 	orr.w	r2, r2, #8
 8003b26:	b292      	uxth	r2, r2
 8003b28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b3e:	b292      	uxth	r2, r2
 8003b40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f042 0204 	orr.w	r2, r2, #4
 8003b56:	b292      	uxth	r2, r2
 8003b58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f00b fe85 	bl	800f86c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f006 fedc 	bl	800a924 <USB_ReadInterrupts>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b76:	d10e      	bne.n	8003b96 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b8a:	b292      	uxth	r2, r2
 8003b8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f00b fe3e 	bl	800f812 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f006 fec2 	bl	800a924 <USB_ReadInterrupts>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003baa:	d10b      	bne.n	8003bc4 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bbe:	b292      	uxth	r2, r2
 8003bc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003bc4:	bf00      	nop
 8003bc6:	3720      	adds	r7, #32
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_PCD_SetAddress+0x1a>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e013      	b.n	8003c0e <HAL_PCD_SetAddress+0x42>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	78fa      	ldrb	r2, [r7, #3]
 8003bf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	78fa      	ldrb	r2, [r7, #3]
 8003bfc:	4611      	mov	r1, r2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f006 fe69 	bl	800a8d6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b084      	sub	sp, #16
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	4608      	mov	r0, r1
 8003c20:	4611      	mov	r1, r2
 8003c22:	461a      	mov	r2, r3
 8003c24:	4603      	mov	r3, r0
 8003c26:	70fb      	strb	r3, [r7, #3]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	803b      	strh	r3, [r7, #0]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003c30:	2300      	movs	r3, #0
 8003c32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	da0e      	bge.n	8003c5a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c3c:	78fb      	ldrb	r3, [r7, #3]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	4613      	mov	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	4413      	add	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2201      	movs	r2, #1
 8003c56:	705a      	strb	r2, [r3, #1]
 8003c58:	e00e      	b.n	8003c78 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c5a:	78fb      	ldrb	r3, [r7, #3]
 8003c5c:	f003 0207 	and.w	r2, r3, #7
 8003c60:	4613      	mov	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	4413      	add	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c78:	78fb      	ldrb	r3, [r7, #3]
 8003c7a:	f003 0307 	and.w	r3, r3, #7
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003c84:	883a      	ldrh	r2, [r7, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	78ba      	ldrb	r2, [r7, #2]
 8003c8e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	785b      	ldrb	r3, [r3, #1]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d004      	beq.n	8003ca2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ca2:	78bb      	ldrb	r3, [r7, #2]
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d102      	bne.n	8003cae <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d101      	bne.n	8003cbc <HAL_PCD_EP_Open+0xa6>
 8003cb8:	2302      	movs	r3, #2
 8003cba:	e00e      	b.n	8003cda <HAL_PCD_EP_Open+0xc4>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68f9      	ldr	r1, [r7, #12]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f004 fe90 	bl	80089f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003cd8:	7afb      	ldrb	r3, [r7, #11]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b084      	sub	sp, #16
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	460b      	mov	r3, r1
 8003cec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003cee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	da0e      	bge.n	8003d14 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cf6:	78fb      	ldrb	r3, [r7, #3]
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	1c5a      	adds	r2, r3, #1
 8003cfe:	4613      	mov	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	4413      	add	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	705a      	strb	r2, [r3, #1]
 8003d12:	e00e      	b.n	8003d32 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d14:	78fb      	ldrb	r3, [r7, #3]
 8003d16:	f003 0207 	and.w	r2, r3, #7
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	4413      	add	r3, r2
 8003d2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003d32:	78fb      	ldrb	r3, [r7, #3]
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d101      	bne.n	8003d4c <HAL_PCD_EP_Close+0x6a>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	e00e      	b.n	8003d6a <HAL_PCD_EP_Close+0x88>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68f9      	ldr	r1, [r7, #12]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f005 f9b2 	bl	80090c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b086      	sub	sp, #24
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	60f8      	str	r0, [r7, #12]
 8003d7a:	607a      	str	r2, [r7, #4]
 8003d7c:	603b      	str	r3, [r7, #0]
 8003d7e:	460b      	mov	r3, r1
 8003d80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d82:	7afb      	ldrb	r3, [r7, #11]
 8003d84:	f003 0207 	and.w	r2, r3, #7
 8003d88:	4613      	mov	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4413      	add	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2200      	movs	r2, #0
 8003daa:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	2200      	movs	r2, #0
 8003db0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003db2:	7afb      	ldrb	r3, [r7, #11]
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003dbe:	7afb      	ldrb	r3, [r7, #11]
 8003dc0:	f003 0307 	and.w	r3, r3, #7
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d106      	bne.n	8003dd6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6979      	ldr	r1, [r7, #20]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f005 fb64 	bl	800949c <USB_EPStartXfer>
 8003dd4:	e005      	b.n	8003de2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	6979      	ldr	r1, [r7, #20]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f005 fb5d 	bl	800949c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3718      	adds	r7, #24
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	460b      	mov	r3, r1
 8003df6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003df8:	78fb      	ldrb	r3, [r7, #3]
 8003dfa:	f003 0207 	and.w	r2, r3, #7
 8003dfe:	6879      	ldr	r1, [r7, #4]
 8003e00:	4613      	mov	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	440b      	add	r3, r1
 8003e0a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003e0e:	681b      	ldr	r3, [r3, #0]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bc80      	pop	{r7}
 8003e18:	4770      	bx	lr

08003e1a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b086      	sub	sp, #24
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	60f8      	str	r0, [r7, #12]
 8003e22:	607a      	str	r2, [r7, #4]
 8003e24:	603b      	str	r3, [r7, #0]
 8003e26:	460b      	mov	r3, r1
 8003e28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e2a:	7afb      	ldrb	r3, [r7, #11]
 8003e2c:	f003 0307 	and.w	r3, r3, #7
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	4613      	mov	r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	2201      	movs	r2, #1
 8003e64:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e66:	7afb      	ldrb	r3, [r7, #11]
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e72:	7afb      	ldrb	r3, [r7, #11]
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d106      	bne.n	8003e8a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6979      	ldr	r1, [r7, #20]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f005 fb0a 	bl	800949c <USB_EPStartXfer>
 8003e88:	e005      	b.n	8003e96 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6979      	ldr	r1, [r7, #20]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f005 fb03 	bl	800949c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3718      	adds	r7, #24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003eac:	78fb      	ldrb	r3, [r7, #3]
 8003eae:	f003 0207 	and.w	r2, r3, #7
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d901      	bls.n	8003ebe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e04c      	b.n	8003f58 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ebe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	da0e      	bge.n	8003ee4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ec6:	78fb      	ldrb	r3, [r7, #3]
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	1c5a      	adds	r2, r3, #1
 8003ece:	4613      	mov	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	4413      	add	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	705a      	strb	r2, [r3, #1]
 8003ee2:	e00c      	b.n	8003efe <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ee4:	78fa      	ldrb	r2, [r7, #3]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2201      	movs	r2, #1
 8003f02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f04:	78fb      	ldrb	r3, [r7, #3]
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d101      	bne.n	8003f1e <HAL_PCD_EP_SetStall+0x7e>
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	e01c      	b.n	8003f58 <HAL_PCD_EP_SetStall+0xb8>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68f9      	ldr	r1, [r7, #12]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f006 fbd5 	bl	800a6dc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f32:	78fb      	ldrb	r3, [r7, #3]
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d108      	bne.n	8003f4e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003f46:	4619      	mov	r1, r3
 8003f48:	4610      	mov	r0, r2
 8003f4a:	f006 fcfa 	bl	800a942 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003f6c:	78fb      	ldrb	r3, [r7, #3]
 8003f6e:	f003 020f 	and.w	r2, r3, #15
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d901      	bls.n	8003f7e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e040      	b.n	8004000 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	da0e      	bge.n	8003fa4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f86:	78fb      	ldrb	r3, [r7, #3]
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	4613      	mov	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4413      	add	r3, r2
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	4413      	add	r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	705a      	strb	r2, [r3, #1]
 8003fa2:	e00e      	b.n	8003fc2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fa4:	78fb      	ldrb	r3, [r7, #3]
 8003fa6:	f003 0207 	and.w	r2, r3, #7
 8003faa:	4613      	mov	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4413      	add	r3, r2
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	4413      	add	r3, r2
 8003fba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fc8:	78fb      	ldrb	r3, [r7, #3]
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d101      	bne.n	8003fe2 <HAL_PCD_EP_ClrStall+0x82>
 8003fde:	2302      	movs	r3, #2
 8003fe0:	e00e      	b.n	8004000 <HAL_PCD_EP_ClrStall+0xa0>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68f9      	ldr	r1, [r7, #12]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f006 fbc3 	bl	800a77c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b08e      	sub	sp, #56	; 0x38
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004010:	e2df      	b.n	80045d2 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800401a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800401c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800401e:	b2db      	uxtb	r3, r3
 8004020:	f003 030f 	and.w	r3, r3, #15
 8004024:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004028:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800402c:	2b00      	cmp	r3, #0
 800402e:	f040 8158 	bne.w	80042e2 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004032:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004034:	f003 0310 	and.w	r3, r3, #16
 8004038:	2b00      	cmp	r3, #0
 800403a:	d152      	bne.n	80040e2 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	b29b      	uxth	r3, r3
 8004044:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800404c:	81fb      	strh	r3, [r7, #14]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	89fb      	ldrh	r3, [r7, #14]
 8004054:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004058:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800405c:	b29b      	uxth	r3, r3
 800405e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3328      	adds	r3, #40	; 0x28
 8004064:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800406e:	b29b      	uxth	r3, r3
 8004070:	461a      	mov	r2, r3
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	4413      	add	r3, r2
 800407a:	3302      	adds	r3, #2
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6812      	ldr	r2, [r2, #0]
 8004082:	4413      	add	r3, r2
 8004084:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	695a      	ldr	r2, [r3, #20]
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	441a      	add	r2, r3
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80040a0:	2100      	movs	r1, #0
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f00b fb9b 	bl	800f7de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 828e 	beq.w	80045d2 <PCD_EP_ISR_Handler+0x5ca>
 80040b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f040 8289 	bne.w	80045d2 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	b292      	uxth	r2, r2
 80040d4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80040e0:	e277      	b.n	80045d2 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80040e8:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80040f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80040f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d034      	beq.n	8004166 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004104:	b29b      	uxth	r3, r3
 8004106:	461a      	mov	r2, r3
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	4413      	add	r3, r2
 8004110:	3306      	adds	r3, #6
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	6812      	ldr	r2, [r2, #0]
 8004118:	4413      	add	r3, r2
 800411a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6818      	ldr	r0, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800413a:	b29b      	uxth	r3, r3
 800413c:	f006 fc50 	bl	800a9e0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	b29a      	uxth	r2, r3
 8004148:	f640 738f 	movw	r3, #3983	; 0xf8f
 800414c:	4013      	ands	r3, r2
 800414e:	823b      	strh	r3, [r7, #16]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	8a3a      	ldrh	r2, [r7, #16]
 8004156:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800415a:	b292      	uxth	r2, r2
 800415c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f00b fb10 	bl	800f784 <HAL_PCD_SetupStageCallback>
 8004164:	e235      	b.n	80045d2 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004166:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800416a:	2b00      	cmp	r3, #0
 800416c:	f280 8231 	bge.w	80045d2 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	b29a      	uxth	r2, r3
 8004178:	f640 738f 	movw	r3, #3983	; 0xf8f
 800417c:	4013      	ands	r3, r2
 800417e:	83bb      	strh	r3, [r7, #28]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	8bba      	ldrh	r2, [r7, #28]
 8004186:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800418a:	b292      	uxth	r2, r2
 800418c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004196:	b29b      	uxth	r3, r3
 8004198:	461a      	mov	r2, r3
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	4413      	add	r3, r2
 80041a2:	3306      	adds	r3, #6
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6812      	ldr	r2, [r2, #0]
 80041aa:	4413      	add	r3, r2
 80041ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041b0:	881b      	ldrh	r3, [r3, #0]
 80041b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d019      	beq.n	80041f6 <PCD_EP_ISR_Handler+0x1ee>
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d015      	beq.n	80041f6 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6818      	ldr	r0, [r3, #0]
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	6959      	ldr	r1, [r3, #20]
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80041da:	b29b      	uxth	r3, r3
 80041dc:	f006 fc00 	bl	800a9e0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	695a      	ldr	r2, [r3, #20]
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	441a      	add	r2, r3
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80041ee:	2100      	movs	r1, #0
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f00b fad9 	bl	800f7a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	61bb      	str	r3, [r7, #24]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004204:	b29b      	uxth	r3, r3
 8004206:	461a      	mov	r2, r3
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	4413      	add	r3, r2
 800420c:	61bb      	str	r3, [r7, #24]
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004214:	617b      	str	r3, [r7, #20]
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d112      	bne.n	8004244 <PCD_EP_ISR_Handler+0x23c>
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	881b      	ldrh	r3, [r3, #0]
 8004222:	b29b      	uxth	r3, r3
 8004224:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004228:	b29a      	uxth	r2, r3
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	801a      	strh	r2, [r3, #0]
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	b29b      	uxth	r3, r3
 8004234:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004238:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800423c:	b29a      	uxth	r2, r3
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	801a      	strh	r2, [r3, #0]
 8004242:	e02f      	b.n	80042a4 <PCD_EP_ISR_Handler+0x29c>
 8004244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	2b3e      	cmp	r3, #62	; 0x3e
 800424a:	d813      	bhi.n	8004274 <PCD_EP_ISR_Handler+0x26c>
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	085b      	lsrs	r3, r3, #1
 8004252:	633b      	str	r3, [r7, #48]	; 0x30
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b00      	cmp	r3, #0
 800425e:	d002      	beq.n	8004266 <PCD_EP_ISR_Handler+0x25e>
 8004260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004262:	3301      	adds	r3, #1
 8004264:	633b      	str	r3, [r7, #48]	; 0x30
 8004266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004268:	b29b      	uxth	r3, r3
 800426a:	029b      	lsls	r3, r3, #10
 800426c:	b29a      	uxth	r2, r3
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	801a      	strh	r2, [r3, #0]
 8004272:	e017      	b.n	80042a4 <PCD_EP_ISR_Handler+0x29c>
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	095b      	lsrs	r3, r3, #5
 800427a:	633b      	str	r3, [r7, #48]	; 0x30
 800427c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	f003 031f 	and.w	r3, r3, #31
 8004284:	2b00      	cmp	r3, #0
 8004286:	d102      	bne.n	800428e <PCD_EP_ISR_Handler+0x286>
 8004288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428a:	3b01      	subs	r3, #1
 800428c:	633b      	str	r3, [r7, #48]	; 0x30
 800428e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004290:	b29b      	uxth	r3, r3
 8004292:	029b      	lsls	r3, r3, #10
 8004294:	b29b      	uxth	r3, r3
 8004296:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800429a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800429e:	b29a      	uxth	r2, r3
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	881b      	ldrh	r3, [r3, #0]
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b4:	827b      	strh	r3, [r7, #18]
 80042b6:	8a7b      	ldrh	r3, [r7, #18]
 80042b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80042bc:	827b      	strh	r3, [r7, #18]
 80042be:	8a7b      	ldrh	r3, [r7, #18]
 80042c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80042c4:	827b      	strh	r3, [r7, #18]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	8a7b      	ldrh	r3, [r7, #18]
 80042cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042dc:	b29b      	uxth	r3, r3
 80042de:	8013      	strh	r3, [r2, #0]
 80042e0:	e177      	b.n	80045d2 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	461a      	mov	r2, r3
 80042e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	881b      	ldrh	r3, [r3, #0]
 80042f2:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80042f4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f280 80ea 	bge.w	80044d2 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	461a      	mov	r2, r3
 8004304:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	b29a      	uxth	r2, r3
 8004310:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004314:	4013      	ands	r3, r2
 8004316:	853b      	strh	r3, [r7, #40]	; 0x28
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	461a      	mov	r2, r3
 800431e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004328:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800432c:	b292      	uxth	r2, r2
 800432e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004330:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004334:	4613      	mov	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	4413      	add	r3, r2
 8004344:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	7b1b      	ldrb	r3, [r3, #12]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d122      	bne.n	8004394 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004356:	b29b      	uxth	r3, r3
 8004358:	461a      	mov	r2, r3
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	4413      	add	r3, r2
 8004362:	3306      	adds	r3, #6
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6812      	ldr	r2, [r2, #0]
 800436a:	4413      	add	r3, r2
 800436c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004376:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004378:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800437a:	2b00      	cmp	r3, #0
 800437c:	f000 8087 	beq.w	800448e <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6818      	ldr	r0, [r3, #0]
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	6959      	ldr	r1, [r3, #20]
 8004388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438a:	88da      	ldrh	r2, [r3, #6]
 800438c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800438e:	f006 fb27 	bl	800a9e0 <USB_ReadPMA>
 8004392:	e07c      	b.n	800448e <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004396:	78db      	ldrb	r3, [r3, #3]
 8004398:	2b02      	cmp	r3, #2
 800439a:	d108      	bne.n	80043ae <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800439c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800439e:	461a      	mov	r2, r3
 80043a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f923 	bl	80045ee <HAL_PCD_EP_DB_Receive>
 80043a8:	4603      	mov	r3, r0
 80043aa:	86fb      	strh	r3, [r7, #54]	; 0x36
 80043ac:	e06f      	b.n	800448e <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	461a      	mov	r2, r3
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	b29b      	uxth	r3, r3
 80043c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c8:	847b      	strh	r3, [r7, #34]	; 0x22
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	461a      	mov	r2, r3
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	441a      	add	r2, r3
 80043d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80043da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	461a      	mov	r2, r3
 80043f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	881b      	ldrh	r3, [r3, #0]
 80043fe:	b29b      	uxth	r3, r3
 8004400:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d021      	beq.n	800444c <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004410:	b29b      	uxth	r3, r3
 8004412:	461a      	mov	r2, r3
 8004414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	4413      	add	r3, r2
 800441c:	3302      	adds	r3, #2
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6812      	ldr	r2, [r2, #0]
 8004424:	4413      	add	r3, r2
 8004426:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800442a:	881b      	ldrh	r3, [r3, #0]
 800442c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004430:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004432:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004434:	2b00      	cmp	r3, #0
 8004436:	d02a      	beq.n	800448e <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6818      	ldr	r0, [r3, #0]
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	6959      	ldr	r1, [r3, #20]
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	891a      	ldrh	r2, [r3, #8]
 8004444:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004446:	f006 facb 	bl	800a9e0 <USB_ReadPMA>
 800444a:	e020      	b.n	800448e <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004454:	b29b      	uxth	r3, r3
 8004456:	461a      	mov	r2, r3
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	4413      	add	r3, r2
 8004460:	3306      	adds	r3, #6
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6812      	ldr	r2, [r2, #0]
 8004468:	4413      	add	r3, r2
 800446a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004474:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004476:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004478:	2b00      	cmp	r3, #0
 800447a:	d008      	beq.n	800448e <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6818      	ldr	r0, [r3, #0]
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004482:	6959      	ldr	r1, [r3, #20]
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	895a      	ldrh	r2, [r3, #10]
 8004488:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800448a:	f006 faa9 	bl	800a9e0 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	69da      	ldr	r2, [r3, #28]
 8004492:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004494:	441a      	add	r2, r3
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004498:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	695a      	ldr	r2, [r3, #20]
 800449e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80044a0:	441a      	add	r2, r3
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d004      	beq.n	80044b8 <PCD_EP_ISR_Handler+0x4b0>
 80044ae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d206      	bcs.n	80044c6 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	4619      	mov	r1, r3
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f00b f972 	bl	800f7a8 <HAL_PCD_DataOutStageCallback>
 80044c4:	e005      	b.n	80044d2 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044cc:	4618      	mov	r0, r3
 80044ce:	f004 ffe5 	bl	800949c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80044d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80044d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d07a      	beq.n	80045d2 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80044dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80044e0:	1c5a      	adds	r2, r3, #1
 80044e2:	4613      	mov	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	00db      	lsls	r3, r3, #3
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	4413      	add	r3, r2
 80044ee:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	461a      	mov	r2, r3
 80044f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	881b      	ldrh	r3, [r3, #0]
 8004500:	b29b      	uxth	r3, r3
 8004502:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800450a:	843b      	strh	r3, [r7, #32]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	461a      	mov	r2, r3
 8004512:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	441a      	add	r2, r3
 800451a:	8c3b      	ldrh	r3, [r7, #32]
 800451c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004520:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004524:	b29b      	uxth	r3, r3
 8004526:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	78db      	ldrb	r3, [r3, #3]
 800452c:	2b02      	cmp	r3, #2
 800452e:	d108      	bne.n	8004542 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8004534:	2b02      	cmp	r3, #2
 8004536:	d146      	bne.n	80045c6 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004538:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800453a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453e:	2b00      	cmp	r3, #0
 8004540:	d141      	bne.n	80045c6 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800454a:	b29b      	uxth	r3, r3
 800454c:	461a      	mov	r2, r3
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	4413      	add	r3, r2
 8004556:	3302      	adds	r3, #2
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6812      	ldr	r2, [r2, #0]
 800455e:	4413      	add	r3, r2
 8004560:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800456a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	699a      	ldr	r2, [r3, #24]
 8004570:	8bfb      	ldrh	r3, [r7, #30]
 8004572:	429a      	cmp	r2, r3
 8004574:	d906      	bls.n	8004584 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8004576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004578:	699a      	ldr	r2, [r3, #24]
 800457a:	8bfb      	ldrh	r3, [r7, #30]
 800457c:	1ad2      	subs	r2, r2, r3
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	619a      	str	r2, [r3, #24]
 8004582:	e002      	b.n	800458a <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	2200      	movs	r2, #0
 8004588:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	4619      	mov	r1, r3
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f00b f920 	bl	800f7de <HAL_PCD_DataInStageCallback>
 800459e:	e018      	b.n	80045d2 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	695a      	ldr	r2, [r3, #20]
 80045a4:	8bfb      	ldrh	r3, [r7, #30]
 80045a6:	441a      	add	r2, r3
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	69da      	ldr	r2, [r3, #28]
 80045b0:	8bfb      	ldrh	r3, [r7, #30]
 80045b2:	441a      	add	r2, r3
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045be:	4618      	mov	r0, r3
 80045c0:	f004 ff6c 	bl	800949c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80045c4:	e005      	b.n	80045d2 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80045c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80045c8:	461a      	mov	r2, r3
 80045ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f91b 	bl	8004808 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80045da:	b29b      	uxth	r3, r3
 80045dc:	b21b      	sxth	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f6ff ad17 	blt.w	8004012 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3738      	adds	r7, #56	; 0x38
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b088      	sub	sp, #32
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	60f8      	str	r0, [r7, #12]
 80045f6:	60b9      	str	r1, [r7, #8]
 80045f8:	4613      	mov	r3, r2
 80045fa:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80045fc:	88fb      	ldrh	r3, [r7, #6]
 80045fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d07e      	beq.n	8004704 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800460e:	b29b      	uxth	r3, r3
 8004610:	461a      	mov	r2, r3
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	4413      	add	r3, r2
 800461a:	3302      	adds	r3, #2
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	6812      	ldr	r2, [r2, #0]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004628:	881b      	ldrh	r3, [r3, #0]
 800462a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800462e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	699a      	ldr	r2, [r3, #24]
 8004634:	8b7b      	ldrh	r3, [r7, #26]
 8004636:	429a      	cmp	r2, r3
 8004638:	d306      	bcc.n	8004648 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	699a      	ldr	r2, [r3, #24]
 800463e:	8b7b      	ldrh	r3, [r7, #26]
 8004640:	1ad2      	subs	r2, r2, r3
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	619a      	str	r2, [r3, #24]
 8004646:	e002      	b.n	800464e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2200      	movs	r2, #0
 800464c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d123      	bne.n	800469e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	461a      	mov	r2, r3
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	b29b      	uxth	r3, r3
 8004668:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800466c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004670:	833b      	strh	r3, [r7, #24]
 8004672:	8b3b      	ldrh	r3, [r7, #24]
 8004674:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004678:	833b      	strh	r3, [r7, #24]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	461a      	mov	r2, r3
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	441a      	add	r2, r3
 8004688:	8b3b      	ldrh	r3, [r7, #24]
 800468a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800468e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800469a:	b29b      	uxth	r3, r3
 800469c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800469e:	88fb      	ldrh	r3, [r7, #6]
 80046a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d01f      	beq.n	80046e8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	461a      	mov	r2, r3
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c2:	82fb      	strh	r3, [r7, #22]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	461a      	mov	r2, r3
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	441a      	add	r2, r3
 80046d2:	8afb      	ldrh	r3, [r7, #22]
 80046d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80046e8:	8b7b      	ldrh	r3, [r7, #26]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 8087 	beq.w	80047fe <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6818      	ldr	r0, [r3, #0]
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	6959      	ldr	r1, [r3, #20]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	891a      	ldrh	r2, [r3, #8]
 80046fc:	8b7b      	ldrh	r3, [r7, #26]
 80046fe:	f006 f96f 	bl	800a9e0 <USB_ReadPMA>
 8004702:	e07c      	b.n	80047fe <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800470c:	b29b      	uxth	r3, r3
 800470e:	461a      	mov	r2, r3
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	00db      	lsls	r3, r3, #3
 8004716:	4413      	add	r3, r2
 8004718:	3306      	adds	r3, #6
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	6812      	ldr	r2, [r2, #0]
 8004720:	4413      	add	r3, r2
 8004722:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004726:	881b      	ldrh	r3, [r3, #0]
 8004728:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800472c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	699a      	ldr	r2, [r3, #24]
 8004732:	8b7b      	ldrh	r3, [r7, #26]
 8004734:	429a      	cmp	r2, r3
 8004736:	d306      	bcc.n	8004746 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	699a      	ldr	r2, [r3, #24]
 800473c:	8b7b      	ldrh	r3, [r7, #26]
 800473e:	1ad2      	subs	r2, r2, r3
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	619a      	str	r2, [r3, #24]
 8004744:	e002      	b.n	800474c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	2200      	movs	r2, #0
 800474a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d123      	bne.n	800479c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	461a      	mov	r2, r3
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	b29b      	uxth	r3, r3
 8004766:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800476a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800476e:	83fb      	strh	r3, [r7, #30]
 8004770:	8bfb      	ldrh	r3, [r7, #30]
 8004772:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004776:	83fb      	strh	r3, [r7, #30]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	461a      	mov	r2, r3
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	441a      	add	r2, r3
 8004786:	8bfb      	ldrh	r3, [r7, #30]
 8004788:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800478c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004798:	b29b      	uxth	r3, r3
 800479a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800479c:	88fb      	ldrh	r3, [r7, #6]
 800479e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d11f      	bne.n	80047e6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	461a      	mov	r2, r3
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4413      	add	r3, r2
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c0:	83bb      	strh	r3, [r7, #28]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	461a      	mov	r2, r3
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	441a      	add	r2, r3
 80047d0:	8bbb      	ldrh	r3, [r7, #28]
 80047d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80047e6:	8b7b      	ldrh	r3, [r7, #26]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d008      	beq.n	80047fe <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6818      	ldr	r0, [r3, #0]
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	6959      	ldr	r1, [r3, #20]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	895a      	ldrh	r2, [r3, #10]
 80047f8:	8b7b      	ldrh	r3, [r7, #26]
 80047fa:	f006 f8f1 	bl	800a9e0 <USB_ReadPMA>
    }
  }

  return count;
 80047fe:	8b7b      	ldrh	r3, [r7, #26]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3720      	adds	r7, #32
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b092      	sub	sp, #72	; 0x48
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	4613      	mov	r3, r2
 8004814:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004816:	88fb      	ldrh	r3, [r7, #6]
 8004818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 8132 	beq.w	8004a86 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800482a:	b29b      	uxth	r3, r3
 800482c:	461a      	mov	r2, r3
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	4413      	add	r3, r2
 8004836:	3302      	adds	r3, #2
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	6812      	ldr	r2, [r2, #0]
 800483e:	4413      	add	r3, r2
 8004840:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800484a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	699a      	ldr	r2, [r3, #24]
 8004850:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004852:	429a      	cmp	r2, r3
 8004854:	d906      	bls.n	8004864 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	699a      	ldr	r2, [r3, #24]
 800485a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800485c:	1ad2      	subs	r2, r2, r3
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	619a      	str	r2, [r3, #24]
 8004862:	e002      	b.n	800486a <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	2200      	movs	r2, #0
 8004868:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d12c      	bne.n	80048cc <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	4619      	mov	r1, r3
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f00a ffb0 	bl	800f7de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800487e:	88fb      	ldrh	r3, [r7, #6]
 8004880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 822f 	beq.w	8004ce8 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	461a      	mov	r2, r3
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	881b      	ldrh	r3, [r3, #0]
 800489a:	b29b      	uxth	r3, r3
 800489c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a4:	827b      	strh	r3, [r7, #18]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	461a      	mov	r2, r3
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	441a      	add	r2, r3
 80048b4:	8a7b      	ldrh	r3, [r7, #18]
 80048b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	8013      	strh	r3, [r2, #0]
 80048ca:	e20d      	b.n	8004ce8 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80048cc:	88fb      	ldrh	r3, [r7, #6]
 80048ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d01f      	beq.n	8004916 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	461a      	mov	r2, r3
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	881b      	ldrh	r3, [r3, #0]
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f0:	84bb      	strh	r3, [r7, #36]	; 0x24
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	461a      	mov	r2, r3
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	441a      	add	r2, r3
 8004900:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004902:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004906:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800490a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800490e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004912:	b29b      	uxth	r3, r3
 8004914:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800491c:	2b01      	cmp	r3, #1
 800491e:	f040 81e3 	bne.w	8004ce8 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	695a      	ldr	r2, [r3, #20]
 8004926:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004928:	441a      	add	r2, r3
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	69da      	ldr	r2, [r3, #28]
 8004932:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004934:	441a      	add	r2, r3
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	6a1a      	ldr	r2, [r3, #32]
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	429a      	cmp	r2, r3
 8004944:	d309      	bcc.n	800495a <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	6a1a      	ldr	r2, [r3, #32]
 8004950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004952:	1ad2      	subs	r2, r2, r3
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	621a      	str	r2, [r3, #32]
 8004958:	e014      	b.n	8004984 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d106      	bne.n	8004970 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8004962:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004964:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800496e:	e009      	b.n	8004984 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	2200      	movs	r2, #0
 8004982:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	785b      	ldrb	r3, [r3, #1]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d155      	bne.n	8004a38 <HAL_PCD_EP_DB_Transmit+0x230>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	61bb      	str	r3, [r7, #24]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800499a:	b29b      	uxth	r3, r3
 800499c:	461a      	mov	r2, r3
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	4413      	add	r3, r2
 80049a2:	61bb      	str	r3, [r7, #24]
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	011a      	lsls	r2, r3, #4
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	4413      	add	r3, r2
 80049ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049b2:	617b      	str	r3, [r7, #20]
 80049b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d112      	bne.n	80049e0 <HAL_PCD_EP_DB_Transmit+0x1d8>
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	b29b      	uxth	r3, r3
 80049c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	801a      	strh	r2, [r3, #0]
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	881b      	ldrh	r3, [r3, #0]
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049d8:	b29a      	uxth	r2, r3
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	801a      	strh	r2, [r3, #0]
 80049de:	e047      	b.n	8004a70 <HAL_PCD_EP_DB_Transmit+0x268>
 80049e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e2:	2b3e      	cmp	r3, #62	; 0x3e
 80049e4:	d811      	bhi.n	8004a0a <HAL_PCD_EP_DB_Transmit+0x202>
 80049e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e8:	085b      	lsrs	r3, r3, #1
 80049ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80049ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d002      	beq.n	80049fc <HAL_PCD_EP_DB_Transmit+0x1f4>
 80049f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f8:	3301      	adds	r3, #1
 80049fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80049fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	029b      	lsls	r3, r3, #10
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	801a      	strh	r2, [r3, #0]
 8004a08:	e032      	b.n	8004a70 <HAL_PCD_EP_DB_Transmit+0x268>
 8004a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a0c:	095b      	lsrs	r3, r3, #5
 8004a0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a12:	f003 031f 	and.w	r3, r3, #31
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d102      	bne.n	8004a20 <HAL_PCD_EP_DB_Transmit+0x218>
 8004a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	029b      	lsls	r3, r3, #10
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	801a      	strh	r2, [r3, #0]
 8004a36:	e01b      	b.n	8004a70 <HAL_PCD_EP_DB_Transmit+0x268>
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	785b      	ldrb	r3, [r3, #1]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d117      	bne.n	8004a70 <HAL_PCD_EP_DB_Transmit+0x268>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	623b      	str	r3, [r7, #32]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	461a      	mov	r2, r3
 8004a52:	6a3b      	ldr	r3, [r7, #32]
 8004a54:	4413      	add	r3, r2
 8004a56:	623b      	str	r3, [r7, #32]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	011a      	lsls	r2, r3, #4
 8004a5e:	6a3b      	ldr	r3, [r7, #32]
 8004a60:	4413      	add	r3, r2
 8004a62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a66:	61fb      	str	r3, [r7, #28]
 8004a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6818      	ldr	r0, [r3, #0]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	6959      	ldr	r1, [r3, #20]
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	891a      	ldrh	r2, [r3, #8]
 8004a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	f005 ff6a 	bl	800a958 <USB_WritePMA>
 8004a84:	e130      	b.n	8004ce8 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	461a      	mov	r2, r3
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	00db      	lsls	r3, r3, #3
 8004a98:	4413      	add	r3, r2
 8004a9a:	3306      	adds	r3, #6
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	6812      	ldr	r2, [r2, #0]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aa8:	881b      	ldrh	r3, [r3, #0]
 8004aaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004aae:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	699a      	ldr	r2, [r3, #24]
 8004ab4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d306      	bcc.n	8004ac8 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	699a      	ldr	r2, [r3, #24]
 8004abe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ac0:	1ad2      	subs	r2, r2, r3
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	619a      	str	r2, [r3, #24]
 8004ac6:	e002      	b.n	8004ace <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2200      	movs	r2, #0
 8004acc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d12c      	bne.n	8004b30 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	4619      	mov	r1, r3
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f00a fe7e 	bl	800f7de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004ae2:	88fb      	ldrh	r3, [r7, #6]
 8004ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f040 80fd 	bne.w	8004ce8 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	461a      	mov	r2, r3
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b08:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	441a      	add	r2, r3
 8004b18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	8013      	strh	r3, [r2, #0]
 8004b2e:	e0db      	b.n	8004ce8 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004b30:	88fb      	ldrh	r3, [r7, #6]
 8004b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d11f      	bne.n	8004b7a <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b54:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	441a      	add	r2, r3
 8004b64:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004b66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	f040 80b1 	bne.w	8004ce8 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	695a      	ldr	r2, [r3, #20]
 8004b8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b8c:	441a      	add	r2, r3
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	69da      	ldr	r2, [r3, #28]
 8004b96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b98:	441a      	add	r2, r3
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	6a1a      	ldr	r2, [r3, #32]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d309      	bcc.n	8004bbe <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	6a1a      	ldr	r2, [r3, #32]
 8004bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb6:	1ad2      	subs	r2, r2, r3
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	621a      	str	r2, [r3, #32]
 8004bbc:	e014      	b.n	8004be8 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d106      	bne.n	8004bd4 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8004bc6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004bc8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004bd2:	e009      	b.n	8004be8 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	637b      	str	r3, [r7, #52]	; 0x34
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	785b      	ldrb	r3, [r3, #1]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d155      	bne.n	8004ca2 <HAL_PCD_EP_DB_Transmit+0x49a>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	647b      	str	r3, [r7, #68]	; 0x44
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	461a      	mov	r2, r3
 8004c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c0a:	4413      	add	r3, r2
 8004c0c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	011a      	lsls	r2, r3, #4
 8004c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c16:	4413      	add	r3, r2
 8004c18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c1c:	643b      	str	r3, [r7, #64]	; 0x40
 8004c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d112      	bne.n	8004c4a <HAL_PCD_EP_DB_Transmit+0x442>
 8004c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c26:	881b      	ldrh	r3, [r3, #0]
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c32:	801a      	strh	r2, [r3, #0]
 8004c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c36:	881b      	ldrh	r3, [r3, #0]
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c46:	801a      	strh	r2, [r3, #0]
 8004c48:	e044      	b.n	8004cd4 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8004c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c4c:	2b3e      	cmp	r3, #62	; 0x3e
 8004c4e:	d811      	bhi.n	8004c74 <HAL_PCD_EP_DB_Transmit+0x46c>
 8004c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c52:	085b      	lsrs	r3, r3, #1
 8004c54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d002      	beq.n	8004c66 <HAL_PCD_EP_DB_Transmit+0x45e>
 8004c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c62:	3301      	adds	r3, #1
 8004c64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	029b      	lsls	r3, r3, #10
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c70:	801a      	strh	r2, [r3, #0]
 8004c72:	e02f      	b.n	8004cd4 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8004c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c76:	095b      	lsrs	r3, r3, #5
 8004c78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7c:	f003 031f 	and.w	r3, r3, #31
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d102      	bne.n	8004c8a <HAL_PCD_EP_DB_Transmit+0x482>
 8004c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c86:	3b01      	subs	r3, #1
 8004c88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	029b      	lsls	r3, r3, #10
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c9e:	801a      	strh	r2, [r3, #0]
 8004ca0:	e018      	b.n	8004cd4 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	785b      	ldrb	r3, [r3, #1]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d114      	bne.n	8004cd4 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb8:	4413      	add	r3, r2
 8004cba:	637b      	str	r3, [r7, #52]	; 0x34
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	011a      	lsls	r2, r3, #4
 8004cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004cca:	633b      	str	r3, [r7, #48]	; 0x30
 8004ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6818      	ldr	r0, [r3, #0]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	6959      	ldr	r1, [r3, #20]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	895a      	ldrh	r2, [r3, #10]
 8004ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	f005 fe38 	bl	800a958 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	461a      	mov	r2, r3
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d02:	823b      	strh	r3, [r7, #16]
 8004d04:	8a3b      	ldrh	r3, [r7, #16]
 8004d06:	f083 0310 	eor.w	r3, r3, #16
 8004d0a:	823b      	strh	r3, [r7, #16]
 8004d0c:	8a3b      	ldrh	r3, [r7, #16]
 8004d0e:	f083 0320 	eor.w	r3, r3, #32
 8004d12:	823b      	strh	r3, [r7, #16]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	441a      	add	r2, r3
 8004d22:	8a3b      	ldrh	r3, [r7, #16]
 8004d24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3748      	adds	r7, #72	; 0x48
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b087      	sub	sp, #28
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	60f8      	str	r0, [r7, #12]
 8004d4a:	607b      	str	r3, [r7, #4]
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	817b      	strh	r3, [r7, #10]
 8004d50:	4613      	mov	r3, r2
 8004d52:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004d54:	897b      	ldrh	r3, [r7, #10]
 8004d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00b      	beq.n	8004d78 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d60:	897b      	ldrh	r3, [r7, #10]
 8004d62:	f003 0307 	and.w	r3, r3, #7
 8004d66:	1c5a      	adds	r2, r3, #1
 8004d68:	4613      	mov	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	4413      	add	r3, r2
 8004d74:	617b      	str	r3, [r7, #20]
 8004d76:	e009      	b.n	8004d8c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d78:	897a      	ldrh	r2, [r7, #10]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4413      	add	r3, r2
 8004d80:	00db      	lsls	r3, r3, #3
 8004d82:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	4413      	add	r3, r2
 8004d8a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004d8c:	893b      	ldrh	r3, [r7, #8]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d107      	bne.n	8004da2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	2200      	movs	r2, #0
 8004d96:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	80da      	strh	r2, [r3, #6]
 8004da0:	e00b      	b.n	8004dba <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	2201      	movs	r2, #1
 8004da6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	0c1b      	lsrs	r3, r3, #16
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	371c      	adds	r7, #28
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bc80      	pop	{r7}
 8004dc4:	4770      	bx	lr
	...

08004dc8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004dcc:	4b03      	ldr	r3, [pc, #12]	; (8004ddc <HAL_PWR_EnableBkUpAccess+0x14>)
 8004dce:	2201      	movs	r2, #1
 8004dd0:	601a      	str	r2, [r3, #0]
}
 8004dd2:	bf00      	nop
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bc80      	pop	{r7}
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	420e0020 	.word	0x420e0020

08004de0 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	460b      	mov	r3, r1
 8004dea:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004dec:	4b09      	ldr	r3, [pc, #36]	; (8004e14 <HAL_PWR_EnterSLEEPMode+0x34>)
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	4a08      	ldr	r2, [pc, #32]	; (8004e14 <HAL_PWR_EnterSLEEPMode+0x34>)
 8004df2:	f023 0304 	bic.w	r3, r3, #4
 8004df6:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004df8:	78fb      	ldrb	r3, [r7, #3]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d101      	bne.n	8004e02 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004dfe:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8004e00:	e002      	b.n	8004e08 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8004e02:	bf40      	sev
    __WFE();
 8004e04:	bf20      	wfe
    __WFE();
 8004e06:	bf20      	wfe
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bc80      	pop	{r7}
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	e000ed00 	.word	0xe000ed00

08004e18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e26c      	b.n	8005304 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f000 8087 	beq.w	8004f46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e38:	4b92      	ldr	r3, [pc, #584]	; (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f003 030c 	and.w	r3, r3, #12
 8004e40:	2b04      	cmp	r3, #4
 8004e42:	d00c      	beq.n	8004e5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e44:	4b8f      	ldr	r3, [pc, #572]	; (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f003 030c 	and.w	r3, r3, #12
 8004e4c:	2b08      	cmp	r3, #8
 8004e4e:	d112      	bne.n	8004e76 <HAL_RCC_OscConfig+0x5e>
 8004e50:	4b8c      	ldr	r3, [pc, #560]	; (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e5c:	d10b      	bne.n	8004e76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e5e:	4b89      	ldr	r3, [pc, #548]	; (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d06c      	beq.n	8004f44 <HAL_RCC_OscConfig+0x12c>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d168      	bne.n	8004f44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e246      	b.n	8005304 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e7e:	d106      	bne.n	8004e8e <HAL_RCC_OscConfig+0x76>
 8004e80:	4b80      	ldr	r3, [pc, #512]	; (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a7f      	ldr	r2, [pc, #508]	; (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e8a:	6013      	str	r3, [r2, #0]
 8004e8c:	e02e      	b.n	8004eec <HAL_RCC_OscConfig+0xd4>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10c      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x98>
 8004e96:	4b7b      	ldr	r3, [pc, #492]	; (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a7a      	ldr	r2, [pc, #488]	; (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004e9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ea0:	6013      	str	r3, [r2, #0]
 8004ea2:	4b78      	ldr	r3, [pc, #480]	; (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a77      	ldr	r2, [pc, #476]	; (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004ea8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eac:	6013      	str	r3, [r2, #0]
 8004eae:	e01d      	b.n	8004eec <HAL_RCC_OscConfig+0xd4>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004eb8:	d10c      	bne.n	8004ed4 <HAL_RCC_OscConfig+0xbc>
 8004eba:	4b72      	ldr	r3, [pc, #456]	; (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a71      	ldr	r2, [pc, #452]	; (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ec4:	6013      	str	r3, [r2, #0]
 8004ec6:	4b6f      	ldr	r3, [pc, #444]	; (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a6e      	ldr	r2, [pc, #440]	; (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	e00b      	b.n	8004eec <HAL_RCC_OscConfig+0xd4>
 8004ed4:	4b6b      	ldr	r3, [pc, #428]	; (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a6a      	ldr	r2, [pc, #424]	; (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ede:	6013      	str	r3, [r2, #0]
 8004ee0:	4b68      	ldr	r3, [pc, #416]	; (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a67      	ldr	r2, [pc, #412]	; (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d013      	beq.n	8004f1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef4:	f7fe f814 	bl	8002f20 <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004efc:	f7fe f810 	bl	8002f20 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b64      	cmp	r3, #100	; 0x64
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e1fa      	b.n	8005304 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f0e:	4b5d      	ldr	r3, [pc, #372]	; (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0f0      	beq.n	8004efc <HAL_RCC_OscConfig+0xe4>
 8004f1a:	e014      	b.n	8004f46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f1c:	f7fe f800 	bl	8002f20 <HAL_GetTick>
 8004f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f22:	e008      	b.n	8004f36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f24:	f7fd fffc 	bl	8002f20 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b64      	cmp	r3, #100	; 0x64
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e1e6      	b.n	8005304 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f36:	4b53      	ldr	r3, [pc, #332]	; (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1f0      	bne.n	8004f24 <HAL_RCC_OscConfig+0x10c>
 8004f42:	e000      	b.n	8004f46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d063      	beq.n	800501a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f52:	4b4c      	ldr	r3, [pc, #304]	; (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f003 030c 	and.w	r3, r3, #12
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00b      	beq.n	8004f76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004f5e:	4b49      	ldr	r3, [pc, #292]	; (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f003 030c 	and.w	r3, r3, #12
 8004f66:	2b08      	cmp	r3, #8
 8004f68:	d11c      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x18c>
 8004f6a:	4b46      	ldr	r3, [pc, #280]	; (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d116      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f76:	4b43      	ldr	r3, [pc, #268]	; (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d005      	beq.n	8004f8e <HAL_RCC_OscConfig+0x176>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d001      	beq.n	8004f8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e1ba      	b.n	8005304 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f8e:	4b3d      	ldr	r3, [pc, #244]	; (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	4939      	ldr	r1, [pc, #228]	; (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fa2:	e03a      	b.n	800501a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d020      	beq.n	8004fee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fac:	4b36      	ldr	r3, [pc, #216]	; (8005088 <HAL_RCC_OscConfig+0x270>)
 8004fae:	2201      	movs	r2, #1
 8004fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb2:	f7fd ffb5 	bl	8002f20 <HAL_GetTick>
 8004fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fb8:	e008      	b.n	8004fcc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fba:	f7fd ffb1 	bl	8002f20 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d901      	bls.n	8004fcc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e19b      	b.n	8005304 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fcc:	4b2d      	ldr	r3, [pc, #180]	; (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d0f0      	beq.n	8004fba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fd8:	4b2a      	ldr	r3, [pc, #168]	; (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	00db      	lsls	r3, r3, #3
 8004fe6:	4927      	ldr	r1, [pc, #156]	; (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	600b      	str	r3, [r1, #0]
 8004fec:	e015      	b.n	800501a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fee:	4b26      	ldr	r3, [pc, #152]	; (8005088 <HAL_RCC_OscConfig+0x270>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff4:	f7fd ff94 	bl	8002f20 <HAL_GetTick>
 8004ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ffc:	f7fd ff90 	bl	8002f20 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e17a      	b.n	8005304 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800500e:	4b1d      	ldr	r3, [pc, #116]	; (8005084 <HAL_RCC_OscConfig+0x26c>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1f0      	bne.n	8004ffc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0308 	and.w	r3, r3, #8
 8005022:	2b00      	cmp	r3, #0
 8005024:	d03a      	beq.n	800509c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d019      	beq.n	8005062 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800502e:	4b17      	ldr	r3, [pc, #92]	; (800508c <HAL_RCC_OscConfig+0x274>)
 8005030:	2201      	movs	r2, #1
 8005032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005034:	f7fd ff74 	bl	8002f20 <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800503c:	f7fd ff70 	bl	8002f20 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e15a      	b.n	8005304 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800504e:	4b0d      	ldr	r3, [pc, #52]	; (8005084 <HAL_RCC_OscConfig+0x26c>)
 8005050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d0f0      	beq.n	800503c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800505a:	2001      	movs	r0, #1
 800505c:	f000 fac6 	bl	80055ec <RCC_Delay>
 8005060:	e01c      	b.n	800509c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005062:	4b0a      	ldr	r3, [pc, #40]	; (800508c <HAL_RCC_OscConfig+0x274>)
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005068:	f7fd ff5a 	bl	8002f20 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800506e:	e00f      	b.n	8005090 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005070:	f7fd ff56 	bl	8002f20 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d908      	bls.n	8005090 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e140      	b.n	8005304 <HAL_RCC_OscConfig+0x4ec>
 8005082:	bf00      	nop
 8005084:	40021000 	.word	0x40021000
 8005088:	42420000 	.word	0x42420000
 800508c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005090:	4b9e      	ldr	r3, [pc, #632]	; (800530c <HAL_RCC_OscConfig+0x4f4>)
 8005092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1e9      	bne.n	8005070 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f000 80a6 	beq.w	80051f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050aa:	2300      	movs	r3, #0
 80050ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050ae:	4b97      	ldr	r3, [pc, #604]	; (800530c <HAL_RCC_OscConfig+0x4f4>)
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10d      	bne.n	80050d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050ba:	4b94      	ldr	r3, [pc, #592]	; (800530c <HAL_RCC_OscConfig+0x4f4>)
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	4a93      	ldr	r2, [pc, #588]	; (800530c <HAL_RCC_OscConfig+0x4f4>)
 80050c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c4:	61d3      	str	r3, [r2, #28]
 80050c6:	4b91      	ldr	r3, [pc, #580]	; (800530c <HAL_RCC_OscConfig+0x4f4>)
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ce:	60bb      	str	r3, [r7, #8]
 80050d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050d2:	2301      	movs	r3, #1
 80050d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050d6:	4b8e      	ldr	r3, [pc, #568]	; (8005310 <HAL_RCC_OscConfig+0x4f8>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d118      	bne.n	8005114 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050e2:	4b8b      	ldr	r3, [pc, #556]	; (8005310 <HAL_RCC_OscConfig+0x4f8>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a8a      	ldr	r2, [pc, #552]	; (8005310 <HAL_RCC_OscConfig+0x4f8>)
 80050e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050ee:	f7fd ff17 	bl	8002f20 <HAL_GetTick>
 80050f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f4:	e008      	b.n	8005108 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050f6:	f7fd ff13 	bl	8002f20 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b64      	cmp	r3, #100	; 0x64
 8005102:	d901      	bls.n	8005108 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e0fd      	b.n	8005304 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005108:	4b81      	ldr	r3, [pc, #516]	; (8005310 <HAL_RCC_OscConfig+0x4f8>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0f0      	beq.n	80050f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d106      	bne.n	800512a <HAL_RCC_OscConfig+0x312>
 800511c:	4b7b      	ldr	r3, [pc, #492]	; (800530c <HAL_RCC_OscConfig+0x4f4>)
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	4a7a      	ldr	r2, [pc, #488]	; (800530c <HAL_RCC_OscConfig+0x4f4>)
 8005122:	f043 0301 	orr.w	r3, r3, #1
 8005126:	6213      	str	r3, [r2, #32]
 8005128:	e02d      	b.n	8005186 <HAL_RCC_OscConfig+0x36e>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10c      	bne.n	800514c <HAL_RCC_OscConfig+0x334>
 8005132:	4b76      	ldr	r3, [pc, #472]	; (800530c <HAL_RCC_OscConfig+0x4f4>)
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	4a75      	ldr	r2, [pc, #468]	; (800530c <HAL_RCC_OscConfig+0x4f4>)
 8005138:	f023 0301 	bic.w	r3, r3, #1
 800513c:	6213      	str	r3, [r2, #32]
 800513e:	4b73      	ldr	r3, [pc, #460]	; (800530c <HAL_RCC_OscConfig+0x4f4>)
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	4a72      	ldr	r2, [pc, #456]	; (800530c <HAL_RCC_OscConfig+0x4f4>)
 8005144:	f023 0304 	bic.w	r3, r3, #4
 8005148:	6213      	str	r3, [r2, #32]
 800514a:	e01c      	b.n	8005186 <HAL_RCC_OscConfig+0x36e>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	2b05      	cmp	r3, #5
 8005152:	d10c      	bne.n	800516e <HAL_RCC_OscConfig+0x356>
 8005154:	4b6d      	ldr	r3, [pc, #436]	; (800530c <HAL_RCC_OscConfig+0x4f4>)
 8005156:	6a1b      	ldr	r3, [r3, #32]
 8005158:	4a6c      	ldr	r2, [pc, #432]	; (800530c <HAL_RCC_OscConfig+0x4f4>)
 800515a:	f043 0304 	orr.w	r3, r3, #4
 800515e:	6213      	str	r3, [r2, #32]
 8005160:	4b6a      	ldr	r3, [pc, #424]	; (800530c <HAL_RCC_OscConfig+0x4f4>)
 8005162:	6a1b      	ldr	r3, [r3, #32]
 8005164:	4a69      	ldr	r2, [pc, #420]	; (800530c <HAL_RCC_OscConfig+0x4f4>)
 8005166:	f043 0301 	orr.w	r3, r3, #1
 800516a:	6213      	str	r3, [r2, #32]
 800516c:	e00b      	b.n	8005186 <HAL_RCC_OscConfig+0x36e>
 800516e:	4b67      	ldr	r3, [pc, #412]	; (800530c <HAL_RCC_OscConfig+0x4f4>)
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	4a66      	ldr	r2, [pc, #408]	; (800530c <HAL_RCC_OscConfig+0x4f4>)
 8005174:	f023 0301 	bic.w	r3, r3, #1
 8005178:	6213      	str	r3, [r2, #32]
 800517a:	4b64      	ldr	r3, [pc, #400]	; (800530c <HAL_RCC_OscConfig+0x4f4>)
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	4a63      	ldr	r2, [pc, #396]	; (800530c <HAL_RCC_OscConfig+0x4f4>)
 8005180:	f023 0304 	bic.w	r3, r3, #4
 8005184:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d015      	beq.n	80051ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800518e:	f7fd fec7 	bl	8002f20 <HAL_GetTick>
 8005192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005194:	e00a      	b.n	80051ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005196:	f7fd fec3 	bl	8002f20 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e0ab      	b.n	8005304 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ac:	4b57      	ldr	r3, [pc, #348]	; (800530c <HAL_RCC_OscConfig+0x4f4>)
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d0ee      	beq.n	8005196 <HAL_RCC_OscConfig+0x37e>
 80051b8:	e014      	b.n	80051e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051ba:	f7fd feb1 	bl	8002f20 <HAL_GetTick>
 80051be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051c0:	e00a      	b.n	80051d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051c2:	f7fd fead 	bl	8002f20 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d901      	bls.n	80051d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e095      	b.n	8005304 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051d8:	4b4c      	ldr	r3, [pc, #304]	; (800530c <HAL_RCC_OscConfig+0x4f4>)
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1ee      	bne.n	80051c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80051e4:	7dfb      	ldrb	r3, [r7, #23]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d105      	bne.n	80051f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051ea:	4b48      	ldr	r3, [pc, #288]	; (800530c <HAL_RCC_OscConfig+0x4f4>)
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	4a47      	ldr	r2, [pc, #284]	; (800530c <HAL_RCC_OscConfig+0x4f4>)
 80051f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f000 8081 	beq.w	8005302 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005200:	4b42      	ldr	r3, [pc, #264]	; (800530c <HAL_RCC_OscConfig+0x4f4>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f003 030c 	and.w	r3, r3, #12
 8005208:	2b08      	cmp	r3, #8
 800520a:	d061      	beq.n	80052d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	69db      	ldr	r3, [r3, #28]
 8005210:	2b02      	cmp	r3, #2
 8005212:	d146      	bne.n	80052a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005214:	4b3f      	ldr	r3, [pc, #252]	; (8005314 <HAL_RCC_OscConfig+0x4fc>)
 8005216:	2200      	movs	r2, #0
 8005218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800521a:	f7fd fe81 	bl	8002f20 <HAL_GetTick>
 800521e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005220:	e008      	b.n	8005234 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005222:	f7fd fe7d 	bl	8002f20 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b02      	cmp	r3, #2
 800522e:	d901      	bls.n	8005234 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e067      	b.n	8005304 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005234:	4b35      	ldr	r3, [pc, #212]	; (800530c <HAL_RCC_OscConfig+0x4f4>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1f0      	bne.n	8005222 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a1b      	ldr	r3, [r3, #32]
 8005244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005248:	d108      	bne.n	800525c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800524a:	4b30      	ldr	r3, [pc, #192]	; (800530c <HAL_RCC_OscConfig+0x4f4>)
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	492d      	ldr	r1, [pc, #180]	; (800530c <HAL_RCC_OscConfig+0x4f4>)
 8005258:	4313      	orrs	r3, r2
 800525a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800525c:	4b2b      	ldr	r3, [pc, #172]	; (800530c <HAL_RCC_OscConfig+0x4f4>)
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a19      	ldr	r1, [r3, #32]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526c:	430b      	orrs	r3, r1
 800526e:	4927      	ldr	r1, [pc, #156]	; (800530c <HAL_RCC_OscConfig+0x4f4>)
 8005270:	4313      	orrs	r3, r2
 8005272:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005274:	4b27      	ldr	r3, [pc, #156]	; (8005314 <HAL_RCC_OscConfig+0x4fc>)
 8005276:	2201      	movs	r2, #1
 8005278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800527a:	f7fd fe51 	bl	8002f20 <HAL_GetTick>
 800527e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005280:	e008      	b.n	8005294 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005282:	f7fd fe4d 	bl	8002f20 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d901      	bls.n	8005294 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e037      	b.n	8005304 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005294:	4b1d      	ldr	r3, [pc, #116]	; (800530c <HAL_RCC_OscConfig+0x4f4>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d0f0      	beq.n	8005282 <HAL_RCC_OscConfig+0x46a>
 80052a0:	e02f      	b.n	8005302 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052a2:	4b1c      	ldr	r3, [pc, #112]	; (8005314 <HAL_RCC_OscConfig+0x4fc>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052a8:	f7fd fe3a 	bl	8002f20 <HAL_GetTick>
 80052ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052ae:	e008      	b.n	80052c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052b0:	f7fd fe36 	bl	8002f20 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e020      	b.n	8005304 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052c2:	4b12      	ldr	r3, [pc, #72]	; (800530c <HAL_RCC_OscConfig+0x4f4>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1f0      	bne.n	80052b0 <HAL_RCC_OscConfig+0x498>
 80052ce:	e018      	b.n	8005302 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d101      	bne.n	80052dc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e013      	b.n	8005304 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80052dc:	4b0b      	ldr	r3, [pc, #44]	; (800530c <HAL_RCC_OscConfig+0x4f4>)
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a1b      	ldr	r3, [r3, #32]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d106      	bne.n	80052fe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d001      	beq.n	8005302 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e000      	b.n	8005304 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3718      	adds	r7, #24
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	40021000 	.word	0x40021000
 8005310:	40007000 	.word	0x40007000
 8005314:	42420060 	.word	0x42420060

08005318 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e0d0      	b.n	80054ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800532c:	4b6a      	ldr	r3, [pc, #424]	; (80054d8 <HAL_RCC_ClockConfig+0x1c0>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0307 	and.w	r3, r3, #7
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	429a      	cmp	r2, r3
 8005338:	d910      	bls.n	800535c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800533a:	4b67      	ldr	r3, [pc, #412]	; (80054d8 <HAL_RCC_ClockConfig+0x1c0>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f023 0207 	bic.w	r2, r3, #7
 8005342:	4965      	ldr	r1, [pc, #404]	; (80054d8 <HAL_RCC_ClockConfig+0x1c0>)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	4313      	orrs	r3, r2
 8005348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800534a:	4b63      	ldr	r3, [pc, #396]	; (80054d8 <HAL_RCC_ClockConfig+0x1c0>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	429a      	cmp	r2, r3
 8005356:	d001      	beq.n	800535c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e0b8      	b.n	80054ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d020      	beq.n	80053aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	2b00      	cmp	r3, #0
 8005372:	d005      	beq.n	8005380 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005374:	4b59      	ldr	r3, [pc, #356]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	4a58      	ldr	r2, [pc, #352]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 800537a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800537e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0308 	and.w	r3, r3, #8
 8005388:	2b00      	cmp	r3, #0
 800538a:	d005      	beq.n	8005398 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800538c:	4b53      	ldr	r3, [pc, #332]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	4a52      	ldr	r2, [pc, #328]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 8005392:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005396:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005398:	4b50      	ldr	r3, [pc, #320]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	494d      	ldr	r1, [pc, #308]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d040      	beq.n	8005438 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d107      	bne.n	80053ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053be:	4b47      	ldr	r3, [pc, #284]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d115      	bne.n	80053f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e07f      	b.n	80054ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d107      	bne.n	80053e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053d6:	4b41      	ldr	r3, [pc, #260]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d109      	bne.n	80053f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e073      	b.n	80054ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053e6:	4b3d      	ldr	r3, [pc, #244]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e06b      	b.n	80054ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053f6:	4b39      	ldr	r3, [pc, #228]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f023 0203 	bic.w	r2, r3, #3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	4936      	ldr	r1, [pc, #216]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 8005404:	4313      	orrs	r3, r2
 8005406:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005408:	f7fd fd8a 	bl	8002f20 <HAL_GetTick>
 800540c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800540e:	e00a      	b.n	8005426 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005410:	f7fd fd86 	bl	8002f20 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	f241 3288 	movw	r2, #5000	; 0x1388
 800541e:	4293      	cmp	r3, r2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e053      	b.n	80054ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005426:	4b2d      	ldr	r3, [pc, #180]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f003 020c 	and.w	r2, r3, #12
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	429a      	cmp	r2, r3
 8005436:	d1eb      	bne.n	8005410 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005438:	4b27      	ldr	r3, [pc, #156]	; (80054d8 <HAL_RCC_ClockConfig+0x1c0>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0307 	and.w	r3, r3, #7
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	429a      	cmp	r2, r3
 8005444:	d210      	bcs.n	8005468 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005446:	4b24      	ldr	r3, [pc, #144]	; (80054d8 <HAL_RCC_ClockConfig+0x1c0>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f023 0207 	bic.w	r2, r3, #7
 800544e:	4922      	ldr	r1, [pc, #136]	; (80054d8 <HAL_RCC_ClockConfig+0x1c0>)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	4313      	orrs	r3, r2
 8005454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005456:	4b20      	ldr	r3, [pc, #128]	; (80054d8 <HAL_RCC_ClockConfig+0x1c0>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0307 	and.w	r3, r3, #7
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	429a      	cmp	r2, r3
 8005462:	d001      	beq.n	8005468 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e032      	b.n	80054ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	d008      	beq.n	8005486 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005474:	4b19      	ldr	r3, [pc, #100]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	4916      	ldr	r1, [pc, #88]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 8005482:	4313      	orrs	r3, r2
 8005484:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0308 	and.w	r3, r3, #8
 800548e:	2b00      	cmp	r3, #0
 8005490:	d009      	beq.n	80054a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005492:	4b12      	ldr	r3, [pc, #72]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	490e      	ldr	r1, [pc, #56]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054a6:	f000 f821 	bl	80054ec <HAL_RCC_GetSysClockFreq>
 80054aa:	4601      	mov	r1, r0
 80054ac:	4b0b      	ldr	r3, [pc, #44]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	091b      	lsrs	r3, r3, #4
 80054b2:	f003 030f 	and.w	r3, r3, #15
 80054b6:	4a0a      	ldr	r2, [pc, #40]	; (80054e0 <HAL_RCC_ClockConfig+0x1c8>)
 80054b8:	5cd3      	ldrb	r3, [r2, r3]
 80054ba:	fa21 f303 	lsr.w	r3, r1, r3
 80054be:	4a09      	ldr	r2, [pc, #36]	; (80054e4 <HAL_RCC_ClockConfig+0x1cc>)
 80054c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80054c2:	4b09      	ldr	r3, [pc, #36]	; (80054e8 <HAL_RCC_ClockConfig+0x1d0>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7fd fce8 	bl	8002e9c <HAL_InitTick>

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	40022000 	.word	0x40022000
 80054dc:	40021000 	.word	0x40021000
 80054e0:	08010a74 	.word	0x08010a74
 80054e4:	20000000 	.word	0x20000000
 80054e8:	20000004 	.word	0x20000004

080054ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054ec:	b490      	push	{r4, r7}
 80054ee:	b08a      	sub	sp, #40	; 0x28
 80054f0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80054f2:	4b2a      	ldr	r3, [pc, #168]	; (800559c <HAL_RCC_GetSysClockFreq+0xb0>)
 80054f4:	1d3c      	adds	r4, r7, #4
 80054f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80054f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80054fc:	4b28      	ldr	r3, [pc, #160]	; (80055a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80054fe:	881b      	ldrh	r3, [r3, #0]
 8005500:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005502:	2300      	movs	r3, #0
 8005504:	61fb      	str	r3, [r7, #28]
 8005506:	2300      	movs	r3, #0
 8005508:	61bb      	str	r3, [r7, #24]
 800550a:	2300      	movs	r3, #0
 800550c:	627b      	str	r3, [r7, #36]	; 0x24
 800550e:	2300      	movs	r3, #0
 8005510:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005512:	2300      	movs	r3, #0
 8005514:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005516:	4b23      	ldr	r3, [pc, #140]	; (80055a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	f003 030c 	and.w	r3, r3, #12
 8005522:	2b04      	cmp	r3, #4
 8005524:	d002      	beq.n	800552c <HAL_RCC_GetSysClockFreq+0x40>
 8005526:	2b08      	cmp	r3, #8
 8005528:	d003      	beq.n	8005532 <HAL_RCC_GetSysClockFreq+0x46>
 800552a:	e02d      	b.n	8005588 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800552c:	4b1e      	ldr	r3, [pc, #120]	; (80055a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800552e:	623b      	str	r3, [r7, #32]
      break;
 8005530:	e02d      	b.n	800558e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	0c9b      	lsrs	r3, r3, #18
 8005536:	f003 030f 	and.w	r3, r3, #15
 800553a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800553e:	4413      	add	r3, r2
 8005540:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005544:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d013      	beq.n	8005578 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005550:	4b14      	ldr	r3, [pc, #80]	; (80055a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	0c5b      	lsrs	r3, r3, #17
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800555e:	4413      	add	r3, r2
 8005560:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005564:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	4a0f      	ldr	r2, [pc, #60]	; (80055a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800556a:	fb02 f203 	mul.w	r2, r2, r3
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	fbb2 f3f3 	udiv	r3, r2, r3
 8005574:	627b      	str	r3, [r7, #36]	; 0x24
 8005576:	e004      	b.n	8005582 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	4a0c      	ldr	r2, [pc, #48]	; (80055ac <HAL_RCC_GetSysClockFreq+0xc0>)
 800557c:	fb02 f303 	mul.w	r3, r2, r3
 8005580:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	623b      	str	r3, [r7, #32]
      break;
 8005586:	e002      	b.n	800558e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005588:	4b07      	ldr	r3, [pc, #28]	; (80055a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800558a:	623b      	str	r3, [r7, #32]
      break;
 800558c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800558e:	6a3b      	ldr	r3, [r7, #32]
}
 8005590:	4618      	mov	r0, r3
 8005592:	3728      	adds	r7, #40	; 0x28
 8005594:	46bd      	mov	sp, r7
 8005596:	bc90      	pop	{r4, r7}
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	0801090c 	.word	0x0801090c
 80055a0:	0801091c 	.word	0x0801091c
 80055a4:	40021000 	.word	0x40021000
 80055a8:	007a1200 	.word	0x007a1200
 80055ac:	003d0900 	.word	0x003d0900

080055b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055b0:	b480      	push	{r7}
 80055b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055b4:	4b02      	ldr	r3, [pc, #8]	; (80055c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80055b6:	681b      	ldr	r3, [r3, #0]
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bc80      	pop	{r7}
 80055be:	4770      	bx	lr
 80055c0:	20000000 	.word	0x20000000

080055c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055c8:	f7ff fff2 	bl	80055b0 <HAL_RCC_GetHCLKFreq>
 80055cc:	4601      	mov	r1, r0
 80055ce:	4b05      	ldr	r3, [pc, #20]	; (80055e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	0adb      	lsrs	r3, r3, #11
 80055d4:	f003 0307 	and.w	r3, r3, #7
 80055d8:	4a03      	ldr	r2, [pc, #12]	; (80055e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055da:	5cd3      	ldrb	r3, [r2, r3]
 80055dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	40021000 	.word	0x40021000
 80055e8:	08010a84 	.word	0x08010a84

080055ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80055f4:	4b0a      	ldr	r3, [pc, #40]	; (8005620 <RCC_Delay+0x34>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a0a      	ldr	r2, [pc, #40]	; (8005624 <RCC_Delay+0x38>)
 80055fa:	fba2 2303 	umull	r2, r3, r2, r3
 80055fe:	0a5b      	lsrs	r3, r3, #9
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	fb02 f303 	mul.w	r3, r2, r3
 8005606:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005608:	bf00      	nop
  }
  while (Delay --);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	1e5a      	subs	r2, r3, #1
 800560e:	60fa      	str	r2, [r7, #12]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1f9      	bne.n	8005608 <RCC_Delay+0x1c>
}
 8005614:	bf00      	nop
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	bc80      	pop	{r7}
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	20000000 	.word	0x20000000
 8005624:	10624dd3 	.word	0x10624dd3

08005628 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005630:	2300      	movs	r3, #0
 8005632:	613b      	str	r3, [r7, #16]
 8005634:	2300      	movs	r3, #0
 8005636:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	2b00      	cmp	r3, #0
 8005642:	d07d      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005644:	2300      	movs	r3, #0
 8005646:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005648:	4b4f      	ldr	r3, [pc, #316]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800564a:	69db      	ldr	r3, [r3, #28]
 800564c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10d      	bne.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005654:	4b4c      	ldr	r3, [pc, #304]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005656:	69db      	ldr	r3, [r3, #28]
 8005658:	4a4b      	ldr	r2, [pc, #300]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800565a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800565e:	61d3      	str	r3, [r2, #28]
 8005660:	4b49      	ldr	r3, [pc, #292]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005662:	69db      	ldr	r3, [r3, #28]
 8005664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005668:	60bb      	str	r3, [r7, #8]
 800566a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800566c:	2301      	movs	r3, #1
 800566e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005670:	4b46      	ldr	r3, [pc, #280]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005678:	2b00      	cmp	r3, #0
 800567a:	d118      	bne.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800567c:	4b43      	ldr	r3, [pc, #268]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a42      	ldr	r2, [pc, #264]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005686:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005688:	f7fd fc4a 	bl	8002f20 <HAL_GetTick>
 800568c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800568e:	e008      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005690:	f7fd fc46 	bl	8002f20 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	2b64      	cmp	r3, #100	; 0x64
 800569c:	d901      	bls.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e06d      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056a2:	4b3a      	ldr	r3, [pc, #232]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d0f0      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056ae:	4b36      	ldr	r3, [pc, #216]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056b6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d02e      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d027      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056cc:	4b2e      	ldr	r3, [pc, #184]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056d6:	4b2e      	ldr	r3, [pc, #184]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80056d8:	2201      	movs	r2, #1
 80056da:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056dc:	4b2c      	ldr	r3, [pc, #176]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80056de:	2200      	movs	r2, #0
 80056e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80056e2:	4a29      	ldr	r2, [pc, #164]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d014      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f2:	f7fd fc15 	bl	8002f20 <HAL_GetTick>
 80056f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056f8:	e00a      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056fa:	f7fd fc11 	bl	8002f20 <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	f241 3288 	movw	r2, #5000	; 0x1388
 8005708:	4293      	cmp	r3, r2
 800570a:	d901      	bls.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e036      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005710:	4b1d      	ldr	r3, [pc, #116]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	2b00      	cmp	r3, #0
 800571a:	d0ee      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800571c:	4b1a      	ldr	r3, [pc, #104]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800571e:	6a1b      	ldr	r3, [r3, #32]
 8005720:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	4917      	ldr	r1, [pc, #92]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800572a:	4313      	orrs	r3, r2
 800572c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800572e:	7dfb      	ldrb	r3, [r7, #23]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d105      	bne.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005734:	4b14      	ldr	r3, [pc, #80]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005736:	69db      	ldr	r3, [r3, #28]
 8005738:	4a13      	ldr	r2, [pc, #76]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800573a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800573e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b00      	cmp	r3, #0
 800574a:	d008      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800574c:	4b0e      	ldr	r3, [pc, #56]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	490b      	ldr	r1, [pc, #44]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800575a:	4313      	orrs	r3, r2
 800575c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0310 	and.w	r3, r3, #16
 8005766:	2b00      	cmp	r3, #0
 8005768:	d008      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800576a:	4b07      	ldr	r3, [pc, #28]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	4904      	ldr	r1, [pc, #16]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005778:	4313      	orrs	r3, r2
 800577a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3718      	adds	r7, #24
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	40021000 	.word	0x40021000
 800578c:	40007000 	.word	0x40007000
 8005790:	42420440 	.word	0x42420440

08005794 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005794:	b590      	push	{r4, r7, lr}
 8005796:	b08d      	sub	sp, #52	; 0x34
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800579c:	4b6b      	ldr	r3, [pc, #428]	; (800594c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800579e:	f107 040c 	add.w	r4, r7, #12
 80057a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80057a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80057a8:	4b69      	ldr	r3, [pc, #420]	; (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80057aa:	881b      	ldrh	r3, [r3, #0]
 80057ac:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80057ae:	2300      	movs	r3, #0
 80057b0:	627b      	str	r3, [r7, #36]	; 0x24
 80057b2:	2300      	movs	r3, #0
 80057b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057b6:	2300      	movs	r3, #0
 80057b8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80057ba:	2300      	movs	r3, #0
 80057bc:	61fb      	str	r3, [r7, #28]
 80057be:	2300      	movs	r3, #0
 80057c0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	3b01      	subs	r3, #1
 80057c6:	2b0f      	cmp	r3, #15
 80057c8:	f200 80b6 	bhi.w	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80057cc:	a201      	add	r2, pc, #4	; (adr r2, 80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 80057ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d2:	bf00      	nop
 80057d4:	080058b7 	.word	0x080058b7
 80057d8:	0800591d 	.word	0x0800591d
 80057dc:	08005939 	.word	0x08005939
 80057e0:	080058a7 	.word	0x080058a7
 80057e4:	08005939 	.word	0x08005939
 80057e8:	08005939 	.word	0x08005939
 80057ec:	08005939 	.word	0x08005939
 80057f0:	080058af 	.word	0x080058af
 80057f4:	08005939 	.word	0x08005939
 80057f8:	08005939 	.word	0x08005939
 80057fc:	08005939 	.word	0x08005939
 8005800:	08005939 	.word	0x08005939
 8005804:	08005939 	.word	0x08005939
 8005808:	08005939 	.word	0x08005939
 800580c:	08005939 	.word	0x08005939
 8005810:	08005815 	.word	0x08005815
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8005814:	4b4f      	ldr	r3, [pc, #316]	; (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800581a:	4b4e      	ldr	r3, [pc, #312]	; (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005822:	2b00      	cmp	r3, #0
 8005824:	f000 808a 	beq.w	800593c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	0c9b      	lsrs	r3, r3, #18
 800582c:	f003 030f 	and.w	r3, r3, #15
 8005830:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005834:	4413      	add	r3, r2
 8005836:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800583a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d018      	beq.n	8005878 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005846:	4b43      	ldr	r3, [pc, #268]	; (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	0c5b      	lsrs	r3, r3, #17
 800584c:	f003 0301 	and.w	r3, r3, #1
 8005850:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005854:	4413      	add	r3, r2
 8005856:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800585a:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00d      	beq.n	8005882 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005866:	4a3c      	ldr	r2, [pc, #240]	; (8005958 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	fbb2 f2f3 	udiv	r2, r2, r3
 800586e:	6a3b      	ldr	r3, [r7, #32]
 8005870:	fb02 f303 	mul.w	r3, r2, r3
 8005874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005876:	e004      	b.n	8005882 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005878:	6a3b      	ldr	r3, [r7, #32]
 800587a:	4a38      	ldr	r2, [pc, #224]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 800587c:	fb02 f303 	mul.w	r3, r2, r3
 8005880:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005882:	4b34      	ldr	r3, [pc, #208]	; (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800588a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800588e:	d102      	bne.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8005890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005892:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8005894:	e052      	b.n	800593c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          frequency = (pllclk * 2) / 3;
 8005896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005898:	005b      	lsls	r3, r3, #1
 800589a:	4a31      	ldr	r2, [pc, #196]	; (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>)
 800589c:	fba2 2303 	umull	r2, r3, r2, r3
 80058a0:	085b      	lsrs	r3, r3, #1
 80058a2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80058a4:	e04a      	b.n	800593c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80058a6:	f7ff fe21 	bl	80054ec <HAL_RCC_GetSysClockFreq>
 80058aa:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80058ac:	e049      	b.n	8005942 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80058ae:	f7ff fe1d 	bl	80054ec <HAL_RCC_GetSysClockFreq>
 80058b2:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80058b4:	e045      	b.n	8005942 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80058b6:	4b27      	ldr	r3, [pc, #156]	; (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058c6:	d108      	bne.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 80058d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80058d8:	e01f      	b.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058e4:	d109      	bne.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80058e6:	4b1b      	ldr	r3, [pc, #108]	; (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 80058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ea:	f003 0302 	and.w	r3, r3, #2
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 80058f2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80058f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80058f8:	e00f      	b.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005900:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005904:	d11c      	bne.n	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8005906:	4b13      	ldr	r3, [pc, #76]	; (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d016      	beq.n	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      {
        frequency = HSE_VALUE / 128U;
 8005912:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005916:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8005918:	e012      	b.n	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800591a:	e011      	b.n	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800591c:	f7ff fe52 	bl	80055c4 <HAL_RCC_GetPCLK2Freq>
 8005920:	4602      	mov	r2, r0
 8005922:	4b0c      	ldr	r3, [pc, #48]	; (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	0b9b      	lsrs	r3, r3, #14
 8005928:	f003 0303 	and.w	r3, r3, #3
 800592c:	3301      	adds	r3, #1
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	fbb2 f3f3 	udiv	r3, r2, r3
 8005934:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005936:	e004      	b.n	8005942 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    default:
    {
      break;
 8005938:	bf00      	nop
 800593a:	e002      	b.n	8005942 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 800593c:	bf00      	nop
 800593e:	e000      	b.n	8005942 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8005940:	bf00      	nop
    }
  }
  return (frequency);
 8005942:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005944:	4618      	mov	r0, r3
 8005946:	3734      	adds	r7, #52	; 0x34
 8005948:	46bd      	mov	sp, r7
 800594a:	bd90      	pop	{r4, r7, pc}
 800594c:	08010920 	.word	0x08010920
 8005950:	08010930 	.word	0x08010930
 8005954:	40021000 	.word	0x40021000
 8005958:	007a1200 	.word	0x007a1200
 800595c:	003d0900 	.word	0x003d0900
 8005960:	aaaaaaab 	.word	0xaaaaaaab

08005964 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800596c:	2300      	movs	r3, #0
 800596e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e084      	b.n	8005a84 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	7c5b      	ldrb	r3, [r3, #17]
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b00      	cmp	r3, #0
 8005982:	d105      	bne.n	8005990 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7fc fa30 	bl	8001df0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2202      	movs	r2, #2
 8005994:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fbea 	bl	8006170 <HAL_RTC_WaitForSynchro>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d004      	beq.n	80059ac <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2204      	movs	r2, #4
 80059a6:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e06b      	b.n	8005a84 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 fca3 	bl	80062f8 <RTC_EnterInitMode>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d004      	beq.n	80059c2 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2204      	movs	r2, #4
 80059bc:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e060      	b.n	8005a84 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	685a      	ldr	r2, [r3, #4]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 0207 	bic.w	r2, r2, #7
 80059d0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d005      	beq.n	80059e6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80059da:	4b2c      	ldr	r3, [pc, #176]	; (8005a8c <HAL_RTC_Init+0x128>)
 80059dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059de:	4a2b      	ldr	r2, [pc, #172]	; (8005a8c <HAL_RTC_Init+0x128>)
 80059e0:	f023 0301 	bic.w	r3, r3, #1
 80059e4:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80059e6:	4b29      	ldr	r3, [pc, #164]	; (8005a8c <HAL_RTC_Init+0x128>)
 80059e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ea:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	4926      	ldr	r1, [pc, #152]	; (8005a8c <HAL_RTC_Init+0x128>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a00:	d003      	beq.n	8005a0a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	60fb      	str	r3, [r7, #12]
 8005a08:	e00e      	b.n	8005a28 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8005a0a:	2001      	movs	r0, #1
 8005a0c:	f7ff fec2 	bl	8005794 <HAL_RCCEx_GetPeriphCLKFreq>
 8005a10:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d104      	bne.n	8005a22 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2204      	movs	r2, #4
 8005a1c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e030      	b.n	8005a84 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	3b01      	subs	r3, #1
 8005a26:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f023 010f 	bic.w	r1, r3, #15
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	0c1a      	lsrs	r2, r3, #16
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	0c1b      	lsrs	r3, r3, #16
 8005a46:	041b      	lsls	r3, r3, #16
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	b291      	uxth	r1, r2
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	6812      	ldr	r2, [r2, #0]
 8005a50:	430b      	orrs	r3, r1
 8005a52:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 fc77 	bl	8006348 <RTC_ExitInitMode>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d004      	beq.n	8005a6a <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2204      	movs	r2, #4
 8005a64:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e00c      	b.n	8005a84 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8005a82:	2300      	movs	r3, #0
  }
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	40006c00 	.word	0x40006c00

08005a90 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005a90:	b590      	push	{r4, r7, lr}
 8005a92:	b087      	sub	sp, #28
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	617b      	str	r3, [r7, #20]
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d002      	beq.n	8005ab0 <HAL_RTC_SetTime+0x20>
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d101      	bne.n	8005ab4 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e080      	b.n	8005bb6 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	7c1b      	ldrb	r3, [r3, #16]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d101      	bne.n	8005ac0 <HAL_RTC_SetTime+0x30>
 8005abc:	2302      	movs	r3, #2
 8005abe:	e07a      	b.n	8005bb6 <HAL_RTC_SetTime+0x126>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2202      	movs	r2, #2
 8005aca:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d113      	bne.n	8005afa <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005adc:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	785b      	ldrb	r3, [r3, #1]
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	011b      	lsls	r3, r3, #4
 8005aea:	1a5b      	subs	r3, r3, r1
 8005aec:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005aee:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005af4:	4413      	add	r3, r2
 8005af6:	617b      	str	r3, [r7, #20]
 8005af8:	e01e      	b.n	8005b38 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f000 fc67 	bl	80063d2 <RTC_Bcd2ToByte>
 8005b04:	4603      	mov	r3, r0
 8005b06:	461a      	mov	r2, r3
 8005b08:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005b0c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	785b      	ldrb	r3, [r3, #1]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 fc5c 	bl	80063d2 <RTC_Bcd2ToByte>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	4613      	mov	r3, r2
 8005b20:	011b      	lsls	r3, r3, #4
 8005b22:	1a9b      	subs	r3, r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005b26:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	789b      	ldrb	r3, [r3, #2]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f000 fc50 	bl	80063d2 <RTC_Bcd2ToByte>
 8005b32:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005b34:	4423      	add	r3, r4
 8005b36:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005b38:	6979      	ldr	r1, [r7, #20]
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f000 fb75 	bl	800622a <RTC_WriteTimeCounter>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d007      	beq.n	8005b56 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2204      	movs	r2, #4
 8005b4a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e02f      	b.n	8005bb6 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	685a      	ldr	r2, [r3, #4]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f022 0205 	bic.w	r2, r2, #5
 8005b64:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f000 fb86 	bl	8006278 <RTC_ReadAlarmCounter>
 8005b6c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b74:	d018      	beq.n	8005ba8 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d214      	bcs.n	8005ba8 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005b84:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005b88:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005b8a:	6939      	ldr	r1, [r7, #16]
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 fb8c 	bl	80062aa <RTC_WriteAlarmCounter>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d007      	beq.n	8005ba8 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2204      	movs	r2, #4
 8005b9c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e006      	b.n	8005bb6 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2201      	movs	r2, #1
 8005bac:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
  }
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	371c      	adds	r7, #28
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd90      	pop	{r4, r7, pc}
	...

08005bc0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b088      	sub	sp, #32
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	61bb      	str	r3, [r7, #24]
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	61fb      	str	r3, [r7, #28]
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	617b      	str	r3, [r7, #20]
 8005bd8:	2300      	movs	r3, #0
 8005bda:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d002      	beq.n	8005be8 <HAL_RTC_GetTime+0x28>
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e0b5      	b.n	8005d58 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f003 0304 	and.w	r3, r3, #4
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e0ac      	b.n	8005d58 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f000 fae3 	bl	80061ca <RTC_ReadTimeCounter>
 8005c04:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	4a55      	ldr	r2, [pc, #340]	; (8005d60 <HAL_RTC_GetTime+0x1a0>)
 8005c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c0e:	0adb      	lsrs	r3, r3, #11
 8005c10:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	4b52      	ldr	r3, [pc, #328]	; (8005d60 <HAL_RTC_GetTime+0x1a0>)
 8005c16:	fba3 1302 	umull	r1, r3, r3, r2
 8005c1a:	0adb      	lsrs	r3, r3, #11
 8005c1c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005c20:	fb01 f303 	mul.w	r3, r1, r3
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	4a4f      	ldr	r2, [pc, #316]	; (8005d64 <HAL_RTC_GetTime+0x1a4>)
 8005c28:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2c:	095b      	lsrs	r3, r3, #5
 8005c2e:	b2da      	uxtb	r2, r3
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	4a4a      	ldr	r2, [pc, #296]	; (8005d60 <HAL_RTC_GetTime+0x1a0>)
 8005c38:	fba2 1203 	umull	r1, r2, r2, r3
 8005c3c:	0ad2      	lsrs	r2, r2, #11
 8005c3e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005c42:	fb01 f202 	mul.w	r2, r1, r2
 8005c46:	1a9a      	subs	r2, r3, r2
 8005c48:	4b46      	ldr	r3, [pc, #280]	; (8005d64 <HAL_RTC_GetTime+0x1a4>)
 8005c4a:	fba3 1302 	umull	r1, r3, r3, r2
 8005c4e:	0959      	lsrs	r1, r3, #5
 8005c50:	460b      	mov	r3, r1
 8005c52:	011b      	lsls	r3, r3, #4
 8005c54:	1a5b      	subs	r3, r3, r1
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	1ad1      	subs	r1, r2, r3
 8005c5a:	b2ca      	uxtb	r2, r1
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	2b17      	cmp	r3, #23
 8005c64:	d955      	bls.n	8005d12 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	4a3f      	ldr	r2, [pc, #252]	; (8005d68 <HAL_RTC_GetTime+0x1a8>)
 8005c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c6e:	091b      	lsrs	r3, r3, #4
 8005c70:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8005c72:	6939      	ldr	r1, [r7, #16]
 8005c74:	4b3c      	ldr	r3, [pc, #240]	; (8005d68 <HAL_RTC_GetTime+0x1a8>)
 8005c76:	fba3 2301 	umull	r2, r3, r3, r1
 8005c7a:	091a      	lsrs	r2, r3, #4
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	005b      	lsls	r3, r3, #1
 8005c80:	4413      	add	r3, r2
 8005c82:	00db      	lsls	r3, r3, #3
 8005c84:	1aca      	subs	r2, r1, r3
 8005c86:	b2d2      	uxtb	r2, r2
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f000 faf3 	bl	8006278 <RTC_ReadAlarmCounter>
 8005c92:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c9a:	d008      	beq.n	8005cae <HAL_RTC_GetTime+0xee>
 8005c9c:	69fa      	ldr	r2, [r7, #28]
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d904      	bls.n	8005cae <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8005ca4:	69fa      	ldr	r2, [r7, #28]
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	61fb      	str	r3, [r7, #28]
 8005cac:	e002      	b.n	8005cb4 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8005cae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cb2:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	4a2d      	ldr	r2, [pc, #180]	; (8005d6c <HAL_RTC_GetTime+0x1ac>)
 8005cb8:	fb02 f303 	mul.w	r3, r2, r3
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005cc2:	69b9      	ldr	r1, [r7, #24]
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f000 fab0 	bl	800622a <RTC_WriteTimeCounter>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e041      	b.n	8005d58 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cda:	d00c      	beq.n	8005cf6 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8005cdc:	69fa      	ldr	r2, [r7, #28]
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005ce4:	69f9      	ldr	r1, [r7, #28]
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f000 fadf 	bl	80062aa <RTC_WriteAlarmCounter>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00a      	beq.n	8005d08 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e030      	b.n	8005d58 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005cf6:	69f9      	ldr	r1, [r7, #28]
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f000 fad6 	bl	80062aa <RTC_WriteAlarmCounter>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d001      	beq.n	8005d08 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e027      	b.n	8005d58 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8005d08:	6979      	ldr	r1, [r7, #20]
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f000 fb7e 	bl	800640c <RTC_DateUpdate>
 8005d10:	e003      	b.n	8005d1a <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	b2da      	uxtb	r2, r3
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d01a      	beq.n	8005d56 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	4618      	mov	r0, r3
 8005d26:	f000 fb37 	bl	8006398 <RTC_ByteToBcd2>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	785b      	ldrb	r3, [r3, #1]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f000 fb2e 	bl	8006398 <RTC_ByteToBcd2>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	461a      	mov	r2, r3
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	789b      	ldrb	r3, [r3, #2]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f000 fb25 	bl	8006398 <RTC_ByteToBcd2>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	461a      	mov	r2, r3
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3720      	adds	r7, #32
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	91a2b3c5 	.word	0x91a2b3c5
 8005d64:	88888889 	.word	0x88888889
 8005d68:	aaaaaaab 	.word	0xaaaaaaab
 8005d6c:	00015180 	.word	0x00015180

08005d70 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b088      	sub	sp, #32
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	61fb      	str	r3, [r7, #28]
 8005d80:	2300      	movs	r3, #0
 8005d82:	61bb      	str	r3, [r7, #24]
 8005d84:	2300      	movs	r3, #0
 8005d86:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d002      	beq.n	8005d94 <HAL_RTC_SetDate+0x24>
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e097      	b.n	8005ec8 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	7c1b      	ldrb	r3, [r3, #16]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d101      	bne.n	8005da4 <HAL_RTC_SetDate+0x34>
 8005da0:	2302      	movs	r3, #2
 8005da2:	e091      	b.n	8005ec8 <HAL_RTC_SetDate+0x158>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2201      	movs	r2, #1
 8005da8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2202      	movs	r2, #2
 8005dae:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d10c      	bne.n	8005dd0 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	78da      	ldrb	r2, [r3, #3]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	785a      	ldrb	r2, [r3, #1]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	789a      	ldrb	r2, [r3, #2]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	739a      	strb	r2, [r3, #14]
 8005dce:	e01a      	b.n	8005e06 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	78db      	ldrb	r3, [r3, #3]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f000 fafc 	bl	80063d2 <RTC_Bcd2ToByte>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	461a      	mov	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	785b      	ldrb	r3, [r3, #1]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f000 faf3 	bl	80063d2 <RTC_Bcd2ToByte>
 8005dec:	4603      	mov	r3, r0
 8005dee:	461a      	mov	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	789b      	ldrb	r3, [r3, #2]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f000 faea 	bl	80063d2 <RTC_Bcd2ToByte>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	461a      	mov	r2, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	7bdb      	ldrb	r3, [r3, #15]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	7b59      	ldrb	r1, [r3, #13]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	7b9b      	ldrb	r3, [r3, #14]
 8005e14:	461a      	mov	r2, r3
 8005e16:	f000 fbd5 	bl	80065c4 <RTC_WeekDayNum>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	7b1a      	ldrb	r2, [r3, #12]
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f000 f9cd 	bl	80061ca <RTC_ReadTimeCounter>
 8005e30:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	4a26      	ldr	r2, [pc, #152]	; (8005ed0 <HAL_RTC_SetDate+0x160>)
 8005e36:	fba2 2303 	umull	r2, r3, r2, r3
 8005e3a:	0adb      	lsrs	r3, r3, #11
 8005e3c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	2b18      	cmp	r3, #24
 8005e42:	d93a      	bls.n	8005eba <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	4a23      	ldr	r2, [pc, #140]	; (8005ed4 <HAL_RTC_SetDate+0x164>)
 8005e48:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4c:	091b      	lsrs	r3, r3, #4
 8005e4e:	4a22      	ldr	r2, [pc, #136]	; (8005ed8 <HAL_RTC_SetDate+0x168>)
 8005e50:	fb02 f303 	mul.w	r3, r2, r3
 8005e54:	69fa      	ldr	r2, [r7, #28]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005e5a:	69f9      	ldr	r1, [r7, #28]
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 f9e4 	bl	800622a <RTC_WriteTimeCounter>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d007      	beq.n	8005e78 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2204      	movs	r2, #4
 8005e6c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e027      	b.n	8005ec8 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f000 f9fd 	bl	8006278 <RTC_ReadAlarmCounter>
 8005e7e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e86:	d018      	beq.n	8005eba <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d214      	bcs.n	8005eba <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005e96:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005e9a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005e9c:	69b9      	ldr	r1, [r7, #24]
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f000 fa03 	bl	80062aa <RTC_WriteAlarmCounter>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d007      	beq.n	8005eba <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2204      	movs	r2, #4
 8005eae:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e006      	b.n	8005ec8 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3720      	adds	r7, #32
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	91a2b3c5 	.word	0x91a2b3c5
 8005ed4:	aaaaaaab 	.word	0xaaaaaaab
 8005ed8:	00015180 	.word	0x00015180

08005edc <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8005ee8:	f107 0314 	add.w	r3, r7, #20
 8005eec:	2100      	movs	r1, #0
 8005eee:	460a      	mov	r2, r1
 8005ef0:	801a      	strh	r2, [r3, #0]
 8005ef2:	460a      	mov	r2, r1
 8005ef4:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d002      	beq.n	8005f02 <HAL_RTC_GetDate+0x26>
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e03a      	b.n	8005f7c <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8005f06:	f107 0314 	add.w	r3, r7, #20
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f7ff fe56 	bl	8005bc0 <HAL_RTC_GetTime>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d001      	beq.n	8005f1e <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e02e      	b.n	8005f7c <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	7b1a      	ldrb	r2, [r3, #12]
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	7bda      	ldrb	r2, [r3, #15]
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	7b5a      	ldrb	r2, [r3, #13]
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	7b9a      	ldrb	r2, [r3, #14]
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d01a      	beq.n	8005f7a <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	78db      	ldrb	r3, [r3, #3]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f000 fa25 	bl	8006398 <RTC_ByteToBcd2>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	461a      	mov	r2, r3
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	785b      	ldrb	r3, [r3, #1]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f000 fa1c 	bl	8006398 <RTC_ByteToBcd2>
 8005f60:	4603      	mov	r3, r0
 8005f62:	461a      	mov	r2, r3
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	789b      	ldrb	r3, [r3, #2]
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f000 fa13 	bl	8006398 <RTC_ByteToBcd2>
 8005f72:	4603      	mov	r3, r0
 8005f74:	461a      	mov	r2, r3
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3718      	adds	r7, #24
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005f84:	b590      	push	{r4, r7, lr}
 8005f86:	b089      	sub	sp, #36	; 0x24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8005f90:	2300      	movs	r3, #0
 8005f92:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8005f94:	f107 0314 	add.w	r3, r7, #20
 8005f98:	2100      	movs	r1, #0
 8005f9a:	460a      	mov	r2, r1
 8005f9c:	801a      	strh	r2, [r3, #0]
 8005f9e:	460a      	mov	r2, r1
 8005fa0:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d002      	beq.n	8005fae <HAL_RTC_SetAlarm+0x2a>
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d101      	bne.n	8005fb2 <HAL_RTC_SetAlarm+0x2e>
  {
    return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e07d      	b.n	80060ae <HAL_RTC_SetAlarm+0x12a>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	7c1b      	ldrb	r3, [r3, #16]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d101      	bne.n	8005fbe <HAL_RTC_SetAlarm+0x3a>
 8005fba:	2302      	movs	r3, #2
 8005fbc:	e077      	b.n	80060ae <HAL_RTC_SetAlarm+0x12a>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8005fca:	f107 0314 	add.w	r3, r7, #20
 8005fce:	2200      	movs	r2, #0
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f7ff fdf4 	bl	8005bc0 <HAL_RTC_GetTime>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <HAL_RTC_SetAlarm+0x5e>
  {
    return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e065      	b.n	80060ae <HAL_RTC_SetAlarm+0x12a>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8005fe2:	7d3b      	ldrb	r3, [r7, #20]
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005fea:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8005fee:	7d7b      	ldrb	r3, [r7, #21]
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	011b      	lsls	r3, r3, #4
 8005ff6:	1a5b      	subs	r3, r3, r1
 8005ff8:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8005ffa:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8005ffc:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8005ffe:	4413      	add	r3, r2
 8006000:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d113      	bne.n	8006030 <HAL_RTC_SetAlarm+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	461a      	mov	r2, r3
 800600e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006012:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	785b      	ldrb	r3, [r3, #1]
 800601a:	4619      	mov	r1, r3
 800601c:	460b      	mov	r3, r1
 800601e:	011b      	lsls	r3, r3, #4
 8006020:	1a5b      	subs	r3, r3, r1
 8006022:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8006024:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800602a:	4413      	add	r3, r2
 800602c:	61fb      	str	r3, [r7, #28]
 800602e:	e01e      	b.n	800606e <HAL_RTC_SetAlarm+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	4618      	mov	r0, r3
 8006036:	f000 f9cc 	bl	80063d2 <RTC_Bcd2ToByte>
 800603a:	4603      	mov	r3, r0
 800603c:	461a      	mov	r2, r3
 800603e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006042:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	785b      	ldrb	r3, [r3, #1]
 800604a:	4618      	mov	r0, r3
 800604c:	f000 f9c1 	bl	80063d2 <RTC_Bcd2ToByte>
 8006050:	4603      	mov	r3, r0
 8006052:	461a      	mov	r2, r3
 8006054:	4613      	mov	r3, r2
 8006056:	011b      	lsls	r3, r3, #4
 8006058:	1a9b      	subs	r3, r3, r2
 800605a:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800605c:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	789b      	ldrb	r3, [r3, #2]
 8006062:	4618      	mov	r0, r3
 8006064:	f000 f9b5 	bl	80063d2 <RTC_Bcd2ToByte>
 8006068:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800606a:	4423      	add	r3, r4
 800606c:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 800606e:	69fa      	ldr	r2, [r7, #28]
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	429a      	cmp	r2, r3
 8006074:	d205      	bcs.n	8006082 <HAL_RTC_SetAlarm+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800607c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006080:	61fb      	str	r3, [r7, #28]
  }

  /* Write Alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006082:	69f9      	ldr	r1, [r7, #28]
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 f910 	bl	80062aa <RTC_WriteAlarmCounter>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d007      	beq.n	80060a0 <HAL_RTC_SetAlarm+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2204      	movs	r2, #4
 8006094:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e006      	b.n	80060ae <HAL_RTC_SetAlarm+0x12a>
  }
  else
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2201      	movs	r2, #1
 80060a4:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80060ac:	2300      	movs	r3, #0
  }
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3724      	adds	r7, #36	; 0x24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd90      	pop	{r4, r7, pc}
	...

080060b8 <HAL_RTC_DeactivateAlarm>:
  *          This parameter can be one of the following values:
  *            @arg RTC_ALARM_A:  AlarmA
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Check input parameters */
  if (hrtc == NULL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <HAL_RTC_DeactivateAlarm+0x14>
  {
    return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e04b      	b.n	8006164 <HAL_RTC_DeactivateAlarm+0xac>
  }

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	7c1b      	ldrb	r3, [r3, #16]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d101      	bne.n	80060d8 <HAL_RTC_DeactivateAlarm+0x20>
 80060d4:	2302      	movs	r3, #2
 80060d6:	e045      	b.n	8006164 <HAL_RTC_DeactivateAlarm+0xac>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2202      	movs	r2, #2
 80060e2:	745a      	strb	r2, [r3, #17]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f022 0202 	bic.w	r2, r2, #2
 80060f2:	601a      	str	r2, [r3, #0]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 f8ff 	bl	80062f8 <RTC_EnterInitMode>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d007      	beq.n	8006110 <HAL_RTC_DeactivateAlarm+0x58>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2204      	movs	r2, #4
 8006104:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e029      	b.n	8006164 <HAL_RTC_DeactivateAlarm+0xac>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f06f 0202 	mvn.w	r2, #2
 8006118:	605a      	str	r2, [r3, #4]

    /* Set to default values ALRH & ALRL registers */
    WRITE_REG(hrtc->Instance->ALRH, RTC_ALARM_RESETVALUE_REGISTER);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006122:	621a      	str	r2, [r3, #32]
    WRITE_REG(hrtc->Instance->ALRL, RTC_ALARM_RESETVALUE_REGISTER);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800612c:	625a      	str	r2, [r3, #36]	; 0x24

    /* RTC Alarm Interrupt Configuration: Disable EXTI configuration */
    __HAL_RTC_ALARM_EXTI_DISABLE_IT();
 800612e:	4b0f      	ldr	r3, [pc, #60]	; (800616c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a0e      	ldr	r2, [pc, #56]	; (800616c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006134:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006138:	6013      	str	r3, [r2, #0]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f904 	bl	8006348 <RTC_ExitInitMode>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d007      	beq.n	8006156 <HAL_RTC_DeactivateAlarm+0x9e>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2204      	movs	r2, #4
 800614a:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e006      	b.n	8006164 <HAL_RTC_DeactivateAlarm+0xac>
    }
  }
  hrtc->State = HAL_RTC_STATE_READY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3708      	adds	r7, #8
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	40010400 	.word	0x40010400

08006170 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006178:	2300      	movs	r3, #0
 800617a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e01d      	b.n	80061c2 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	685a      	ldr	r2, [r3, #4]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f022 0208 	bic.w	r2, r2, #8
 8006194:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006196:	f7fc fec3 	bl	8002f20 <HAL_GetTick>
 800619a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800619c:	e009      	b.n	80061b2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800619e:	f7fc febf 	bl	8002f20 <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061ac:	d901      	bls.n	80061b2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e007      	b.n	80061c2 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f003 0308 	and.w	r3, r3, #8
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d0ee      	beq.n	800619e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80061ca:	b480      	push	{r7}
 80061cc:	b087      	sub	sp, #28
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80061d2:	2300      	movs	r3, #0
 80061d4:	827b      	strh	r3, [r7, #18]
 80061d6:	2300      	movs	r3, #0
 80061d8:	823b      	strh	r3, [r7, #16]
 80061da:	2300      	movs	r3, #0
 80061dc:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80061de:	2300      	movs	r3, #0
 80061e0:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	69db      	ldr	r3, [r3, #28]
 80061f0:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	699b      	ldr	r3, [r3, #24]
 80061f8:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80061fa:	8a7a      	ldrh	r2, [r7, #18]
 80061fc:	8a3b      	ldrh	r3, [r7, #16]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d008      	beq.n	8006214 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8006202:	8a3b      	ldrh	r3, [r7, #16]
 8006204:	041a      	lsls	r2, r3, #16
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	69db      	ldr	r3, [r3, #28]
 800620c:	b29b      	uxth	r3, r3
 800620e:	4313      	orrs	r3, r2
 8006210:	617b      	str	r3, [r7, #20]
 8006212:	e004      	b.n	800621e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8006214:	8a7b      	ldrh	r3, [r7, #18]
 8006216:	041a      	lsls	r2, r3, #16
 8006218:	89fb      	ldrh	r3, [r7, #14]
 800621a:	4313      	orrs	r3, r2
 800621c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800621e:	697b      	ldr	r3, [r7, #20]
}
 8006220:	4618      	mov	r0, r3
 8006222:	371c      	adds	r7, #28
 8006224:	46bd      	mov	sp, r7
 8006226:	bc80      	pop	{r7}
 8006228:	4770      	bx	lr

0800622a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b084      	sub	sp, #16
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006234:	2300      	movs	r3, #0
 8006236:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f85d 	bl	80062f8 <RTC_EnterInitMode>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d002      	beq.n	800624a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	73fb      	strb	r3, [r7, #15]
 8006248:	e011      	b.n	800626e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	683a      	ldr	r2, [r7, #0]
 8006250:	0c12      	lsrs	r2, r2, #16
 8006252:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	683a      	ldr	r2, [r7, #0]
 800625a:	b292      	uxth	r2, r2
 800625c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f872 	bl	8006348 <RTC_ExitInitMode>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800626e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006270:	4618      	mov	r0, r3
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8006280:	2300      	movs	r3, #0
 8006282:	81fb      	strh	r3, [r7, #14]
 8006284:	2300      	movs	r3, #0
 8006286:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006296:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8006298:	89fb      	ldrh	r3, [r7, #14]
 800629a:	041a      	lsls	r2, r3, #16
 800629c:	89bb      	ldrh	r3, [r7, #12]
 800629e:	4313      	orrs	r3, r2
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3714      	adds	r7, #20
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bc80      	pop	{r7}
 80062a8:	4770      	bx	lr

080062aa <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b084      	sub	sp, #16
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062b4:	2300      	movs	r3, #0
 80062b6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f81d 	bl	80062f8 <RTC_EnterInitMode>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d002      	beq.n	80062ca <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	73fb      	strb	r3, [r7, #15]
 80062c8:	e011      	b.n	80062ee <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	0c12      	lsrs	r2, r2, #16
 80062d2:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	683a      	ldr	r2, [r7, #0]
 80062da:	b292      	uxth	r2, r2
 80062dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f832 	bl	8006348 <RTC_ExitInitMode>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d001      	beq.n	80062ee <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80062ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006300:	2300      	movs	r3, #0
 8006302:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8006304:	f7fc fe0c 	bl	8002f20 <HAL_GetTick>
 8006308:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800630a:	e009      	b.n	8006320 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800630c:	f7fc fe08 	bl	8002f20 <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800631a:	d901      	bls.n	8006320 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e00f      	b.n	8006340 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f003 0320 	and.w	r3, r3, #32
 800632a:	2b00      	cmp	r3, #0
 800632c:	d0ee      	beq.n	800630c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f042 0210 	orr.w	r2, r2, #16
 800633c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006350:	2300      	movs	r3, #0
 8006352:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	685a      	ldr	r2, [r3, #4]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f022 0210 	bic.w	r2, r2, #16
 8006362:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006364:	f7fc fddc 	bl	8002f20 <HAL_GetTick>
 8006368:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800636a:	e009      	b.n	8006380 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800636c:	f7fc fdd8 	bl	8002f20 <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800637a:	d901      	bls.n	8006380 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e007      	b.n	8006390 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f003 0320 	and.w	r3, r3, #32
 800638a:	2b00      	cmp	r3, #0
 800638c:	d0ee      	beq.n	800636c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	4603      	mov	r3, r0
 80063a0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80063a2:	2300      	movs	r3, #0
 80063a4:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80063a6:	e005      	b.n	80063b4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	3301      	adds	r3, #1
 80063ac:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80063ae:	79fb      	ldrb	r3, [r7, #7]
 80063b0:	3b0a      	subs	r3, #10
 80063b2:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80063b4:	79fb      	ldrb	r3, [r7, #7]
 80063b6:	2b09      	cmp	r3, #9
 80063b8:	d8f6      	bhi.n	80063a8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	011b      	lsls	r3, r3, #4
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	79fb      	ldrb	r3, [r7, #7]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	b2db      	uxtb	r3, r3
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3714      	adds	r7, #20
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bc80      	pop	{r7}
 80063d0:	4770      	bx	lr

080063d2 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b085      	sub	sp, #20
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	4603      	mov	r3, r0
 80063da:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80063dc:	2300      	movs	r3, #0
 80063de:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80063e0:	79fb      	ldrb	r3, [r7, #7]
 80063e2:	091b      	lsrs	r3, r3, #4
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	461a      	mov	r2, r3
 80063e8:	4613      	mov	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	005b      	lsls	r3, r3, #1
 80063f0:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80063f2:	79fb      	ldrb	r3, [r7, #7]
 80063f4:	f003 030f 	and.w	r3, r3, #15
 80063f8:	b2da      	uxtb	r2, r3
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	4413      	add	r3, r2
 8006400:	b2db      	uxtb	r3, r3
}
 8006402:	4618      	mov	r0, r3
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	bc80      	pop	{r7}
 800640a:	4770      	bx	lr

0800640c <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8006416:	2300      	movs	r3, #0
 8006418:	617b      	str	r3, [r7, #20]
 800641a:	2300      	movs	r3, #0
 800641c:	613b      	str	r3, [r7, #16]
 800641e:	2300      	movs	r3, #0
 8006420:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8006422:	2300      	movs	r3, #0
 8006424:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	7bdb      	ldrb	r3, [r3, #15]
 800642a:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	7b5b      	ldrb	r3, [r3, #13]
 8006430:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	7b9b      	ldrb	r3, [r3, #14]
 8006436:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8006438:	2300      	movs	r3, #0
 800643a:	60bb      	str	r3, [r7, #8]
 800643c:	e06f      	b.n	800651e <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d011      	beq.n	8006468 <RTC_DateUpdate+0x5c>
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	2b03      	cmp	r3, #3
 8006448:	d00e      	beq.n	8006468 <RTC_DateUpdate+0x5c>
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	2b05      	cmp	r3, #5
 800644e:	d00b      	beq.n	8006468 <RTC_DateUpdate+0x5c>
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	2b07      	cmp	r3, #7
 8006454:	d008      	beq.n	8006468 <RTC_DateUpdate+0x5c>
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	2b08      	cmp	r3, #8
 800645a:	d005      	beq.n	8006468 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	2b0a      	cmp	r3, #10
 8006460:	d002      	beq.n	8006468 <RTC_DateUpdate+0x5c>
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	2b0c      	cmp	r3, #12
 8006466:	d117      	bne.n	8006498 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2b1e      	cmp	r3, #30
 800646c:	d803      	bhi.n	8006476 <RTC_DateUpdate+0x6a>
      {
        day++;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	3301      	adds	r3, #1
 8006472:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8006474:	e050      	b.n	8006518 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	2b0c      	cmp	r3, #12
 800647a:	d005      	beq.n	8006488 <RTC_DateUpdate+0x7c>
        {
          month++;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	3301      	adds	r3, #1
 8006480:	613b      	str	r3, [r7, #16]
          day = 1U;
 8006482:	2301      	movs	r3, #1
 8006484:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8006486:	e047      	b.n	8006518 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8006488:	2301      	movs	r3, #1
 800648a:	613b      	str	r3, [r7, #16]
          day = 1U;
 800648c:	2301      	movs	r3, #1
 800648e:	60fb      	str	r3, [r7, #12]
          year++;
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	3301      	adds	r3, #1
 8006494:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8006496:	e03f      	b.n	8006518 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	2b04      	cmp	r3, #4
 800649c:	d008      	beq.n	80064b0 <RTC_DateUpdate+0xa4>
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	2b06      	cmp	r3, #6
 80064a2:	d005      	beq.n	80064b0 <RTC_DateUpdate+0xa4>
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	2b09      	cmp	r3, #9
 80064a8:	d002      	beq.n	80064b0 <RTC_DateUpdate+0xa4>
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	2b0b      	cmp	r3, #11
 80064ae:	d10c      	bne.n	80064ca <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2b1d      	cmp	r3, #29
 80064b4:	d803      	bhi.n	80064be <RTC_DateUpdate+0xb2>
      {
        day++;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	3301      	adds	r3, #1
 80064ba:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80064bc:	e02c      	b.n	8006518 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	3301      	adds	r3, #1
 80064c2:	613b      	str	r3, [r7, #16]
        day = 1U;
 80064c4:	2301      	movs	r3, #1
 80064c6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80064c8:	e026      	b.n	8006518 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d123      	bne.n	8006518 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2b1b      	cmp	r3, #27
 80064d4:	d803      	bhi.n	80064de <RTC_DateUpdate+0xd2>
      {
        day++;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	3301      	adds	r3, #1
 80064da:	60fb      	str	r3, [r7, #12]
 80064dc:	e01c      	b.n	8006518 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2b1c      	cmp	r3, #28
 80064e2:	d111      	bne.n	8006508 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	4618      	mov	r0, r3
 80064ea:	f000 f839 	bl	8006560 <RTC_IsLeapYear>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d003      	beq.n	80064fc <RTC_DateUpdate+0xf0>
        {
          day++;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	3301      	adds	r3, #1
 80064f8:	60fb      	str	r3, [r7, #12]
 80064fa:	e00d      	b.n	8006518 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	3301      	adds	r3, #1
 8006500:	613b      	str	r3, [r7, #16]
          day = 1U;
 8006502:	2301      	movs	r3, #1
 8006504:	60fb      	str	r3, [r7, #12]
 8006506:	e007      	b.n	8006518 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2b1d      	cmp	r3, #29
 800650c:	d104      	bne.n	8006518 <RTC_DateUpdate+0x10c>
      {
        month++;
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	3301      	adds	r3, #1
 8006512:	613b      	str	r3, [r7, #16]
        day = 1U;
 8006514:	2301      	movs	r3, #1
 8006516:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	3301      	adds	r3, #1
 800651c:	60bb      	str	r3, [r7, #8]
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	429a      	cmp	r2, r3
 8006524:	d38b      	bcc.n	800643e <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	b2da      	uxtb	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	b2da      	uxtb	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	b2da      	uxtb	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	b2db      	uxtb	r3, r3
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	b2d2      	uxtb	r2, r2
 8006546:	4619      	mov	r1, r3
 8006548:	6978      	ldr	r0, [r7, #20]
 800654a:	f000 f83b 	bl	80065c4 <RTC_WeekDayNum>
 800654e:	4603      	mov	r3, r0
 8006550:	461a      	mov	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	731a      	strb	r2, [r3, #12]
}
 8006556:	bf00      	nop
 8006558:	3718      	adds	r7, #24
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
	...

08006560 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	4603      	mov	r3, r0
 8006568:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800656a:	88fb      	ldrh	r3, [r7, #6]
 800656c:	f003 0303 	and.w	r3, r3, #3
 8006570:	b29b      	uxth	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d001      	beq.n	800657a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8006576:	2300      	movs	r3, #0
 8006578:	e01d      	b.n	80065b6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800657a:	88fb      	ldrh	r3, [r7, #6]
 800657c:	4a10      	ldr	r2, [pc, #64]	; (80065c0 <RTC_IsLeapYear+0x60>)
 800657e:	fba2 1203 	umull	r1, r2, r2, r3
 8006582:	0952      	lsrs	r2, r2, #5
 8006584:	2164      	movs	r1, #100	; 0x64
 8006586:	fb01 f202 	mul.w	r2, r1, r2
 800658a:	1a9b      	subs	r3, r3, r2
 800658c:	b29b      	uxth	r3, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d001      	beq.n	8006596 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8006592:	2301      	movs	r3, #1
 8006594:	e00f      	b.n	80065b6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8006596:	88fb      	ldrh	r3, [r7, #6]
 8006598:	4a09      	ldr	r2, [pc, #36]	; (80065c0 <RTC_IsLeapYear+0x60>)
 800659a:	fba2 1203 	umull	r1, r2, r2, r3
 800659e:	09d2      	lsrs	r2, r2, #7
 80065a0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80065a4:	fb01 f202 	mul.w	r2, r1, r2
 80065a8:	1a9b      	subs	r3, r3, r2
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d101      	bne.n	80065b4 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e000      	b.n	80065b6 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80065b4:	2300      	movs	r3, #0
  }
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	370c      	adds	r7, #12
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bc80      	pop	{r7}
 80065be:	4770      	bx	lr
 80065c0:	51eb851f 	.word	0x51eb851f

080065c4 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	460b      	mov	r3, r1
 80065ce:	70fb      	strb	r3, [r7, #3]
 80065d0:	4613      	mov	r3, r2
 80065d2:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80065d4:	2300      	movs	r3, #0
 80065d6:	60bb      	str	r3, [r7, #8]
 80065d8:	2300      	movs	r3, #0
 80065da:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80065e2:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80065e4:	78fb      	ldrb	r3, [r7, #3]
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d82d      	bhi.n	8006646 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80065ea:	78fa      	ldrb	r2, [r7, #3]
 80065ec:	4613      	mov	r3, r2
 80065ee:	005b      	lsls	r3, r3, #1
 80065f0:	4413      	add	r3, r2
 80065f2:	00db      	lsls	r3, r3, #3
 80065f4:	1a9b      	subs	r3, r3, r2
 80065f6:	4a2c      	ldr	r2, [pc, #176]	; (80066a8 <RTC_WeekDayNum+0xe4>)
 80065f8:	fba2 2303 	umull	r2, r3, r2, r3
 80065fc:	085a      	lsrs	r2, r3, #1
 80065fe:	78bb      	ldrb	r3, [r7, #2]
 8006600:	441a      	add	r2, r3
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	441a      	add	r2, r3
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	3b01      	subs	r3, #1
 800660a:	089b      	lsrs	r3, r3, #2
 800660c:	441a      	add	r2, r3
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	3b01      	subs	r3, #1
 8006612:	4926      	ldr	r1, [pc, #152]	; (80066ac <RTC_WeekDayNum+0xe8>)
 8006614:	fba1 1303 	umull	r1, r3, r1, r3
 8006618:	095b      	lsrs	r3, r3, #5
 800661a:	1ad2      	subs	r2, r2, r3
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	3b01      	subs	r3, #1
 8006620:	4922      	ldr	r1, [pc, #136]	; (80066ac <RTC_WeekDayNum+0xe8>)
 8006622:	fba1 1303 	umull	r1, r3, r1, r3
 8006626:	09db      	lsrs	r3, r3, #7
 8006628:	4413      	add	r3, r2
 800662a:	1d1a      	adds	r2, r3, #4
 800662c:	4b20      	ldr	r3, [pc, #128]	; (80066b0 <RTC_WeekDayNum+0xec>)
 800662e:	fba3 1302 	umull	r1, r3, r3, r2
 8006632:	1ad1      	subs	r1, r2, r3
 8006634:	0849      	lsrs	r1, r1, #1
 8006636:	440b      	add	r3, r1
 8006638:	0899      	lsrs	r1, r3, #2
 800663a:	460b      	mov	r3, r1
 800663c:	00db      	lsls	r3, r3, #3
 800663e:	1a5b      	subs	r3, r3, r1
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	60fb      	str	r3, [r7, #12]
 8006644:	e029      	b.n	800669a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8006646:	78fa      	ldrb	r2, [r7, #3]
 8006648:	4613      	mov	r3, r2
 800664a:	005b      	lsls	r3, r3, #1
 800664c:	4413      	add	r3, r2
 800664e:	00db      	lsls	r3, r3, #3
 8006650:	1a9b      	subs	r3, r3, r2
 8006652:	4a15      	ldr	r2, [pc, #84]	; (80066a8 <RTC_WeekDayNum+0xe4>)
 8006654:	fba2 2303 	umull	r2, r3, r2, r3
 8006658:	085a      	lsrs	r2, r3, #1
 800665a:	78bb      	ldrb	r3, [r7, #2]
 800665c:	441a      	add	r2, r3
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	441a      	add	r2, r3
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	089b      	lsrs	r3, r3, #2
 8006666:	441a      	add	r2, r3
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	4910      	ldr	r1, [pc, #64]	; (80066ac <RTC_WeekDayNum+0xe8>)
 800666c:	fba1 1303 	umull	r1, r3, r1, r3
 8006670:	095b      	lsrs	r3, r3, #5
 8006672:	1ad2      	subs	r2, r2, r3
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	490d      	ldr	r1, [pc, #52]	; (80066ac <RTC_WeekDayNum+0xe8>)
 8006678:	fba1 1303 	umull	r1, r3, r1, r3
 800667c:	09db      	lsrs	r3, r3, #7
 800667e:	4413      	add	r3, r2
 8006680:	1c9a      	adds	r2, r3, #2
 8006682:	4b0b      	ldr	r3, [pc, #44]	; (80066b0 <RTC_WeekDayNum+0xec>)
 8006684:	fba3 1302 	umull	r1, r3, r3, r2
 8006688:	1ad1      	subs	r1, r2, r3
 800668a:	0849      	lsrs	r1, r1, #1
 800668c:	440b      	add	r3, r1
 800668e:	0899      	lsrs	r1, r3, #2
 8006690:	460b      	mov	r3, r1
 8006692:	00db      	lsls	r3, r3, #3
 8006694:	1a5b      	subs	r3, r3, r1
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	b2db      	uxtb	r3, r3
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3714      	adds	r7, #20
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bc80      	pop	{r7}
 80066a6:	4770      	bx	lr
 80066a8:	38e38e39 	.word	0x38e38e39
 80066ac:	51eb851f 	.word	0x51eb851f
 80066b0:	24924925 	.word	0x24924925

080066b4 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b087      	sub	sp, #28
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80066c0:	2300      	movs	r3, #0
 80066c2:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 80066c4:	4b07      	ldr	r3, [pc, #28]	; (80066e4 <HAL_RTCEx_BKUPWrite+0x30>)
 80066c6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	4413      	add	r3, r2
 80066d0:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	b292      	uxth	r2, r2
 80066d8:	601a      	str	r2, [r3, #0]
}
 80066da:	bf00      	nop
 80066dc:	371c      	adds	r7, #28
 80066de:	46bd      	mov	sp, r7
 80066e0:	bc80      	pop	{r7}
 80066e2:	4770      	bx	lr
 80066e4:	40006c00 	.word	0x40006c00

080066e8 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 80066f2:	2300      	movs	r3, #0
 80066f4:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 80066f6:	2300      	movs	r3, #0
 80066f8:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 80066fa:	4b08      	ldr	r3, [pc, #32]	; (800671c <HAL_RTCEx_BKUPRead+0x34>)
 80066fc:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	4413      	add	r3, r2
 8006706:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	b29b      	uxth	r3, r3
 800670e:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8006710:	68bb      	ldr	r3, [r7, #8]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	bc80      	pop	{r7}
 800671a:	4770      	bx	lr
 800671c:	40006c00 	.word	0x40006c00

08006720 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e022      	b.n	8006778 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d105      	bne.n	800674a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f7fb fbe9 	bl	8001f1c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2203      	movs	r2, #3
 800674e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f814 	bl	8006780 <HAL_SD_InitCard>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d001      	beq.n	8006762 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e00a      	b.n	8006778 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3708      	adds	r7, #8
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006780:	b5b0      	push	{r4, r5, r7, lr}
 8006782:	b08e      	sub	sp, #56	; 0x38
 8006784:	af04      	add	r7, sp, #16
 8006786:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006788:	2300      	movs	r3, #0
 800678a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800678c:	2300      	movs	r3, #0
 800678e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006790:	2300      	movs	r3, #0
 8006792:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006794:	2300      	movs	r3, #0
 8006796:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006798:	2300      	movs	r3, #0
 800679a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800679c:	2376      	movs	r3, #118	; 0x76
 800679e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681d      	ldr	r5, [r3, #0]
 80067a4:	466c      	mov	r4, sp
 80067a6:	f107 0314 	add.w	r3, r7, #20
 80067aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80067ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80067b2:	f107 0308 	add.w	r3, r7, #8
 80067b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80067b8:	4628      	mov	r0, r5
 80067ba:	f001 fb85 	bl	8007ec8 <SDIO_Init>
 80067be:	4603      	mov	r3, r0
 80067c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80067c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d001      	beq.n	80067d0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e031      	b.n	8006834 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80067d0:	4b1a      	ldr	r3, [pc, #104]	; (800683c <HAL_SD_InitCard+0xbc>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4618      	mov	r0, r3
 80067dc:	f001 fbba 	bl	8007f54 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80067e0:	4b16      	ldr	r3, [pc, #88]	; (800683c <HAL_SD_InitCard+0xbc>)
 80067e2:	2201      	movs	r2, #1
 80067e4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 fea2 	bl	8007530 <SD_PowerON>
 80067ec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80067ee:	6a3b      	ldr	r3, [r7, #32]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00b      	beq.n	800680c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006800:	6a3b      	ldr	r3, [r7, #32]
 8006802:	431a      	orrs	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e013      	b.n	8006834 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 fdc2 	bl	8007396 <SD_InitCard>
 8006812:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006814:	6a3b      	ldr	r3, [r7, #32]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00b      	beq.n	8006832 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006826:	6a3b      	ldr	r3, [r7, #32]
 8006828:	431a      	orrs	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e000      	b.n	8006834 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3728      	adds	r7, #40	; 0x28
 8006838:	46bd      	mov	sp, r7
 800683a:	bdb0      	pop	{r4, r5, r7, pc}
 800683c:	423000a0 	.word	0x423000a0

08006840 <HAL_SD_DeInit>:
  * @brief  De-Initializes the SD card.
  * @param  hsd: Pointer to SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_DeInit(SD_HandleTypeDef *hsd)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <HAL_SD_DeInit+0x12>
  {
    return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e011      	b.n	8006876 <HAL_SD_DeInit+0x36>
  }

  /* Check the parameters */
  assert_param(IS_SDIO_ALL_INSTANCE(hsd->Instance));

  hsd->State = HAL_SD_STATE_BUSY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2203      	movs	r2, #3
 8006856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Set SD power state to off */
  SD_PowerOFF(hsd);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fef6 	bl	800764c <SD_PowerOFF>

  /* DeInit the low level hardware */
  hsd->MspDeInitCallback(hsd);
#else
  /* De-Initialize the MSP layer */
  HAL_SD_MspDeInit(hsd);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f7fb fbb5 	bl	8001fd0 <HAL_SD_MspDeInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_RESET;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3708      	adds	r7, #8
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
	...

08006880 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b092      	sub	sp, #72	; 0x48
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	607a      	str	r2, [r7, #4]
 800688c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800688e:	f7fc fb47 	bl	8002f20 <HAL_GetTick>
 8006892:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d107      	bne.n	80068b2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e1d9      	b.n	8006c66 <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	f040 81cc 	bne.w	8006c58 <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80068c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	441a      	add	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d907      	bls.n	80068e4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e1c0      	b.n	8006c66 <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2203      	movs	r2, #3
 80068e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2200      	movs	r2, #0
 80068f2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d002      	beq.n	8006902 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80068fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fe:	025b      	lsls	r3, r3, #9
 8006900:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f44f 7100 	mov.w	r1, #512	; 0x200
 800690a:	4618      	mov	r0, r3
 800690c:	f001 fbbd 	bl	800808a <SDMMC_CmdBlockLength>
 8006910:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8006912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00f      	beq.n	8006938 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a9b      	ldr	r2, [pc, #620]	; (8006b8c <HAL_SD_ReadBlocks+0x30c>)
 800691e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006926:	431a      	orrs	r2, r3
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e196      	b.n	8006c66 <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006938:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800693c:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	025b      	lsls	r3, r3, #9
 8006942:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006944:	2390      	movs	r3, #144	; 0x90
 8006946:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006948:	2302      	movs	r3, #2
 800694a:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800694c:	2300      	movs	r3, #0
 800694e:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006950:	2301      	movs	r3, #1
 8006952:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f107 0214 	add.w	r2, r7, #20
 800695c:	4611      	mov	r1, r2
 800695e:	4618      	mov	r0, r3
 8006960:	f001 fb68 	bl	8008034 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d90a      	bls.n	8006980 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2202      	movs	r2, #2
 800696e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006976:	4618      	mov	r0, r3
 8006978:	f001 fbcb 	bl	8008112 <SDMMC_CmdReadMultiBlock>
 800697c:	6478      	str	r0, [r7, #68]	; 0x44
 800697e:	e009      	b.n	8006994 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2201      	movs	r2, #1
 8006984:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800698c:	4618      	mov	r0, r3
 800698e:	f001 fb9e 	bl	80080ce <SDMMC_CmdReadSingleBlock>
 8006992:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006996:	2b00      	cmp	r3, #0
 8006998:	d012      	beq.n	80069c0 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a7b      	ldr	r2, [pc, #492]	; (8006b8c <HAL_SD_ReadBlocks+0x30c>)
 80069a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069a8:	431a      	orrs	r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2201      	movs	r2, #1
 80069b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e152      	b.n	8006c66 <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80069c4:	e061      	b.n	8006a8a <HAL_SD_ReadBlocks+0x20a>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d03c      	beq.n	8006a4e <HAL_SD_ReadBlocks+0x1ce>
 80069d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d039      	beq.n	8006a4e <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80069da:	2300      	movs	r3, #0
 80069dc:	643b      	str	r3, [r7, #64]	; 0x40
 80069de:	e033      	b.n	8006a48 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f001 fa99 	bl	8007f1c <SDIO_ReadFIFO>
 80069ea:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80069ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ee:	b2da      	uxtb	r2, r3
 80069f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80069f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f6:	3301      	adds	r3, #1
 80069f8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80069fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069fc:	3b01      	subs	r3, #1
 80069fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a02:	0a1b      	lsrs	r3, r3, #8
 8006a04:	b2da      	uxtb	r2, r3
 8006a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a08:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a12:	3b01      	subs	r3, #1
 8006a14:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a18:	0c1b      	lsrs	r3, r3, #16
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a1e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a22:	3301      	adds	r3, #1
 8006a24:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a2e:	0e1b      	lsrs	r3, r3, #24
 8006a30:	b2da      	uxtb	r2, r3
 8006a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a34:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a38:	3301      	adds	r3, #1
 8006a3a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8006a42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a44:	3301      	adds	r3, #1
 8006a46:	643b      	str	r3, [r7, #64]	; 0x40
 8006a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a4a:	2b07      	cmp	r3, #7
 8006a4c:	d9c8      	bls.n	80069e0 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006a4e:	f7fc fa67 	bl	8002f20 <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d902      	bls.n	8006a64 <HAL_SD_ReadBlocks+0x1e4>
 8006a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d112      	bne.n	8006a8a <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a48      	ldr	r2, [pc, #288]	; (8006b8c <HAL_SD_ReadBlocks+0x30c>)
 8006a6a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a70:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e0ed      	b.n	8006c66 <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a90:	f240 332a 	movw	r3, #810	; 0x32a
 8006a94:	4013      	ands	r3, r2
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d095      	beq.n	80069c6 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d022      	beq.n	8006aee <HAL_SD_ReadBlocks+0x26e>
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d91f      	bls.n	8006aee <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab2:	2b03      	cmp	r3, #3
 8006ab4:	d01b      	beq.n	8006aee <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4618      	mov	r0, r3
 8006abc:	f001 fb90 	bl	80081e0 <SDMMC_CmdStopTransfer>
 8006ac0:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d012      	beq.n	8006aee <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a2f      	ldr	r2, [pc, #188]	; (8006b8c <HAL_SD_ReadBlocks+0x30c>)
 8006ace:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ad6:	431a      	orrs	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e0bb      	b.n	8006c66 <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006af4:	f003 0308 	and.w	r3, r3, #8
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d012      	beq.n	8006b22 <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a22      	ldr	r2, [pc, #136]	; (8006b8c <HAL_SD_ReadBlocks+0x30c>)
 8006b02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b08:	f043 0208 	orr.w	r2, r3, #8
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e0a1      	b.n	8006c66 <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b28:	f003 0302 	and.w	r3, r3, #2
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d012      	beq.n	8006b56 <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a15      	ldr	r2, [pc, #84]	; (8006b8c <HAL_SD_ReadBlocks+0x30c>)
 8006b36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3c:	f043 0202 	orr.w	r2, r3, #2
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e087      	b.n	8006c66 <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b5c:	f003 0320 	and.w	r3, r3, #32
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d064      	beq.n	8006c2e <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a08      	ldr	r2, [pc, #32]	; (8006b8c <HAL_SD_ReadBlocks+0x30c>)
 8006b6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b70:	f043 0220 	orr.w	r2, r3, #32
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e06d      	b.n	8006c66 <HAL_SD_ReadBlocks+0x3e6>
 8006b8a:	bf00      	nop
 8006b8c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4618      	mov	r0, r3
 8006b96:	f001 f9c1 	bl	8007f1c <SDIO_ReadFIFO>
 8006b9a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8006b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9e:	b2da      	uxtb	r2, r3
 8006ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bac:	3b01      	subs	r3, #1
 8006bae:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb2:	0a1b      	lsrs	r3, r3, #8
 8006bb4:	b2da      	uxtb	r2, r3
 8006bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc8:	0c1b      	lsrs	r3, r3, #16
 8006bca:	b2da      	uxtb	r2, r3
 8006bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bce:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bde:	0e1b      	lsrs	r3, r3, #24
 8006be0:	b2da      	uxtb	r2, r3
 8006be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006be4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006be8:	3301      	adds	r3, #1
 8006bea:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006bf2:	f7fc f995 	bl	8002f20 <HAL_GetTick>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d902      	bls.n	8006c08 <HAL_SD_ReadBlocks+0x388>
 8006c02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d112      	bne.n	8006c2e <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a18      	ldr	r2, [pc, #96]	; (8006c70 <HAL_SD_ReadBlocks+0x3f0>)
 8006c0e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c14:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e01b      	b.n	8006c66 <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d002      	beq.n	8006c42 <HAL_SD_ReadBlocks+0x3c2>
 8006c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1a6      	bne.n	8006b90 <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f240 523a 	movw	r2, #1338	; 0x53a
 8006c4a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006c54:	2300      	movs	r3, #0
 8006c56:	e006      	b.n	8006c66 <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
  }
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3748      	adds	r7, #72	; 0x48
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	004005ff 	.word	0x004005ff

08006c74 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b092      	sub	sp, #72	; 0x48
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
 8006c80:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006c82:	f7fc f94d 	bl	8002f20 <HAL_GetTick>
 8006c86:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d107      	bne.n	8006ca6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e184      	b.n	8006fb0 <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	f040 8177 	bne.w	8006fa2 <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006cba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	441a      	add	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d907      	bls.n	8006cd8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ccc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e16b      	b.n	8006fb0 <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2203      	movs	r2, #3
 8006cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d002      	beq.n	8006cf6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf2:	025b      	lsls	r3, r3, #9
 8006cf4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f001 f9c3 	bl	800808a <SDMMC_CmdBlockLength>
 8006d04:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00f      	beq.n	8006d2c <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a9d      	ldr	r2, [pc, #628]	; (8006f88 <HAL_SD_WriteBlocks+0x314>)
 8006d12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d1a:	431a      	orrs	r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e141      	b.n	8006fb0 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006d2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d30:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	025b      	lsls	r3, r3, #9
 8006d36:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006d38:	2390      	movs	r3, #144	; 0x90
 8006d3a:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006d40:	2300      	movs	r3, #0
 8006d42:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006d44:	2301      	movs	r3, #1
 8006d46:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f107 0218 	add.w	r2, r7, #24
 8006d50:	4611      	mov	r1, r2
 8006d52:	4618      	mov	r0, r3
 8006d54:	f001 f96e 	bl	8008034 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d90a      	bls.n	8006d74 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2220      	movs	r2, #32
 8006d62:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f001 fa15 	bl	800819a <SDMMC_CmdWriteMultiBlock>
 8006d70:	6478      	str	r0, [r7, #68]	; 0x44
 8006d72:	e009      	b.n	8006d88 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2210      	movs	r2, #16
 8006d78:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d80:	4618      	mov	r0, r3
 8006d82:	f001 f9e8 	bl	8008156 <SDMMC_CmdWriteSingleBlock>
 8006d86:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d012      	beq.n	8006db4 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a7d      	ldr	r2, [pc, #500]	; (8006f88 <HAL_SD_WriteBlocks+0x314>)
 8006d94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d9c:	431a      	orrs	r2, r3
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2201      	movs	r2, #1
 8006da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	e0fd      	b.n	8006fb0 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006db8:	e065      	b.n	8006e86 <HAL_SD_WriteBlocks+0x212>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d040      	beq.n	8006e4a <HAL_SD_WriteBlocks+0x1d6>
 8006dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d03d      	beq.n	8006e4a <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8006dce:	2300      	movs	r3, #0
 8006dd0:	643b      	str	r3, [r7, #64]	; 0x40
 8006dd2:	e037      	b.n	8006e44 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8006dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ddc:	3301      	adds	r3, #1
 8006dde:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006de2:	3b01      	subs	r3, #1
 8006de4:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	021a      	lsls	r2, r3, #8
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df4:	3301      	adds	r3, #1
 8006df6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	041a      	lsls	r2, r3, #16
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e12:	3b01      	subs	r3, #1
 8006e14:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	061a      	lsls	r2, r3, #24
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e24:	3301      	adds	r3, #1
 8006e26:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f107 0214 	add.w	r2, r7, #20
 8006e36:	4611      	mov	r1, r2
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f001 f87b 	bl	8007f34 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e40:	3301      	adds	r3, #1
 8006e42:	643b      	str	r3, [r7, #64]	; 0x40
 8006e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e46:	2b07      	cmp	r3, #7
 8006e48:	d9c4      	bls.n	8006dd4 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006e4a:	f7fc f869 	bl	8002f20 <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d902      	bls.n	8006e60 <HAL_SD_WriteBlocks+0x1ec>
 8006e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d112      	bne.n	8006e86 <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a48      	ldr	r2, [pc, #288]	; (8006f88 <HAL_SD_WriteBlocks+0x314>)
 8006e66:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e6e:	431a      	orrs	r2, r3
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006e82:	2303      	movs	r3, #3
 8006e84:	e094      	b.n	8006fb0 <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e8c:	f240 331a 	movw	r3, #794	; 0x31a
 8006e90:	4013      	ands	r3, r2
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d091      	beq.n	8006dba <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d022      	beq.n	8006eea <HAL_SD_WriteBlocks+0x276>
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d91f      	bls.n	8006eea <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eae:	2b03      	cmp	r3, #3
 8006eb0:	d01b      	beq.n	8006eea <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f001 f992 	bl	80081e0 <SDMMC_CmdStopTransfer>
 8006ebc:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006ebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d012      	beq.n	8006eea <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a2f      	ldr	r2, [pc, #188]	; (8006f88 <HAL_SD_WriteBlocks+0x314>)
 8006eca:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ed2:	431a      	orrs	r2, r3
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e062      	b.n	8006fb0 <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef0:	f003 0308 	and.w	r3, r3, #8
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d012      	beq.n	8006f1e <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a22      	ldr	r2, [pc, #136]	; (8006f88 <HAL_SD_WriteBlocks+0x314>)
 8006efe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f04:	f043 0208 	orr.w	r2, r3, #8
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e048      	b.n	8006fb0 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f24:	f003 0302 	and.w	r3, r3, #2
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d012      	beq.n	8006f52 <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a15      	ldr	r2, [pc, #84]	; (8006f88 <HAL_SD_WriteBlocks+0x314>)
 8006f32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f38:	f043 0202 	orr.w	r2, r3, #2
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e02e      	b.n	8006fb0 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f58:	f003 0310 	and.w	r3, r3, #16
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d015      	beq.n	8006f8c <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a08      	ldr	r2, [pc, #32]	; (8006f88 <HAL_SD_WriteBlocks+0x314>)
 8006f66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6c:	f043 0210 	orr.w	r2, r3, #16
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e014      	b.n	8006fb0 <HAL_SD_WriteBlocks+0x33c>
 8006f86:	bf00      	nop
 8006f88:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f240 523a 	movw	r2, #1338	; 0x53a
 8006f94:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	e006      	b.n	8006fb0 <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
  }
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3748      	adds	r7, #72	; 0x48
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fc6:	0f9b      	lsrs	r3, r3, #30
 8006fc8:	b2da      	uxtb	r2, r3
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fd2:	0e9b      	lsrs	r3, r3, #26
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	f003 030f 	and.w	r3, r3, #15
 8006fda:	b2da      	uxtb	r2, r3
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fe4:	0e1b      	lsrs	r3, r3, #24
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	f003 0303 	and.w	r3, r3, #3
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ff6:	0c1b      	lsrs	r3, r3, #16
 8006ff8:	b2da      	uxtb	r2, r3
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007002:	0a1b      	lsrs	r3, r3, #8
 8007004:	b2da      	uxtb	r2, r3
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800700e:	b2da      	uxtb	r2, r3
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007018:	0d1b      	lsrs	r3, r3, #20
 800701a:	b29a      	uxth	r2, r3
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007024:	0c1b      	lsrs	r3, r3, #16
 8007026:	b2db      	uxtb	r3, r3
 8007028:	f003 030f 	and.w	r3, r3, #15
 800702c:	b2da      	uxtb	r2, r3
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007036:	0bdb      	lsrs	r3, r3, #15
 8007038:	b2db      	uxtb	r3, r3
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	b2da      	uxtb	r2, r3
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007048:	0b9b      	lsrs	r3, r3, #14
 800704a:	b2db      	uxtb	r3, r3
 800704c:	f003 0301 	and.w	r3, r3, #1
 8007050:	b2da      	uxtb	r2, r3
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800705a:	0b5b      	lsrs	r3, r3, #13
 800705c:	b2db      	uxtb	r3, r3
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	b2da      	uxtb	r2, r3
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800706c:	0b1b      	lsrs	r3, r3, #12
 800706e:	b2db      	uxtb	r3, r3
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	b2da      	uxtb	r2, r3
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	2200      	movs	r2, #0
 800707e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007084:	2b00      	cmp	r3, #0
 8007086:	d163      	bne.n	8007150 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800708c:	009a      	lsls	r2, r3, #2
 800708e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007092:	4013      	ands	r3, r2
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007098:	0f92      	lsrs	r2, r2, #30
 800709a:	431a      	orrs	r2, r3
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070a4:	0edb      	lsrs	r3, r3, #27
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	f003 0307 	and.w	r3, r3, #7
 80070ac:	b2da      	uxtb	r2, r3
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070b6:	0e1b      	lsrs	r3, r3, #24
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	f003 0307 	and.w	r3, r3, #7
 80070be:	b2da      	uxtb	r2, r3
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070c8:	0d5b      	lsrs	r3, r3, #21
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	f003 0307 	and.w	r3, r3, #7
 80070d0:	b2da      	uxtb	r2, r3
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070da:	0c9b      	lsrs	r3, r3, #18
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	f003 0307 	and.w	r3, r3, #7
 80070e2:	b2da      	uxtb	r2, r3
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070ec:	0bdb      	lsrs	r3, r3, #15
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	f003 0307 	and.w	r3, r3, #7
 80070f4:	b2da      	uxtb	r2, r3
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	1c5a      	adds	r2, r3, #1
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	7e1b      	ldrb	r3, [r3, #24]
 8007108:	b2db      	uxtb	r3, r3
 800710a:	f003 0307 	and.w	r3, r3, #7
 800710e:	3302      	adds	r3, #2
 8007110:	2201      	movs	r2, #1
 8007112:	fa02 f303 	lsl.w	r3, r2, r3
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800711a:	fb02 f203 	mul.w	r2, r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	7a1b      	ldrb	r3, [r3, #8]
 8007126:	b2db      	uxtb	r3, r3
 8007128:	f003 030f 	and.w	r3, r3, #15
 800712c:	2201      	movs	r2, #1
 800712e:	409a      	lsls	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800713c:	0a52      	lsrs	r2, r2, #9
 800713e:	fb02 f203 	mul.w	r2, r2, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f44f 7200 	mov.w	r2, #512	; 0x200
 800714c:	661a      	str	r2, [r3, #96]	; 0x60
 800714e:	e031      	b.n	80071b4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007154:	2b01      	cmp	r3, #1
 8007156:	d11d      	bne.n	8007194 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800715c:	041b      	lsls	r3, r3, #16
 800715e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007166:	0c1b      	lsrs	r3, r3, #16
 8007168:	431a      	orrs	r2, r3
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	3301      	adds	r3, #1
 8007174:	029a      	lsls	r2, r3, #10
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007188:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	661a      	str	r2, [r3, #96]	; 0x60
 8007192:	e00f      	b.n	80071b4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a58      	ldr	r2, [pc, #352]	; (80072fc <HAL_SD_GetCardCSD+0x344>)
 800719a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e09d      	b.n	80072f0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071b8:	0b9b      	lsrs	r3, r3, #14
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	b2da      	uxtb	r2, r3
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071ca:	09db      	lsrs	r3, r3, #7
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071d2:	b2da      	uxtb	r2, r3
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071e2:	b2da      	uxtb	r2, r3
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ec:	0fdb      	lsrs	r3, r3, #31
 80071ee:	b2da      	uxtb	r2, r3
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f8:	0f5b      	lsrs	r3, r3, #29
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	f003 0303 	and.w	r3, r3, #3
 8007200:	b2da      	uxtb	r2, r3
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800720a:	0e9b      	lsrs	r3, r3, #26
 800720c:	b2db      	uxtb	r3, r3
 800720e:	f003 0307 	and.w	r3, r3, #7
 8007212:	b2da      	uxtb	r2, r3
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800721c:	0d9b      	lsrs	r3, r3, #22
 800721e:	b2db      	uxtb	r3, r3
 8007220:	f003 030f 	and.w	r3, r3, #15
 8007224:	b2da      	uxtb	r2, r3
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800722e:	0d5b      	lsrs	r3, r3, #21
 8007230:	b2db      	uxtb	r3, r3
 8007232:	f003 0301 	and.w	r3, r3, #1
 8007236:	b2da      	uxtb	r2, r3
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	2200      	movs	r2, #0
 8007242:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800724a:	0c1b      	lsrs	r3, r3, #16
 800724c:	b2db      	uxtb	r3, r3
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	b2da      	uxtb	r2, r3
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800725e:	0bdb      	lsrs	r3, r3, #15
 8007260:	b2db      	uxtb	r3, r3
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	b2da      	uxtb	r2, r3
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007272:	0b9b      	lsrs	r3, r3, #14
 8007274:	b2db      	uxtb	r3, r3
 8007276:	f003 0301 	and.w	r3, r3, #1
 800727a:	b2da      	uxtb	r2, r3
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007286:	0b5b      	lsrs	r3, r3, #13
 8007288:	b2db      	uxtb	r3, r3
 800728a:	f003 0301 	and.w	r3, r3, #1
 800728e:	b2da      	uxtb	r2, r3
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800729a:	0b1b      	lsrs	r3, r3, #12
 800729c:	b2db      	uxtb	r3, r3
 800729e:	f003 0301 	and.w	r3, r3, #1
 80072a2:	b2da      	uxtb	r2, r3
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ae:	0a9b      	lsrs	r3, r3, #10
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	f003 0303 	and.w	r3, r3, #3
 80072b6:	b2da      	uxtb	r2, r3
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c2:	0a1b      	lsrs	r3, r3, #8
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	f003 0303 	and.w	r3, r3, #3
 80072ca:	b2da      	uxtb	r2, r3
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d6:	085b      	lsrs	r3, r3, #1
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072de:	b2da      	uxtb	r2, r3
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	2201      	movs	r2, #1
 80072ea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bc80      	pop	{r7}
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	004005ff 	.word	0x004005ff

08007300 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	bc80      	pop	{r7}
 8007354:	4770      	bx	lr

08007356 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b086      	sub	sp, #24
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800735e:	2300      	movs	r3, #0
 8007360:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007362:	f107 030c 	add.w	r3, r7, #12
 8007366:	4619      	mov	r1, r3
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f97c 	bl	8007666 <SD_SendStatus>
 800736e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d005      	beq.n	8007382 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	431a      	orrs	r2, r3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	0a5b      	lsrs	r3, r3, #9
 8007386:	f003 030f 	and.w	r3, r3, #15
 800738a:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800738c:	693b      	ldr	r3, [r7, #16]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3718      	adds	r7, #24
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007396:	b5b0      	push	{r4, r5, r7, lr}
 8007398:	b094      	sub	sp, #80	; 0x50
 800739a:	af04      	add	r7, sp, #16
 800739c:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800739e:	2301      	movs	r3, #1
 80073a0:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4618      	mov	r0, r3
 80073a8:	f000 fdf0 	bl	8007f8c <SDIO_GetPowerState>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d102      	bne.n	80073b8 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80073b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80073b6:	e0b7      	b.n	8007528 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073bc:	2b03      	cmp	r3, #3
 80073be:	d02f      	beq.n	8007420 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4618      	mov	r0, r3
 80073c6:	f000 ffd2 	bl	800836e <SDMMC_CmdSendCID>
 80073ca:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80073cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d001      	beq.n	80073d6 <SD_InitCard+0x40>
    {
      return errorstate;
 80073d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073d4:	e0a8      	b.n	8007528 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2100      	movs	r1, #0
 80073dc:	4618      	mov	r0, r3
 80073de:	f000 fe17 	bl	8008010 <SDIO_GetResponse>
 80073e2:	4602      	mov	r2, r0
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2104      	movs	r1, #4
 80073ee:	4618      	mov	r0, r3
 80073f0:	f000 fe0e 	bl	8008010 <SDIO_GetResponse>
 80073f4:	4602      	mov	r2, r0
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2108      	movs	r1, #8
 8007400:	4618      	mov	r0, r3
 8007402:	f000 fe05 	bl	8008010 <SDIO_GetResponse>
 8007406:	4602      	mov	r2, r0
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	210c      	movs	r1, #12
 8007412:	4618      	mov	r0, r3
 8007414:	f000 fdfc 	bl	8008010 <SDIO_GetResponse>
 8007418:	4602      	mov	r2, r0
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007424:	2b03      	cmp	r3, #3
 8007426:	d00d      	beq.n	8007444 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f107 020e 	add.w	r2, r7, #14
 8007430:	4611      	mov	r1, r2
 8007432:	4618      	mov	r0, r3
 8007434:	f000 ffd8 	bl	80083e8 <SDMMC_CmdSetRelAdd>
 8007438:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800743a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800743c:	2b00      	cmp	r3, #0
 800743e:	d001      	beq.n	8007444 <SD_InitCard+0xae>
    {
      return errorstate;
 8007440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007442:	e071      	b.n	8007528 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007448:	2b03      	cmp	r3, #3
 800744a:	d036      	beq.n	80074ba <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800744c:	89fb      	ldrh	r3, [r7, #14]
 800744e:	461a      	mov	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800745c:	041b      	lsls	r3, r3, #16
 800745e:	4619      	mov	r1, r3
 8007460:	4610      	mov	r0, r2
 8007462:	f000 ffa2 	bl	80083aa <SDMMC_CmdSendCSD>
 8007466:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800746a:	2b00      	cmp	r3, #0
 800746c:	d001      	beq.n	8007472 <SD_InitCard+0xdc>
    {
      return errorstate;
 800746e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007470:	e05a      	b.n	8007528 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2100      	movs	r1, #0
 8007478:	4618      	mov	r0, r3
 800747a:	f000 fdc9 	bl	8008010 <SDIO_GetResponse>
 800747e:	4602      	mov	r2, r0
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2104      	movs	r1, #4
 800748a:	4618      	mov	r0, r3
 800748c:	f000 fdc0 	bl	8008010 <SDIO_GetResponse>
 8007490:	4602      	mov	r2, r0
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2108      	movs	r1, #8
 800749c:	4618      	mov	r0, r3
 800749e:	f000 fdb7 	bl	8008010 <SDIO_GetResponse>
 80074a2:	4602      	mov	r2, r0
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	210c      	movs	r1, #12
 80074ae:	4618      	mov	r0, r3
 80074b0:	f000 fdae 	bl	8008010 <SDIO_GetResponse>
 80074b4:	4602      	mov	r2, r0
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2104      	movs	r1, #4
 80074c0:	4618      	mov	r0, r3
 80074c2:	f000 fda5 	bl	8008010 <SDIO_GetResponse>
 80074c6:	4603      	mov	r3, r0
 80074c8:	0d1a      	lsrs	r2, r3, #20
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80074ce:	f107 0310 	add.w	r3, r7, #16
 80074d2:	4619      	mov	r1, r3
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f7ff fd6f 	bl	8006fb8 <HAL_SD_GetCardCSD>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d002      	beq.n	80074e6 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80074e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80074e4:	e020      	b.n	8007528 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6819      	ldr	r1, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ee:	041b      	lsls	r3, r3, #16
 80074f0:	f04f 0400 	mov.w	r4, #0
 80074f4:	461a      	mov	r2, r3
 80074f6:	4623      	mov	r3, r4
 80074f8:	4608      	mov	r0, r1
 80074fa:	f000 fe93 	bl	8008224 <SDMMC_CmdSelDesel>
 80074fe:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007502:	2b00      	cmp	r3, #0
 8007504:	d001      	beq.n	800750a <SD_InitCard+0x174>
  {
    return errorstate;
 8007506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007508:	e00e      	b.n	8007528 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681d      	ldr	r5, [r3, #0]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	466c      	mov	r4, sp
 8007512:	f103 0210 	add.w	r2, r3, #16
 8007516:	ca07      	ldmia	r2, {r0, r1, r2}
 8007518:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800751c:	3304      	adds	r3, #4
 800751e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007520:	4628      	mov	r0, r5
 8007522:	f000 fcd1 	bl	8007ec8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3740      	adds	r7, #64	; 0x40
 800752c:	46bd      	mov	sp, r7
 800752e:	bdb0      	pop	{r4, r5, r7, pc}

08007530 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b086      	sub	sp, #24
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007538:	2300      	movs	r3, #0
 800753a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800753c:	2300      	movs	r3, #0
 800753e:	617b      	str	r3, [r7, #20]
 8007540:	2300      	movs	r3, #0
 8007542:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4618      	mov	r0, r3
 800754a:	f000 fe8e 	bl	800826a <SDMMC_CmdGoIdleState>
 800754e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d001      	beq.n	800755a <SD_PowerON+0x2a>
  {
    return errorstate;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	e072      	b.n	8007640 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4618      	mov	r0, r3
 8007560:	f000 fea1 	bl	80082a6 <SDMMC_CmdOperCond>
 8007564:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00d      	beq.n	8007588 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4618      	mov	r0, r3
 8007578:	f000 fe77 	bl	800826a <SDMMC_CmdGoIdleState>
 800757c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d004      	beq.n	800758e <SD_PowerON+0x5e>
    {
      return errorstate;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	e05b      	b.n	8007640 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007592:	2b01      	cmp	r3, #1
 8007594:	d137      	bne.n	8007606 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2100      	movs	r1, #0
 800759c:	4618      	mov	r0, r3
 800759e:	f000 fea1 	bl	80082e4 <SDMMC_CmdAppCommand>
 80075a2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d02d      	beq.n	8007606 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80075aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80075ae:	e047      	b.n	8007640 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2100      	movs	r1, #0
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 fe94 	bl	80082e4 <SDMMC_CmdAppCommand>
 80075bc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d001      	beq.n	80075c8 <SD_PowerON+0x98>
    {
      return errorstate;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	e03b      	b.n	8007640 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	491e      	ldr	r1, [pc, #120]	; (8007648 <SD_PowerON+0x118>)
 80075ce:	4618      	mov	r0, r3
 80075d0:	f000 feaa 	bl	8008328 <SDMMC_CmdAppOperCommand>
 80075d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d002      	beq.n	80075e2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80075dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80075e0:	e02e      	b.n	8007640 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2100      	movs	r1, #0
 80075e8:	4618      	mov	r0, r3
 80075ea:	f000 fd11 	bl	8008010 <SDIO_GetResponse>
 80075ee:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	0fdb      	lsrs	r3, r3, #31
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d101      	bne.n	80075fc <SD_PowerON+0xcc>
 80075f8:	2301      	movs	r3, #1
 80075fa:	e000      	b.n	80075fe <SD_PowerON+0xce>
 80075fc:	2300      	movs	r3, #0
 80075fe:	613b      	str	r3, [r7, #16]

    count++;
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	3301      	adds	r3, #1
 8007604:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800760c:	4293      	cmp	r3, r2
 800760e:	d802      	bhi.n	8007616 <SD_PowerON+0xe6>
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d0cc      	beq.n	80075b0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800761c:	4293      	cmp	r3, r2
 800761e:	d902      	bls.n	8007626 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007620:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007624:	e00c      	b.n	8007640 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800762c:	2b00      	cmp	r3, #0
 800762e:	d003      	beq.n	8007638 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	645a      	str	r2, [r3, #68]	; 0x44
 8007636:	e002      	b.n	800763e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3718      	adds	r7, #24
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	c1100000 	.word	0xc1100000

0800764c <SD_PowerOFF>:
  * @brief  Turns the SDIO output signals off.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
static void SD_PowerOFF(SD_HandleTypeDef *hsd)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  /* Set Power State to OFF */
  (void)SDIO_PowerState_OFF(hsd->Instance);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4618      	mov	r0, r3
 800765a:	f000 fc8a 	bl	8007f72 <SDIO_PowerState_OFF>
}
 800765e:	bf00      	nop
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b084      	sub	sp, #16
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
 800766e:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d102      	bne.n	800767c <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007676:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800767a:	e018      	b.n	80076ae <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007684:	041b      	lsls	r3, r3, #16
 8007686:	4619      	mov	r1, r3
 8007688:	4610      	mov	r0, r2
 800768a:	f000 fece 	bl	800842a <SDMMC_CmdSendStatus>
 800768e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d001      	beq.n	800769a <SD_SendStatus+0x34>
  {
    return errorstate;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	e009      	b.n	80076ae <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2100      	movs	r1, #0
 80076a0:	4618      	mov	r0, r3
 80076a2:	f000 fcb5 	bl	8008010 <SDIO_GetResponse>
 80076a6:	4602      	mov	r2, r0
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b082      	sub	sp, #8
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d101      	bne.n	80076c8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e076      	b.n	80077b6 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d108      	bne.n	80076e2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076d8:	d009      	beq.n	80076ee <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	61da      	str	r2, [r3, #28]
 80076e0:	e005      	b.n	80076ee <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d106      	bne.n	800770e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f7fb fa95 	bl	8002c38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2202      	movs	r2, #2
 8007712:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007724:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007736:	431a      	orrs	r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007740:	431a      	orrs	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	f003 0302 	and.w	r3, r3, #2
 800774a:	431a      	orrs	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	695b      	ldr	r3, [r3, #20]
 8007750:	f003 0301 	and.w	r3, r3, #1
 8007754:	431a      	orrs	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	699b      	ldr	r3, [r3, #24]
 800775a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800775e:	431a      	orrs	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	69db      	ldr	r3, [r3, #28]
 8007764:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007768:	431a      	orrs	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a1b      	ldr	r3, [r3, #32]
 800776e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007772:	ea42 0103 	orr.w	r1, r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800777a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	430a      	orrs	r2, r1
 8007784:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	0c1a      	lsrs	r2, r3, #16
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f002 0204 	and.w	r2, r2, #4
 8007794:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	69da      	ldr	r2, [r3, #28]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3708      	adds	r7, #8
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b088      	sub	sp, #32
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	60f8      	str	r0, [r7, #12]
 80077c6:	60b9      	str	r1, [r7, #8]
 80077c8:	603b      	str	r3, [r7, #0]
 80077ca:	4613      	mov	r3, r2
 80077cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80077ce:	2300      	movs	r3, #0
 80077d0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d101      	bne.n	80077e0 <HAL_SPI_Transmit+0x22>
 80077dc:	2302      	movs	r3, #2
 80077de:	e126      	b.n	8007a2e <HAL_SPI_Transmit+0x270>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077e8:	f7fb fb9a 	bl	8002f20 <HAL_GetTick>
 80077ec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80077ee:	88fb      	ldrh	r3, [r7, #6]
 80077f0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d002      	beq.n	8007804 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80077fe:	2302      	movs	r3, #2
 8007800:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007802:	e10b      	b.n	8007a1c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d002      	beq.n	8007810 <HAL_SPI_Transmit+0x52>
 800780a:	88fb      	ldrh	r3, [r7, #6]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d102      	bne.n	8007816 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007814:	e102      	b.n	8007a1c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2203      	movs	r2, #3
 800781a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	68ba      	ldr	r2, [r7, #8]
 8007828:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	88fa      	ldrh	r2, [r7, #6]
 800782e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	88fa      	ldrh	r2, [r7, #6]
 8007834:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2200      	movs	r2, #0
 8007846:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2200      	movs	r2, #0
 800784c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2200      	movs	r2, #0
 8007852:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800785c:	d10f      	bne.n	800787e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800786c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800787c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007888:	2b40      	cmp	r3, #64	; 0x40
 800788a:	d007      	beq.n	800789c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800789a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078a4:	d14b      	bne.n	800793e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d002      	beq.n	80078b4 <HAL_SPI_Transmit+0xf6>
 80078ae:	8afb      	ldrh	r3, [r7, #22]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d13e      	bne.n	8007932 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b8:	881a      	ldrh	r2, [r3, #0]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c4:	1c9a      	adds	r2, r3, #2
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	3b01      	subs	r3, #1
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80078d8:	e02b      	b.n	8007932 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	f003 0302 	and.w	r3, r3, #2
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d112      	bne.n	800790e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ec:	881a      	ldrh	r2, [r3, #0]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f8:	1c9a      	adds	r2, r3, #2
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007902:	b29b      	uxth	r3, r3
 8007904:	3b01      	subs	r3, #1
 8007906:	b29a      	uxth	r2, r3
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	86da      	strh	r2, [r3, #54]	; 0x36
 800790c:	e011      	b.n	8007932 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800790e:	f7fb fb07 	bl	8002f20 <HAL_GetTick>
 8007912:	4602      	mov	r2, r0
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	1ad3      	subs	r3, r2, r3
 8007918:	683a      	ldr	r2, [r7, #0]
 800791a:	429a      	cmp	r2, r3
 800791c:	d803      	bhi.n	8007926 <HAL_SPI_Transmit+0x168>
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007924:	d102      	bne.n	800792c <HAL_SPI_Transmit+0x16e>
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d102      	bne.n	8007932 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800792c:	2303      	movs	r3, #3
 800792e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007930:	e074      	b.n	8007a1c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007936:	b29b      	uxth	r3, r3
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1ce      	bne.n	80078da <HAL_SPI_Transmit+0x11c>
 800793c:	e04c      	b.n	80079d8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d002      	beq.n	800794c <HAL_SPI_Transmit+0x18e>
 8007946:	8afb      	ldrh	r3, [r7, #22]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d140      	bne.n	80079ce <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	330c      	adds	r3, #12
 8007956:	7812      	ldrb	r2, [r2, #0]
 8007958:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795e:	1c5a      	adds	r2, r3, #1
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007968:	b29b      	uxth	r3, r3
 800796a:	3b01      	subs	r3, #1
 800796c:	b29a      	uxth	r2, r3
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007972:	e02c      	b.n	80079ce <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	f003 0302 	and.w	r3, r3, #2
 800797e:	2b02      	cmp	r3, #2
 8007980:	d113      	bne.n	80079aa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	330c      	adds	r3, #12
 800798c:	7812      	ldrb	r2, [r2, #0]
 800798e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007994:	1c5a      	adds	r2, r3, #1
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800799e:	b29b      	uxth	r3, r3
 80079a0:	3b01      	subs	r3, #1
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80079a8:	e011      	b.n	80079ce <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079aa:	f7fb fab9 	bl	8002f20 <HAL_GetTick>
 80079ae:	4602      	mov	r2, r0
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	1ad3      	subs	r3, r2, r3
 80079b4:	683a      	ldr	r2, [r7, #0]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d803      	bhi.n	80079c2 <HAL_SPI_Transmit+0x204>
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079c0:	d102      	bne.n	80079c8 <HAL_SPI_Transmit+0x20a>
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d102      	bne.n	80079ce <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80079c8:	2303      	movs	r3, #3
 80079ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80079cc:	e026      	b.n	8007a1c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1cd      	bne.n	8007974 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079d8:	69ba      	ldr	r2, [r7, #24]
 80079da:	6839      	ldr	r1, [r7, #0]
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f000 fa55 	bl	8007e8c <SPI_EndRxTxTransaction>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d002      	beq.n	80079ee <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2220      	movs	r2, #32
 80079ec:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d10a      	bne.n	8007a0c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079f6:	2300      	movs	r3, #0
 80079f8:	613b      	str	r3, [r7, #16]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	613b      	str	r3, [r7, #16]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	613b      	str	r3, [r7, #16]
 8007a0a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d002      	beq.n	8007a1a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	77fb      	strb	r3, [r7, #31]
 8007a18:	e000      	b.n	8007a1c <HAL_SPI_Transmit+0x25e>
  }

error:
 8007a1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007a2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3720      	adds	r7, #32
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b08c      	sub	sp, #48	; 0x30
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	60f8      	str	r0, [r7, #12]
 8007a3e:	60b9      	str	r1, [r7, #8]
 8007a40:	607a      	str	r2, [r7, #4]
 8007a42:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007a44:	2301      	movs	r3, #1
 8007a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d101      	bne.n	8007a5c <HAL_SPI_TransmitReceive+0x26>
 8007a58:	2302      	movs	r3, #2
 8007a5a:	e18a      	b.n	8007d72 <HAL_SPI_TransmitReceive+0x33c>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a64:	f7fb fa5c 	bl	8002f20 <HAL_GetTick>
 8007a68:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007a7a:	887b      	ldrh	r3, [r7, #2]
 8007a7c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007a7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d00f      	beq.n	8007aa6 <HAL_SPI_TransmitReceive+0x70>
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a8c:	d107      	bne.n	8007a9e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d103      	bne.n	8007a9e <HAL_SPI_TransmitReceive+0x68>
 8007a96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a9a:	2b04      	cmp	r3, #4
 8007a9c:	d003      	beq.n	8007aa6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007a9e:	2302      	movs	r3, #2
 8007aa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007aa4:	e15b      	b.n	8007d5e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d005      	beq.n	8007ab8 <HAL_SPI_TransmitReceive+0x82>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d002      	beq.n	8007ab8 <HAL_SPI_TransmitReceive+0x82>
 8007ab2:	887b      	ldrh	r3, [r7, #2]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d103      	bne.n	8007ac0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007abe:	e14e      	b.n	8007d5e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	2b04      	cmp	r3, #4
 8007aca:	d003      	beq.n	8007ad4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2205      	movs	r2, #5
 8007ad0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	887a      	ldrh	r2, [r7, #2]
 8007ae4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	887a      	ldrh	r2, [r7, #2]
 8007aea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	887a      	ldrh	r2, [r7, #2]
 8007af6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	887a      	ldrh	r2, [r7, #2]
 8007afc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2200      	movs	r2, #0
 8007b02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2200      	movs	r2, #0
 8007b08:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b14:	2b40      	cmp	r3, #64	; 0x40
 8007b16:	d007      	beq.n	8007b28 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b30:	d178      	bne.n	8007c24 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d002      	beq.n	8007b40 <HAL_SPI_TransmitReceive+0x10a>
 8007b3a:	8b7b      	ldrh	r3, [r7, #26]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d166      	bne.n	8007c0e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b44:	881a      	ldrh	r2, [r3, #0]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b50:	1c9a      	adds	r2, r3, #2
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b64:	e053      	b.n	8007c0e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	f003 0302 	and.w	r3, r3, #2
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d11b      	bne.n	8007bac <HAL_SPI_TransmitReceive+0x176>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d016      	beq.n	8007bac <HAL_SPI_TransmitReceive+0x176>
 8007b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d113      	bne.n	8007bac <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b88:	881a      	ldrh	r2, [r3, #0]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b94:	1c9a      	adds	r2, r3, #2
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	f003 0301 	and.w	r3, r3, #1
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d119      	bne.n	8007bee <HAL_SPI_TransmitReceive+0x1b8>
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d014      	beq.n	8007bee <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68da      	ldr	r2, [r3, #12]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bce:	b292      	uxth	r2, r2
 8007bd0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd6:	1c9a      	adds	r2, r3, #2
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	3b01      	subs	r3, #1
 8007be4:	b29a      	uxth	r2, r3
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007bea:	2301      	movs	r3, #1
 8007bec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007bee:	f7fb f997 	bl	8002f20 <HAL_GetTick>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d807      	bhi.n	8007c0e <HAL_SPI_TransmitReceive+0x1d8>
 8007bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c04:	d003      	beq.n	8007c0e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007c0c:	e0a7      	b.n	8007d5e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d1a6      	bne.n	8007b66 <HAL_SPI_TransmitReceive+0x130>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d1a1      	bne.n	8007b66 <HAL_SPI_TransmitReceive+0x130>
 8007c22:	e07c      	b.n	8007d1e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d002      	beq.n	8007c32 <HAL_SPI_TransmitReceive+0x1fc>
 8007c2c:	8b7b      	ldrh	r3, [r7, #26]
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d16b      	bne.n	8007d0a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	330c      	adds	r3, #12
 8007c3c:	7812      	ldrb	r2, [r2, #0]
 8007c3e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c44:	1c5a      	adds	r2, r3, #1
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	3b01      	subs	r3, #1
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c58:	e057      	b.n	8007d0a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	f003 0302 	and.w	r3, r3, #2
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d11c      	bne.n	8007ca2 <HAL_SPI_TransmitReceive+0x26c>
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d017      	beq.n	8007ca2 <HAL_SPI_TransmitReceive+0x26c>
 8007c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d114      	bne.n	8007ca2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	330c      	adds	r3, #12
 8007c82:	7812      	ldrb	r2, [r2, #0]
 8007c84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c8a:	1c5a      	adds	r2, r3, #1
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	3b01      	subs	r3, #1
 8007c98:	b29a      	uxth	r2, r3
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	f003 0301 	and.w	r3, r3, #1
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d119      	bne.n	8007ce4 <HAL_SPI_TransmitReceive+0x2ae>
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d014      	beq.n	8007ce4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68da      	ldr	r2, [r3, #12]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc4:	b2d2      	uxtb	r2, r2
 8007cc6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ccc:	1c5a      	adds	r2, r3, #1
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007ce4:	f7fb f91c 	bl	8002f20 <HAL_GetTick>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cec:	1ad3      	subs	r3, r2, r3
 8007cee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d803      	bhi.n	8007cfc <HAL_SPI_TransmitReceive+0x2c6>
 8007cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cfa:	d102      	bne.n	8007d02 <HAL_SPI_TransmitReceive+0x2cc>
 8007cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d103      	bne.n	8007d0a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007d08:	e029      	b.n	8007d5e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1a2      	bne.n	8007c5a <HAL_SPI_TransmitReceive+0x224>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d19d      	bne.n	8007c5a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f000 f8b2 	bl	8007e8c <SPI_EndRxTxTransaction>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d006      	beq.n	8007d3c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2220      	movs	r2, #32
 8007d38:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007d3a:	e010      	b.n	8007d5e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d10b      	bne.n	8007d5c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d44:	2300      	movs	r3, #0
 8007d46:	617b      	str	r3, [r7, #20]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	617b      	str	r3, [r7, #20]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	617b      	str	r3, [r7, #20]
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	e000      	b.n	8007d5e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007d5c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007d6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3730      	adds	r7, #48	; 0x30
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
	...

08007d7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b088      	sub	sp, #32
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	603b      	str	r3, [r7, #0]
 8007d88:	4613      	mov	r3, r2
 8007d8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007d8c:	f7fb f8c8 	bl	8002f20 <HAL_GetTick>
 8007d90:	4602      	mov	r2, r0
 8007d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d94:	1a9b      	subs	r3, r3, r2
 8007d96:	683a      	ldr	r2, [r7, #0]
 8007d98:	4413      	add	r3, r2
 8007d9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007d9c:	f7fb f8c0 	bl	8002f20 <HAL_GetTick>
 8007da0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007da2:	4b39      	ldr	r3, [pc, #228]	; (8007e88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	015b      	lsls	r3, r3, #5
 8007da8:	0d1b      	lsrs	r3, r3, #20
 8007daa:	69fa      	ldr	r2, [r7, #28]
 8007dac:	fb02 f303 	mul.w	r3, r2, r3
 8007db0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007db2:	e054      	b.n	8007e5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dba:	d050      	beq.n	8007e5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007dbc:	f7fb f8b0 	bl	8002f20 <HAL_GetTick>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	69fa      	ldr	r2, [r7, #28]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d902      	bls.n	8007dd2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d13d      	bne.n	8007e4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	685a      	ldr	r2, [r3, #4]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007de0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007dea:	d111      	bne.n	8007e10 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007df4:	d004      	beq.n	8007e00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dfe:	d107      	bne.n	8007e10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e18:	d10f      	bne.n	8007e3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e28:	601a      	str	r2, [r3, #0]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	e017      	b.n	8007e7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d101      	bne.n	8007e58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007e54:	2300      	movs	r3, #0
 8007e56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	689a      	ldr	r2, [r3, #8]
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	4013      	ands	r3, r2
 8007e68:	68ba      	ldr	r2, [r7, #8]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	bf0c      	ite	eq
 8007e6e:	2301      	moveq	r3, #1
 8007e70:	2300      	movne	r3, #0
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	461a      	mov	r2, r3
 8007e76:	79fb      	ldrb	r3, [r7, #7]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d19b      	bne.n	8007db4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3720      	adds	r7, #32
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	20000000 	.word	0x20000000

08007e8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b086      	sub	sp, #24
 8007e90:	af02      	add	r7, sp, #8
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	9300      	str	r3, [sp, #0]
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	2180      	movs	r1, #128	; 0x80
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f7ff ff6a 	bl	8007d7c <SPI_WaitFlagStateUntilTimeout>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d007      	beq.n	8007ebe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eb2:	f043 0220 	orr.w	r2, r3, #32
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e000      	b.n	8007ec0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007ec8:	b084      	sub	sp, #16
 8007eca:	b480      	push	{r7}
 8007ecc:	b085      	sub	sp, #20
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
 8007ed2:	f107 001c 	add.w	r0, r7, #28
 8007ed6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007eda:	2300      	movs	r3, #0
 8007edc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007ede:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007ee0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007ee2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007ee6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007eea:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007eee:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007ef2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007f02:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	431a      	orrs	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007f0e:	2300      	movs	r3, #0
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3714      	adds	r7, #20
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bc80      	pop	{r7}
 8007f18:	b004      	add	sp, #16
 8007f1a:	4770      	bx	lr

08007f1c <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	370c      	adds	r7, #12
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bc80      	pop	{r7}
 8007f32:	4770      	bx	lr

08007f34 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	370c      	adds	r7, #12
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bc80      	pop	{r7}
 8007f52:	4770      	bx	lr

08007f54 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2203      	movs	r2, #3
 8007f60:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007f62:	2002      	movs	r0, #2
 8007f64:	f7fa ffe6 	bl	8002f34 <HAL_Delay>
  
  return HAL_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3708      	adds	r7, #8
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <SDIO_PowerState_OFF>:
  * @brief  Set SDMMC Power state to OFF. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_OFF(SDIO_TypeDef *SDIOx)
{
 8007f72:	b480      	push	{r7}
 8007f74:	b083      	sub	sp, #12
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
  /* Set power state to OFF */
  SDIOx->POWER = (uint32_t)0x00000000;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	370c      	adds	r7, #12
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bc80      	pop	{r7}
 8007f8a:	4770      	bx	lr

08007f8c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f003 0303 	and.w	r3, r3, #3
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bc80      	pop	{r7}
 8007fa4:	4770      	bx	lr

08007fa6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007fa6:	b480      	push	{r7}
 8007fa8:	b085      	sub	sp, #20
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
 8007fae:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007fc4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007fca:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007fd0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007fe0:	f023 030f 	bic.w	r3, r3, #15
 8007fe4:	68fa      	ldr	r2, [r7, #12]
 8007fe6:	431a      	orrs	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3714      	adds	r7, #20
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bc80      	pop	{r7}
 8007ff6:	4770      	bx	lr

08007ff8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	b2db      	uxtb	r3, r3
}
 8008006:	4618      	mov	r0, r3
 8008008:	370c      	adds	r7, #12
 800800a:	46bd      	mov	sp, r7
 800800c:	bc80      	pop	{r7}
 800800e:	4770      	bx	lr

08008010 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008010:	b480      	push	{r7}
 8008012:	b085      	sub	sp, #20
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	3314      	adds	r3, #20
 800801e:	461a      	mov	r2, r3
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	4413      	add	r3, r2
 8008024:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
}  
 800802a:	4618      	mov	r0, r3
 800802c:	3714      	adds	r7, #20
 800802e:	46bd      	mov	sp, r7
 8008030:	bc80      	pop	{r7}
 8008032:	4770      	bx	lr

08008034 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800803e:	2300      	movs	r3, #0
 8008040:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	685a      	ldr	r2, [r3, #4]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800805a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008060:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008066:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	4313      	orrs	r3, r2
 800806c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008072:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	431a      	orrs	r2, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800807e:	2300      	movs	r3, #0

}
 8008080:	4618      	mov	r0, r3
 8008082:	3714      	adds	r7, #20
 8008084:	46bd      	mov	sp, r7
 8008086:	bc80      	pop	{r7}
 8008088:	4770      	bx	lr

0800808a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b088      	sub	sp, #32
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
 8008092:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008098:	2310      	movs	r3, #16
 800809a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800809c:	2340      	movs	r3, #64	; 0x40
 800809e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80080a0:	2300      	movs	r3, #0
 80080a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80080a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80080aa:	f107 0308 	add.w	r3, r7, #8
 80080ae:	4619      	mov	r1, r3
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f7ff ff78 	bl	8007fa6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80080b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80080ba:	2110      	movs	r1, #16
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f9ff 	bl	80084c0 <SDMMC_GetCmdResp1>
 80080c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080c4:	69fb      	ldr	r3, [r7, #28]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3720      	adds	r7, #32
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b088      	sub	sp, #32
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
 80080d6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80080dc:	2311      	movs	r3, #17
 80080de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80080e0:	2340      	movs	r3, #64	; 0x40
 80080e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80080e4:	2300      	movs	r3, #0
 80080e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80080e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80080ee:	f107 0308 	add.w	r3, r7, #8
 80080f2:	4619      	mov	r1, r3
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f7ff ff56 	bl	8007fa6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80080fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80080fe:	2111      	movs	r1, #17
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 f9dd 	bl	80084c0 <SDMMC_GetCmdResp1>
 8008106:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008108:	69fb      	ldr	r3, [r7, #28]
}
 800810a:	4618      	mov	r0, r3
 800810c:	3720      	adds	r7, #32
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b088      	sub	sp, #32
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
 800811a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008120:	2312      	movs	r3, #18
 8008122:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008124:	2340      	movs	r3, #64	; 0x40
 8008126:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008128:	2300      	movs	r3, #0
 800812a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800812c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008130:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008132:	f107 0308 	add.w	r3, r7, #8
 8008136:	4619      	mov	r1, r3
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f7ff ff34 	bl	8007fa6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800813e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008142:	2112      	movs	r1, #18
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 f9bb 	bl	80084c0 <SDMMC_GetCmdResp1>
 800814a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800814c:	69fb      	ldr	r3, [r7, #28]
}
 800814e:	4618      	mov	r0, r3
 8008150:	3720      	adds	r7, #32
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b088      	sub	sp, #32
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
 800815e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008164:	2318      	movs	r3, #24
 8008166:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008168:	2340      	movs	r3, #64	; 0x40
 800816a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800816c:	2300      	movs	r3, #0
 800816e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008174:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008176:	f107 0308 	add.w	r3, r7, #8
 800817a:	4619      	mov	r1, r3
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f7ff ff12 	bl	8007fa6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008182:	f241 3288 	movw	r2, #5000	; 0x1388
 8008186:	2118      	movs	r1, #24
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 f999 	bl	80084c0 <SDMMC_GetCmdResp1>
 800818e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008190:	69fb      	ldr	r3, [r7, #28]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3720      	adds	r7, #32
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b088      	sub	sp, #32
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
 80081a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80081a8:	2319      	movs	r3, #25
 80081aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80081ac:	2340      	movs	r3, #64	; 0x40
 80081ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80081b0:	2300      	movs	r3, #0
 80081b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80081b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80081ba:	f107 0308 	add.w	r3, r7, #8
 80081be:	4619      	mov	r1, r3
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f7ff fef0 	bl	8007fa6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80081c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80081ca:	2119      	movs	r1, #25
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 f977 	bl	80084c0 <SDMMC_GetCmdResp1>
 80081d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081d4:	69fb      	ldr	r3, [r7, #28]
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3720      	adds	r7, #32
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
	...

080081e0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b088      	sub	sp, #32
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80081e8:	2300      	movs	r3, #0
 80081ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80081ec:	230c      	movs	r3, #12
 80081ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80081f0:	2340      	movs	r3, #64	; 0x40
 80081f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80081f4:	2300      	movs	r3, #0
 80081f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80081f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80081fe:	f107 0308 	add.w	r3, r7, #8
 8008202:	4619      	mov	r1, r3
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f7ff fece 	bl	8007fa6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800820a:	4a05      	ldr	r2, [pc, #20]	; (8008220 <SDMMC_CmdStopTransfer+0x40>)
 800820c:	210c      	movs	r1, #12
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 f956 	bl	80084c0 <SDMMC_GetCmdResp1>
 8008214:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008216:	69fb      	ldr	r3, [r7, #28]
}
 8008218:	4618      	mov	r0, r3
 800821a:	3720      	adds	r7, #32
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}
 8008220:	05f5e100 	.word	0x05f5e100

08008224 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b08a      	sub	sp, #40	; 0x28
 8008228:	af00      	add	r7, sp, #0
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008234:	2307      	movs	r3, #7
 8008236:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008238:	2340      	movs	r3, #64	; 0x40
 800823a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800823c:	2300      	movs	r3, #0
 800823e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008244:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008246:	f107 0310 	add.w	r3, r7, #16
 800824a:	4619      	mov	r1, r3
 800824c:	68f8      	ldr	r0, [r7, #12]
 800824e:	f7ff feaa 	bl	8007fa6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008252:	f241 3288 	movw	r2, #5000	; 0x1388
 8008256:	2107      	movs	r1, #7
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f000 f931 	bl	80084c0 <SDMMC_GetCmdResp1>
 800825e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008262:	4618      	mov	r0, r3
 8008264:	3728      	adds	r7, #40	; 0x28
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b088      	sub	sp, #32
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008272:	2300      	movs	r3, #0
 8008274:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008276:	2300      	movs	r3, #0
 8008278:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800827a:	2300      	movs	r3, #0
 800827c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800827e:	2300      	movs	r3, #0
 8008280:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008286:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008288:	f107 0308 	add.w	r3, r7, #8
 800828c:	4619      	mov	r1, r3
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f7ff fe89 	bl	8007fa6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 f8eb 	bl	8008470 <SDMMC_GetCmdError>
 800829a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800829c:	69fb      	ldr	r3, [r7, #28]
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3720      	adds	r7, #32
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b088      	sub	sp, #32
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80082ae:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80082b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80082b4:	2308      	movs	r3, #8
 80082b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80082b8:	2340      	movs	r3, #64	; 0x40
 80082ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80082bc:	2300      	movs	r3, #0
 80082be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80082c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80082c6:	f107 0308 	add.w	r3, r7, #8
 80082ca:	4619      	mov	r1, r3
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f7ff fe6a 	bl	8007fa6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 fad4 	bl	8008880 <SDMMC_GetCmdResp7>
 80082d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082da:	69fb      	ldr	r3, [r7, #28]
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3720      	adds	r7, #32
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b088      	sub	sp, #32
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80082f2:	2337      	movs	r3, #55	; 0x37
 80082f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80082f6:	2340      	movs	r3, #64	; 0x40
 80082f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80082fa:	2300      	movs	r3, #0
 80082fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80082fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008302:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008304:	f107 0308 	add.w	r3, r7, #8
 8008308:	4619      	mov	r1, r3
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f7ff fe4b 	bl	8007fa6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8008310:	f241 3288 	movw	r2, #5000	; 0x1388
 8008314:	2137      	movs	r1, #55	; 0x37
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 f8d2 	bl	80084c0 <SDMMC_GetCmdResp1>
 800831c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800831e:	69fb      	ldr	r3, [r7, #28]
}
 8008320:	4618      	mov	r0, r3
 8008322:	3720      	adds	r7, #32
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b088      	sub	sp, #32
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008338:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800833c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800833e:	2329      	movs	r3, #41	; 0x29
 8008340:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008342:	2340      	movs	r3, #64	; 0x40
 8008344:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008346:	2300      	movs	r3, #0
 8008348:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800834a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800834e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008350:	f107 0308 	add.w	r3, r7, #8
 8008354:	4619      	mov	r1, r3
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f7ff fe25 	bl	8007fa6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 f9e1 	bl	8008724 <SDMMC_GetCmdResp3>
 8008362:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008364:	69fb      	ldr	r3, [r7, #28]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3720      	adds	r7, #32
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}

0800836e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800836e:	b580      	push	{r7, lr}
 8008370:	b088      	sub	sp, #32
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008376:	2300      	movs	r3, #0
 8008378:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800837a:	2302      	movs	r3, #2
 800837c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800837e:	23c0      	movs	r3, #192	; 0xc0
 8008380:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008382:	2300      	movs	r3, #0
 8008384:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800838a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800838c:	f107 0308 	add.w	r3, r7, #8
 8008390:	4619      	mov	r1, r3
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f7ff fe07 	bl	8007fa6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 f97d 	bl	8008698 <SDMMC_GetCmdResp2>
 800839e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083a0:	69fb      	ldr	r3, [r7, #28]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3720      	adds	r7, #32
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b088      	sub	sp, #32
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
 80083b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80083b8:	2309      	movs	r3, #9
 80083ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80083bc:	23c0      	movs	r3, #192	; 0xc0
 80083be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80083c0:	2300      	movs	r3, #0
 80083c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80083c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80083ca:	f107 0308 	add.w	r3, r7, #8
 80083ce:	4619      	mov	r1, r3
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f7ff fde8 	bl	8007fa6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 f95e 	bl	8008698 <SDMMC_GetCmdResp2>
 80083dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083de:	69fb      	ldr	r3, [r7, #28]
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3720      	adds	r7, #32
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b088      	sub	sp, #32
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80083f2:	2300      	movs	r3, #0
 80083f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80083f6:	2303      	movs	r3, #3
 80083f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80083fa:	2340      	movs	r3, #64	; 0x40
 80083fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80083fe:	2300      	movs	r3, #0
 8008400:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008406:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008408:	f107 0308 	add.w	r3, r7, #8
 800840c:	4619      	mov	r1, r3
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f7ff fdc9 	bl	8007fa6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008414:	683a      	ldr	r2, [r7, #0]
 8008416:	2103      	movs	r1, #3
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 f9bd 	bl	8008798 <SDMMC_GetCmdResp6>
 800841e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008420:	69fb      	ldr	r3, [r7, #28]
}
 8008422:	4618      	mov	r0, r3
 8008424:	3720      	adds	r7, #32
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b088      	sub	sp, #32
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
 8008432:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008438:	230d      	movs	r3, #13
 800843a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800843c:	2340      	movs	r3, #64	; 0x40
 800843e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008440:	2300      	movs	r3, #0
 8008442:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008448:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800844a:	f107 0308 	add.w	r3, r7, #8
 800844e:	4619      	mov	r1, r3
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f7ff fda8 	bl	8007fa6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8008456:	f241 3288 	movw	r2, #5000	; 0x1388
 800845a:	210d      	movs	r1, #13
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 f82f 	bl	80084c0 <SDMMC_GetCmdResp1>
 8008462:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008464:	69fb      	ldr	r3, [r7, #28]
}
 8008466:	4618      	mov	r0, r3
 8008468:	3720      	adds	r7, #32
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
	...

08008470 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008470:	b490      	push	{r4, r7}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008478:	4b0f      	ldr	r3, [pc, #60]	; (80084b8 <SDMMC_GetCmdError+0x48>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a0f      	ldr	r2, [pc, #60]	; (80084bc <SDMMC_GetCmdError+0x4c>)
 800847e:	fba2 2303 	umull	r2, r3, r2, r3
 8008482:	0a5b      	lsrs	r3, r3, #9
 8008484:	f241 3288 	movw	r2, #5000	; 0x1388
 8008488:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800848c:	4623      	mov	r3, r4
 800848e:	1e5c      	subs	r4, r3, #1
 8008490:	2b00      	cmp	r3, #0
 8008492:	d102      	bne.n	800849a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008494:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008498:	e009      	b.n	80084ae <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800849e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d0f2      	beq.n	800848c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	22c5      	movs	r2, #197	; 0xc5
 80084aa:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bc90      	pop	{r4, r7}
 80084b6:	4770      	bx	lr
 80084b8:	20000000 	.word	0x20000000
 80084bc:	10624dd3 	.word	0x10624dd3

080084c0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80084c0:	b590      	push	{r4, r7, lr}
 80084c2:	b087      	sub	sp, #28
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	460b      	mov	r3, r1
 80084ca:	607a      	str	r2, [r7, #4]
 80084cc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80084ce:	4b6f      	ldr	r3, [pc, #444]	; (800868c <SDMMC_GetCmdResp1+0x1cc>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a6f      	ldr	r2, [pc, #444]	; (8008690 <SDMMC_GetCmdResp1+0x1d0>)
 80084d4:	fba2 2303 	umull	r2, r3, r2, r3
 80084d8:	0a5b      	lsrs	r3, r3, #9
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80084e0:	4623      	mov	r3, r4
 80084e2:	1e5c      	subs	r4, r3, #1
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d102      	bne.n	80084ee <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80084e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80084ec:	e0c9      	b.n	8008682 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084f2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d0f0      	beq.n	80084e0 <SDMMC_GetCmdResp1+0x20>
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008504:	2b00      	cmp	r3, #0
 8008506:	d1eb      	bne.n	80084e0 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800850c:	f003 0304 	and.w	r3, r3, #4
 8008510:	2b00      	cmp	r3, #0
 8008512:	d004      	beq.n	800851e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2204      	movs	r2, #4
 8008518:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800851a:	2304      	movs	r3, #4
 800851c:	e0b1      	b.n	8008682 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008522:	f003 0301 	and.w	r3, r3, #1
 8008526:	2b00      	cmp	r3, #0
 8008528:	d004      	beq.n	8008534 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2201      	movs	r2, #1
 800852e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008530:	2301      	movs	r3, #1
 8008532:	e0a6      	b.n	8008682 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	22c5      	movs	r2, #197	; 0xc5
 8008538:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800853a:	68f8      	ldr	r0, [r7, #12]
 800853c:	f7ff fd5c 	bl	8007ff8 <SDIO_GetCommandResponse>
 8008540:	4603      	mov	r3, r0
 8008542:	461a      	mov	r2, r3
 8008544:	7afb      	ldrb	r3, [r7, #11]
 8008546:	4293      	cmp	r3, r2
 8008548:	d001      	beq.n	800854e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800854a:	2301      	movs	r3, #1
 800854c:	e099      	b.n	8008682 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800854e:	2100      	movs	r1, #0
 8008550:	68f8      	ldr	r0, [r7, #12]
 8008552:	f7ff fd5d 	bl	8008010 <SDIO_GetResponse>
 8008556:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008558:	693a      	ldr	r2, [r7, #16]
 800855a:	4b4e      	ldr	r3, [pc, #312]	; (8008694 <SDMMC_GetCmdResp1+0x1d4>)
 800855c:	4013      	ands	r3, r2
 800855e:	2b00      	cmp	r3, #0
 8008560:	d101      	bne.n	8008566 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8008562:	2300      	movs	r3, #0
 8008564:	e08d      	b.n	8008682 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	2b00      	cmp	r3, #0
 800856a:	da02      	bge.n	8008572 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800856c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008570:	e087      	b.n	8008682 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008578:	2b00      	cmp	r3, #0
 800857a:	d001      	beq.n	8008580 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800857c:	2340      	movs	r3, #64	; 0x40
 800857e:	e080      	b.n	8008682 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008586:	2b00      	cmp	r3, #0
 8008588:	d001      	beq.n	800858e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800858a:	2380      	movs	r3, #128	; 0x80
 800858c:	e079      	b.n	8008682 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008594:	2b00      	cmp	r3, #0
 8008596:	d002      	beq.n	800859e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008598:	f44f 7380 	mov.w	r3, #256	; 0x100
 800859c:	e071      	b.n	8008682 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d002      	beq.n	80085ae <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80085a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085ac:	e069      	b.n	8008682 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d002      	beq.n	80085be <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80085b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085bc:	e061      	b.n	8008682 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d002      	beq.n	80085ce <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80085c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80085cc:	e059      	b.n	8008682 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d002      	beq.n	80085de <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80085d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085dc:	e051      	b.n	8008682 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d002      	beq.n	80085ee <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80085e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80085ec:	e049      	b.n	8008682 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d002      	beq.n	80085fe <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80085f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80085fc:	e041      	b.n	8008682 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008604:	2b00      	cmp	r3, #0
 8008606:	d002      	beq.n	800860e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8008608:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800860c:	e039      	b.n	8008682 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008614:	2b00      	cmp	r3, #0
 8008616:	d002      	beq.n	800861e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008618:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800861c:	e031      	b.n	8008682 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008624:	2b00      	cmp	r3, #0
 8008626:	d002      	beq.n	800862e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008628:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800862c:	e029      	b.n	8008682 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008634:	2b00      	cmp	r3, #0
 8008636:	d002      	beq.n	800863e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008638:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800863c:	e021      	b.n	8008682 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008644:	2b00      	cmp	r3, #0
 8008646:	d002      	beq.n	800864e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008648:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800864c:	e019      	b.n	8008682 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008654:	2b00      	cmp	r3, #0
 8008656:	d002      	beq.n	800865e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008658:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800865c:	e011      	b.n	8008682 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008664:	2b00      	cmp	r3, #0
 8008666:	d002      	beq.n	800866e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008668:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800866c:	e009      	b.n	8008682 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	f003 0308 	and.w	r3, r3, #8
 8008674:	2b00      	cmp	r3, #0
 8008676:	d002      	beq.n	800867e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008678:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800867c:	e001      	b.n	8008682 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800867e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008682:	4618      	mov	r0, r3
 8008684:	371c      	adds	r7, #28
 8008686:	46bd      	mov	sp, r7
 8008688:	bd90      	pop	{r4, r7, pc}
 800868a:	bf00      	nop
 800868c:	20000000 	.word	0x20000000
 8008690:	10624dd3 	.word	0x10624dd3
 8008694:	fdffe008 	.word	0xfdffe008

08008698 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008698:	b490      	push	{r4, r7}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80086a0:	4b1e      	ldr	r3, [pc, #120]	; (800871c <SDMMC_GetCmdResp2+0x84>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a1e      	ldr	r2, [pc, #120]	; (8008720 <SDMMC_GetCmdResp2+0x88>)
 80086a6:	fba2 2303 	umull	r2, r3, r2, r3
 80086aa:	0a5b      	lsrs	r3, r3, #9
 80086ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80086b0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80086b4:	4623      	mov	r3, r4
 80086b6:	1e5c      	subs	r4, r3, #1
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d102      	bne.n	80086c2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80086bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80086c0:	e026      	b.n	8008710 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086c6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d0f0      	beq.n	80086b4 <SDMMC_GetCmdResp2+0x1c>
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d1eb      	bne.n	80086b4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086e0:	f003 0304 	and.w	r3, r3, #4
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d004      	beq.n	80086f2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2204      	movs	r2, #4
 80086ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80086ee:	2304      	movs	r3, #4
 80086f0:	e00e      	b.n	8008710 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086f6:	f003 0301 	and.w	r3, r3, #1
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d004      	beq.n	8008708 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2201      	movs	r2, #1
 8008702:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008704:	2301      	movs	r3, #1
 8008706:	e003      	b.n	8008710 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	22c5      	movs	r2, #197	; 0xc5
 800870c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bc90      	pop	{r4, r7}
 8008718:	4770      	bx	lr
 800871a:	bf00      	nop
 800871c:	20000000 	.word	0x20000000
 8008720:	10624dd3 	.word	0x10624dd3

08008724 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008724:	b490      	push	{r4, r7}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800872c:	4b18      	ldr	r3, [pc, #96]	; (8008790 <SDMMC_GetCmdResp3+0x6c>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a18      	ldr	r2, [pc, #96]	; (8008794 <SDMMC_GetCmdResp3+0x70>)
 8008732:	fba2 2303 	umull	r2, r3, r2, r3
 8008736:	0a5b      	lsrs	r3, r3, #9
 8008738:	f241 3288 	movw	r2, #5000	; 0x1388
 800873c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008740:	4623      	mov	r3, r4
 8008742:	1e5c      	subs	r4, r3, #1
 8008744:	2b00      	cmp	r3, #0
 8008746:	d102      	bne.n	800874e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008748:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800874c:	e01b      	b.n	8008786 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008752:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800875a:	2b00      	cmp	r3, #0
 800875c:	d0f0      	beq.n	8008740 <SDMMC_GetCmdResp3+0x1c>
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1eb      	bne.n	8008740 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800876c:	f003 0304 	and.w	r3, r3, #4
 8008770:	2b00      	cmp	r3, #0
 8008772:	d004      	beq.n	800877e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2204      	movs	r2, #4
 8008778:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800877a:	2304      	movs	r3, #4
 800877c:	e003      	b.n	8008786 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	22c5      	movs	r2, #197	; 0xc5
 8008782:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bc90      	pop	{r4, r7}
 800878e:	4770      	bx	lr
 8008790:	20000000 	.word	0x20000000
 8008794:	10624dd3 	.word	0x10624dd3

08008798 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008798:	b590      	push	{r4, r7, lr}
 800879a:	b087      	sub	sp, #28
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	460b      	mov	r3, r1
 80087a2:	607a      	str	r2, [r7, #4]
 80087a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80087a6:	4b34      	ldr	r3, [pc, #208]	; (8008878 <SDMMC_GetCmdResp6+0xe0>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a34      	ldr	r2, [pc, #208]	; (800887c <SDMMC_GetCmdResp6+0xe4>)
 80087ac:	fba2 2303 	umull	r2, r3, r2, r3
 80087b0:	0a5b      	lsrs	r3, r3, #9
 80087b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80087b6:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80087ba:	4623      	mov	r3, r4
 80087bc:	1e5c      	subs	r4, r3, #1
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d102      	bne.n	80087c8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80087c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80087c6:	e052      	b.n	800886e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087cc:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d0f0      	beq.n	80087ba <SDMMC_GetCmdResp6+0x22>
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d1eb      	bne.n	80087ba <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087e6:	f003 0304 	and.w	r3, r3, #4
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d004      	beq.n	80087f8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2204      	movs	r2, #4
 80087f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80087f4:	2304      	movs	r3, #4
 80087f6:	e03a      	b.n	800886e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087fc:	f003 0301 	and.w	r3, r3, #1
 8008800:	2b00      	cmp	r3, #0
 8008802:	d004      	beq.n	800880e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2201      	movs	r2, #1
 8008808:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800880a:	2301      	movs	r3, #1
 800880c:	e02f      	b.n	800886e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	f7ff fbf2 	bl	8007ff8 <SDIO_GetCommandResponse>
 8008814:	4603      	mov	r3, r0
 8008816:	461a      	mov	r2, r3
 8008818:	7afb      	ldrb	r3, [r7, #11]
 800881a:	4293      	cmp	r3, r2
 800881c:	d001      	beq.n	8008822 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800881e:	2301      	movs	r3, #1
 8008820:	e025      	b.n	800886e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	22c5      	movs	r2, #197	; 0xc5
 8008826:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008828:	2100      	movs	r1, #0
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f7ff fbf0 	bl	8008010 <SDIO_GetResponse>
 8008830:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008838:	2b00      	cmp	r3, #0
 800883a:	d106      	bne.n	800884a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	0c1b      	lsrs	r3, r3, #16
 8008840:	b29a      	uxth	r2, r3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008846:	2300      	movs	r3, #0
 8008848:	e011      	b.n	800886e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008850:	2b00      	cmp	r3, #0
 8008852:	d002      	beq.n	800885a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008854:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008858:	e009      	b.n	800886e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008860:	2b00      	cmp	r3, #0
 8008862:	d002      	beq.n	800886a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008868:	e001      	b.n	800886e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800886a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800886e:	4618      	mov	r0, r3
 8008870:	371c      	adds	r7, #28
 8008872:	46bd      	mov	sp, r7
 8008874:	bd90      	pop	{r4, r7, pc}
 8008876:	bf00      	nop
 8008878:	20000000 	.word	0x20000000
 800887c:	10624dd3 	.word	0x10624dd3

08008880 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008880:	b490      	push	{r4, r7}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008888:	4b21      	ldr	r3, [pc, #132]	; (8008910 <SDMMC_GetCmdResp7+0x90>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a21      	ldr	r2, [pc, #132]	; (8008914 <SDMMC_GetCmdResp7+0x94>)
 800888e:	fba2 2303 	umull	r2, r3, r2, r3
 8008892:	0a5b      	lsrs	r3, r3, #9
 8008894:	f241 3288 	movw	r2, #5000	; 0x1388
 8008898:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800889c:	4623      	mov	r3, r4
 800889e:	1e5c      	subs	r4, r3, #1
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d102      	bne.n	80088aa <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80088a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088a8:	e02c      	b.n	8008904 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ae:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d0f0      	beq.n	800889c <SDMMC_GetCmdResp7+0x1c>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d1eb      	bne.n	800889c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088c8:	f003 0304 	and.w	r3, r3, #4
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d004      	beq.n	80088da <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2204      	movs	r2, #4
 80088d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80088d6:	2304      	movs	r3, #4
 80088d8:	e014      	b.n	8008904 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088de:	f003 0301 	and.w	r3, r3, #1
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d004      	beq.n	80088f0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2201      	movs	r2, #1
 80088ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80088ec:	2301      	movs	r3, #1
 80088ee:	e009      	b.n	8008904 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d002      	beq.n	8008902 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2240      	movs	r2, #64	; 0x40
 8008900:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008902:	2300      	movs	r3, #0
  
}
 8008904:	4618      	mov	r0, r3
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bc90      	pop	{r4, r7}
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop
 8008910:	20000000 	.word	0x20000000
 8008914:	10624dd3 	.word	0x10624dd3

08008918 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008918:	b084      	sub	sp, #16
 800891a:	b480      	push	{r7}
 800891c:	b083      	sub	sp, #12
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
 8008922:	f107 0014 	add.w	r0, r7, #20
 8008926:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	bc80      	pop	{r7}
 8008934:	b004      	add	sp, #16
 8008936:	4770      	bx	lr

08008938 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008938:	b480      	push	{r7}
 800893a:	b085      	sub	sp, #20
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2200      	movs	r2, #0
 8008944:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008948:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800894c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	b29a      	uxth	r2, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3714      	adds	r7, #20
 800895e:	46bd      	mov	sp, r7
 8008960:	bc80      	pop	{r7}
 8008962:	4770      	bx	lr

08008964 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008964:	b480      	push	{r7}
 8008966:	b085      	sub	sp, #20
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800896c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008970:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008978:	b29a      	uxth	r2, r3
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	b29b      	uxth	r3, r3
 800897e:	43db      	mvns	r3, r3
 8008980:	b29b      	uxth	r3, r3
 8008982:	4013      	ands	r3, r2
 8008984:	b29a      	uxth	r2, r3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3714      	adds	r7, #20
 8008992:	46bd      	mov	sp, r7
 8008994:	bc80      	pop	{r7}
 8008996:	4770      	bx	lr

08008998 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	460b      	mov	r3, r1
 80089a2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	370c      	adds	r7, #12
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bc80      	pop	{r7}
 80089ae:	4770      	bx	lr

080089b0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80089b0:	b084      	sub	sp, #16
 80089b2:	b480      	push	{r7}
 80089b4:	b083      	sub	sp, #12
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
 80089ba:	f107 0014 	add.w	r0, r7, #20
 80089be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2201      	movs	r2, #1
 80089c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2200      	movs	r2, #0
 80089d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80089e2:	2300      	movs	r3, #0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	370c      	adds	r7, #12
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bc80      	pop	{r7}
 80089ec:	b004      	add	sp, #16
 80089ee:	4770      	bx	lr

080089f0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b09b      	sub	sp, #108	; 0x6c
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80089fa:	2300      	movs	r3, #0
 80089fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	4413      	add	r3, r2
 8008a0a:	881b      	ldrh	r3, [r3, #0]
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	78db      	ldrb	r3, [r3, #3]
 8008a1e:	2b03      	cmp	r3, #3
 8008a20:	d81f      	bhi.n	8008a62 <USB_ActivateEndpoint+0x72>
 8008a22:	a201      	add	r2, pc, #4	; (adr r2, 8008a28 <USB_ActivateEndpoint+0x38>)
 8008a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a28:	08008a39 	.word	0x08008a39
 8008a2c:	08008a55 	.word	0x08008a55
 8008a30:	08008a6b 	.word	0x08008a6b
 8008a34:	08008a47 	.word	0x08008a47
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008a38:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008a3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a40:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008a44:	e012      	b.n	8008a6c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008a46:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008a4a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008a4e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008a52:	e00b      	b.n	8008a6c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008a54:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008a58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008a5c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008a60:	e004      	b.n	8008a6c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8008a68:	e000      	b.n	8008a6c <USB_ActivateEndpoint+0x7c>
      break;
 8008a6a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	441a      	add	r2, r3
 8008a76:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	4413      	add	r3, r2
 8008a98:	881b      	ldrh	r3, [r3, #0]
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	4313      	orrs	r3, r2
 8008aae:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	441a      	add	r2, r3
 8008abc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8008ac0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ac4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ac8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	7b1b      	ldrb	r3, [r3, #12]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f040 8149 	bne.w	8008d70 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	785b      	ldrb	r3, [r3, #1]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	f000 8084 	beq.w	8008bf0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	617b      	str	r3, [r7, #20]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	461a      	mov	r2, r3
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	4413      	add	r3, r2
 8008afa:	617b      	str	r3, [r7, #20]
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	011a      	lsls	r2, r3, #4
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	4413      	add	r3, r2
 8008b06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b0a:	613b      	str	r3, [r7, #16]
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	88db      	ldrh	r3, [r3, #6]
 8008b10:	085b      	lsrs	r3, r3, #1
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	005b      	lsls	r3, r3, #1
 8008b16:	b29a      	uxth	r2, r3
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4413      	add	r3, r2
 8008b26:	881b      	ldrh	r3, [r3, #0]
 8008b28:	81fb      	strh	r3, [r7, #14]
 8008b2a:	89fb      	ldrh	r3, [r7, #14]
 8008b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d01b      	beq.n	8008b6c <USB_ActivateEndpoint+0x17c>
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	4413      	add	r3, r2
 8008b3e:	881b      	ldrh	r3, [r3, #0]
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b4a:	81bb      	strh	r3, [r7, #12]
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	441a      	add	r2, r3
 8008b56:	89bb      	ldrh	r3, [r7, #12]
 8008b58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	78db      	ldrb	r3, [r3, #3]
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d020      	beq.n	8008bb6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	4413      	add	r3, r2
 8008b7e:	881b      	ldrh	r3, [r3, #0]
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b8a:	813b      	strh	r3, [r7, #8]
 8008b8c:	893b      	ldrh	r3, [r7, #8]
 8008b8e:	f083 0320 	eor.w	r3, r3, #32
 8008b92:	813b      	strh	r3, [r7, #8]
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	441a      	add	r2, r3
 8008b9e:	893b      	ldrh	r3, [r7, #8]
 8008ba0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ba4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ba8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	8013      	strh	r3, [r2, #0]
 8008bb4:	e27f      	b.n	80090b6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	4413      	add	r3, r2
 8008bc0:	881b      	ldrh	r3, [r3, #0]
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bcc:	817b      	strh	r3, [r7, #10]
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	441a      	add	r2, r3
 8008bd8:	897b      	ldrh	r3, [r7, #10]
 8008bda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	8013      	strh	r3, [r2, #0]
 8008bee:	e262      	b.n	80090b6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c00:	4413      	add	r3, r2
 8008c02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	011a      	lsls	r2, r3, #4
 8008c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0c:	4413      	add	r3, r2
 8008c0e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008c12:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	88db      	ldrh	r3, [r3, #6]
 8008c18:	085b      	lsrs	r3, r3, #1
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	005b      	lsls	r3, r3, #1
 8008c1e:	b29a      	uxth	r2, r3
 8008c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c22:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	627b      	str	r3, [r7, #36]	; 0x24
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	461a      	mov	r2, r3
 8008c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c34:	4413      	add	r3, r2
 8008c36:	627b      	str	r3, [r7, #36]	; 0x24
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	011a      	lsls	r2, r3, #4
 8008c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c40:	4413      	add	r3, r2
 8008c42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c46:	623b      	str	r3, [r7, #32]
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d112      	bne.n	8008c76 <USB_ActivateEndpoint+0x286>
 8008c50:	6a3b      	ldr	r3, [r7, #32]
 8008c52:	881b      	ldrh	r3, [r3, #0]
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c5a:	b29a      	uxth	r2, r3
 8008c5c:	6a3b      	ldr	r3, [r7, #32]
 8008c5e:	801a      	strh	r2, [r3, #0]
 8008c60:	6a3b      	ldr	r3, [r7, #32]
 8008c62:	881b      	ldrh	r3, [r3, #0]
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c6e:	b29a      	uxth	r2, r3
 8008c70:	6a3b      	ldr	r3, [r7, #32]
 8008c72:	801a      	strh	r2, [r3, #0]
 8008c74:	e02f      	b.n	8008cd6 <USB_ActivateEndpoint+0x2e6>
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	2b3e      	cmp	r3, #62	; 0x3e
 8008c7c:	d813      	bhi.n	8008ca6 <USB_ActivateEndpoint+0x2b6>
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	085b      	lsrs	r3, r3, #1
 8008c84:	663b      	str	r3, [r7, #96]	; 0x60
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	691b      	ldr	r3, [r3, #16]
 8008c8a:	f003 0301 	and.w	r3, r3, #1
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d002      	beq.n	8008c98 <USB_ActivateEndpoint+0x2a8>
 8008c92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c94:	3301      	adds	r3, #1
 8008c96:	663b      	str	r3, [r7, #96]	; 0x60
 8008c98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	029b      	lsls	r3, r3, #10
 8008c9e:	b29a      	uxth	r2, r3
 8008ca0:	6a3b      	ldr	r3, [r7, #32]
 8008ca2:	801a      	strh	r2, [r3, #0]
 8008ca4:	e017      	b.n	8008cd6 <USB_ActivateEndpoint+0x2e6>
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	691b      	ldr	r3, [r3, #16]
 8008caa:	095b      	lsrs	r3, r3, #5
 8008cac:	663b      	str	r3, [r7, #96]	; 0x60
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	f003 031f 	and.w	r3, r3, #31
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d102      	bne.n	8008cc0 <USB_ActivateEndpoint+0x2d0>
 8008cba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	663b      	str	r3, [r7, #96]	; 0x60
 8008cc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	029b      	lsls	r3, r3, #10
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ccc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cd0:	b29a      	uxth	r2, r3
 8008cd2:	6a3b      	ldr	r3, [r7, #32]
 8008cd4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	4413      	add	r3, r2
 8008ce0:	881b      	ldrh	r3, [r3, #0]
 8008ce2:	83fb      	strh	r3, [r7, #30]
 8008ce4:	8bfb      	ldrh	r3, [r7, #30]
 8008ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d01b      	beq.n	8008d26 <USB_ActivateEndpoint+0x336>
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	4413      	add	r3, r2
 8008cf8:	881b      	ldrh	r3, [r3, #0]
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d04:	83bb      	strh	r3, [r7, #28]
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	441a      	add	r2, r3
 8008d10:	8bbb      	ldrh	r3, [r7, #28]
 8008d12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	4413      	add	r3, r2
 8008d30:	881b      	ldrh	r3, [r3, #0]
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d3c:	837b      	strh	r3, [r7, #26]
 8008d3e:	8b7b      	ldrh	r3, [r7, #26]
 8008d40:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008d44:	837b      	strh	r3, [r7, #26]
 8008d46:	8b7b      	ldrh	r3, [r7, #26]
 8008d48:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008d4c:	837b      	strh	r3, [r7, #26]
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	441a      	add	r2, r3
 8008d58:	8b7b      	ldrh	r3, [r7, #26]
 8008d5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	8013      	strh	r3, [r2, #0]
 8008d6e:	e1a2      	b.n	80090b6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	4413      	add	r3, r2
 8008d7a:	881b      	ldrh	r3, [r3, #0]
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d86:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	441a      	add	r2, r3
 8008d94:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008d98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008da0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	65bb      	str	r3, [r7, #88]	; 0x58
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	461a      	mov	r2, r3
 8008dba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008dbc:	4413      	add	r3, r2
 8008dbe:	65bb      	str	r3, [r7, #88]	; 0x58
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	011a      	lsls	r2, r3, #4
 8008dc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008dc8:	4413      	add	r3, r2
 8008dca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dce:	657b      	str	r3, [r7, #84]	; 0x54
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	891b      	ldrh	r3, [r3, #8]
 8008dd4:	085b      	lsrs	r3, r3, #1
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	005b      	lsls	r3, r3, #1
 8008dda:	b29a      	uxth	r2, r3
 8008ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dde:	801a      	strh	r2, [r3, #0]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	653b      	str	r3, [r7, #80]	; 0x50
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	461a      	mov	r2, r3
 8008dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008df0:	4413      	add	r3, r2
 8008df2:	653b      	str	r3, [r7, #80]	; 0x50
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	011a      	lsls	r2, r3, #4
 8008dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dfc:	4413      	add	r3, r2
 8008dfe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008e02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	895b      	ldrh	r3, [r3, #10]
 8008e08:	085b      	lsrs	r3, r3, #1
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	005b      	lsls	r3, r3, #1
 8008e0e:	b29a      	uxth	r2, r3
 8008e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e12:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	785b      	ldrb	r3, [r3, #1]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	f040 8091 	bne.w	8008f40 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	4413      	add	r3, r2
 8008e28:	881b      	ldrh	r3, [r3, #0]
 8008e2a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008e2c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d01b      	beq.n	8008e6e <USB_ActivateEndpoint+0x47e>
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	4413      	add	r3, r2
 8008e40:	881b      	ldrh	r3, [r3, #0]
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e4c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	441a      	add	r2, r3
 8008e58:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008e5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	4413      	add	r3, r2
 8008e78:	881b      	ldrh	r3, [r3, #0]
 8008e7a:	873b      	strh	r3, [r7, #56]	; 0x38
 8008e7c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d01b      	beq.n	8008ebe <USB_ActivateEndpoint+0x4ce>
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	4413      	add	r3, r2
 8008e90:	881b      	ldrh	r3, [r3, #0]
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e9c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	441a      	add	r2, r3
 8008ea8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008eaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008eae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008eb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	4413      	add	r3, r2
 8008ec8:	881b      	ldrh	r3, [r3, #0]
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ed4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008ed6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008ed8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008edc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008ede:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008ee0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008ee4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	441a      	add	r2, r3
 8008ef0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008ef2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ef6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	4413      	add	r3, r2
 8008f10:	881b      	ldrh	r3, [r3, #0]
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f1c:	867b      	strh	r3, [r7, #50]	; 0x32
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	441a      	add	r2, r3
 8008f28:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008f2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	8013      	strh	r3, [r2, #0]
 8008f3e:	e0ba      	b.n	80090b6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	4413      	add	r3, r2
 8008f4a:	881b      	ldrh	r3, [r3, #0]
 8008f4c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008f50:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008f54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d01d      	beq.n	8008f98 <USB_ActivateEndpoint+0x5a8>
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	4413      	add	r3, r2
 8008f66:	881b      	ldrh	r3, [r3, #0]
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f72:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	441a      	add	r2, r3
 8008f80:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008f84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	4413      	add	r3, r2
 8008fa2:	881b      	ldrh	r3, [r3, #0]
 8008fa4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008fa8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d01d      	beq.n	8008ff0 <USB_ActivateEndpoint+0x600>
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	4413      	add	r3, r2
 8008fbe:	881b      	ldrh	r3, [r3, #0]
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	441a      	add	r2, r3
 8008fd8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008fdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fe0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fe8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	78db      	ldrb	r3, [r3, #3]
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d024      	beq.n	8009042 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	4413      	add	r3, r2
 8009002:	881b      	ldrh	r3, [r3, #0]
 8009004:	b29b      	uxth	r3, r3
 8009006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800900a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800900e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009012:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009016:	f083 0320 	eor.w	r3, r3, #32
 800901a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	441a      	add	r2, r3
 8009028:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800902c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009030:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009034:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800903c:	b29b      	uxth	r3, r3
 800903e:	8013      	strh	r3, [r2, #0]
 8009040:	e01d      	b.n	800907e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	4413      	add	r3, r2
 800904c:	881b      	ldrh	r3, [r3, #0]
 800904e:	b29b      	uxth	r3, r3
 8009050:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009054:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009058:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	441a      	add	r2, r3
 8009066:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800906a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800906e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800907a:	b29b      	uxth	r3, r3
 800907c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	4413      	add	r3, r2
 8009088:	881b      	ldrh	r3, [r3, #0]
 800908a:	b29b      	uxth	r3, r3
 800908c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009094:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	441a      	add	r2, r3
 80090a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80090a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80090b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	376c      	adds	r7, #108	; 0x6c
 80090be:	46bd      	mov	sp, r7
 80090c0:	bc80      	pop	{r7}
 80090c2:	4770      	bx	lr

080090c4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b08d      	sub	sp, #52	; 0x34
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	7b1b      	ldrb	r3, [r3, #12]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	f040 808e 	bne.w	80091f4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	785b      	ldrb	r3, [r3, #1]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d044      	beq.n	800916a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	4413      	add	r3, r2
 80090ea:	881b      	ldrh	r3, [r3, #0]
 80090ec:	81bb      	strh	r3, [r7, #12]
 80090ee:	89bb      	ldrh	r3, [r7, #12]
 80090f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d01b      	beq.n	8009130 <USB_DeactivateEndpoint+0x6c>
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	4413      	add	r3, r2
 8009102:	881b      	ldrh	r3, [r3, #0]
 8009104:	b29b      	uxth	r3, r3
 8009106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800910a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800910e:	817b      	strh	r3, [r7, #10]
 8009110:	687a      	ldr	r2, [r7, #4]
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	441a      	add	r2, r3
 800911a:	897b      	ldrh	r3, [r7, #10]
 800911c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009120:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009124:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009128:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800912c:	b29b      	uxth	r3, r3
 800912e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	4413      	add	r3, r2
 800913a:	881b      	ldrh	r3, [r3, #0]
 800913c:	b29b      	uxth	r3, r3
 800913e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009146:	813b      	strh	r3, [r7, #8]
 8009148:	687a      	ldr	r2, [r7, #4]
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	441a      	add	r2, r3
 8009152:	893b      	ldrh	r3, [r7, #8]
 8009154:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009158:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800915c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009164:	b29b      	uxth	r3, r3
 8009166:	8013      	strh	r3, [r2, #0]
 8009168:	e192      	b.n	8009490 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	4413      	add	r3, r2
 8009174:	881b      	ldrh	r3, [r3, #0]
 8009176:	827b      	strh	r3, [r7, #18]
 8009178:	8a7b      	ldrh	r3, [r7, #18]
 800917a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800917e:	2b00      	cmp	r3, #0
 8009180:	d01b      	beq.n	80091ba <USB_DeactivateEndpoint+0xf6>
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	4413      	add	r3, r2
 800918c:	881b      	ldrh	r3, [r3, #0]
 800918e:	b29b      	uxth	r3, r3
 8009190:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009198:	823b      	strh	r3, [r7, #16]
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	441a      	add	r2, r3
 80091a4:	8a3b      	ldrh	r3, [r7, #16]
 80091a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80091b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	4413      	add	r3, r2
 80091c4:	881b      	ldrh	r3, [r3, #0]
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091d0:	81fb      	strh	r3, [r7, #14]
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	441a      	add	r2, r3
 80091dc:	89fb      	ldrh	r3, [r7, #14]
 80091de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	8013      	strh	r3, [r2, #0]
 80091f2:	e14d      	b.n	8009490 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	785b      	ldrb	r3, [r3, #1]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	f040 80a5 	bne.w	8009348 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	4413      	add	r3, r2
 8009208:	881b      	ldrh	r3, [r3, #0]
 800920a:	843b      	strh	r3, [r7, #32]
 800920c:	8c3b      	ldrh	r3, [r7, #32]
 800920e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009212:	2b00      	cmp	r3, #0
 8009214:	d01b      	beq.n	800924e <USB_DeactivateEndpoint+0x18a>
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	4413      	add	r3, r2
 8009220:	881b      	ldrh	r3, [r3, #0]
 8009222:	b29b      	uxth	r3, r3
 8009224:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800922c:	83fb      	strh	r3, [r7, #30]
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	441a      	add	r2, r3
 8009238:	8bfb      	ldrh	r3, [r7, #30]
 800923a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800923e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009242:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800924a:	b29b      	uxth	r3, r3
 800924c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	4413      	add	r3, r2
 8009258:	881b      	ldrh	r3, [r3, #0]
 800925a:	83bb      	strh	r3, [r7, #28]
 800925c:	8bbb      	ldrh	r3, [r7, #28]
 800925e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009262:	2b00      	cmp	r3, #0
 8009264:	d01b      	beq.n	800929e <USB_DeactivateEndpoint+0x1da>
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	4413      	add	r3, r2
 8009270:	881b      	ldrh	r3, [r3, #0]
 8009272:	b29b      	uxth	r3, r3
 8009274:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800927c:	837b      	strh	r3, [r7, #26]
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	441a      	add	r2, r3
 8009288:	8b7b      	ldrh	r3, [r7, #26]
 800928a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800928e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009296:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800929a:	b29b      	uxth	r3, r3
 800929c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	4413      	add	r3, r2
 80092a8:	881b      	ldrh	r3, [r3, #0]
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092b4:	833b      	strh	r3, [r7, #24]
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	441a      	add	r2, r3
 80092c0:	8b3b      	ldrh	r3, [r7, #24]
 80092c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	4413      	add	r3, r2
 80092e0:	881b      	ldrh	r3, [r3, #0]
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092ec:	82fb      	strh	r3, [r7, #22]
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	441a      	add	r2, r3
 80092f8:	8afb      	ldrh	r3, [r7, #22]
 80092fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800930a:	b29b      	uxth	r3, r3
 800930c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	4413      	add	r3, r2
 8009318:	881b      	ldrh	r3, [r3, #0]
 800931a:	b29b      	uxth	r3, r3
 800931c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009320:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009324:	82bb      	strh	r3, [r7, #20]
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	441a      	add	r2, r3
 8009330:	8abb      	ldrh	r3, [r7, #20]
 8009332:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009336:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800933a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800933e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009342:	b29b      	uxth	r3, r3
 8009344:	8013      	strh	r3, [r2, #0]
 8009346:	e0a3      	b.n	8009490 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	4413      	add	r3, r2
 8009352:	881b      	ldrh	r3, [r3, #0]
 8009354:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009356:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800935c:	2b00      	cmp	r3, #0
 800935e:	d01b      	beq.n	8009398 <USB_DeactivateEndpoint+0x2d4>
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	4413      	add	r3, r2
 800936a:	881b      	ldrh	r3, [r3, #0]
 800936c:	b29b      	uxth	r3, r3
 800936e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009376:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	441a      	add	r2, r3
 8009382:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009384:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009388:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800938c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009394:	b29b      	uxth	r3, r3
 8009396:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	4413      	add	r3, r2
 80093a2:	881b      	ldrh	r3, [r3, #0]
 80093a4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80093a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80093a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d01b      	beq.n	80093e8 <USB_DeactivateEndpoint+0x324>
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	4413      	add	r3, r2
 80093ba:	881b      	ldrh	r3, [r3, #0]
 80093bc:	b29b      	uxth	r3, r3
 80093be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093c6:	853b      	strh	r3, [r7, #40]	; 0x28
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	441a      	add	r2, r3
 80093d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80093d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	4413      	add	r3, r2
 80093f2:	881b      	ldrh	r3, [r3, #0]
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093fe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	441a      	add	r2, r3
 800940a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800940c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009410:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009414:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800941c:	b29b      	uxth	r3, r3
 800941e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	4413      	add	r3, r2
 800942a:	881b      	ldrh	r3, [r3, #0]
 800942c:	b29b      	uxth	r3, r3
 800942e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009432:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009436:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	441a      	add	r2, r3
 8009442:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009444:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009448:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800944c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009454:	b29b      	uxth	r3, r3
 8009456:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	4413      	add	r3, r2
 8009462:	881b      	ldrh	r3, [r3, #0]
 8009464:	b29b      	uxth	r3, r3
 8009466:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800946a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800946e:	847b      	strh	r3, [r7, #34]	; 0x22
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	441a      	add	r2, r3
 800947a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800947c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009480:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009484:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800948c:	b29b      	uxth	r3, r3
 800948e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009490:	2300      	movs	r3, #0
}
 8009492:	4618      	mov	r0, r3
 8009494:	3734      	adds	r7, #52	; 0x34
 8009496:	46bd      	mov	sp, r7
 8009498:	bc80      	pop	{r7}
 800949a:	4770      	bx	lr

0800949c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b0c4      	sub	sp, #272	; 0x110
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	1d3b      	adds	r3, r7, #4
 80094a4:	6018      	str	r0, [r3, #0]
 80094a6:	463b      	mov	r3, r7
 80094a8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80094aa:	463b      	mov	r3, r7
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	785b      	ldrb	r3, [r3, #1]
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	f040 8557 	bne.w	8009f64 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80094b6:	463b      	mov	r3, r7
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	699a      	ldr	r2, [r3, #24]
 80094bc:	463b      	mov	r3, r7
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	691b      	ldr	r3, [r3, #16]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d905      	bls.n	80094d2 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80094c6:	463b      	mov	r3, r7
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	691b      	ldr	r3, [r3, #16]
 80094cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80094d0:	e004      	b.n	80094dc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80094d2:	463b      	mov	r3, r7
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	699b      	ldr	r3, [r3, #24]
 80094d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80094dc:	463b      	mov	r3, r7
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	7b1b      	ldrb	r3, [r3, #12]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d12c      	bne.n	8009540 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80094e6:	463b      	mov	r3, r7
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	6959      	ldr	r1, [r3, #20]
 80094ec:	463b      	mov	r3, r7
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	88da      	ldrh	r2, [r3, #6]
 80094f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	1d38      	adds	r0, r7, #4
 80094fa:	6800      	ldr	r0, [r0, #0]
 80094fc:	f001 fa2c 	bl	800a958 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009500:	1d3b      	adds	r3, r7, #4
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	617b      	str	r3, [r7, #20]
 8009506:	1d3b      	adds	r3, r7, #4
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800950e:	b29b      	uxth	r3, r3
 8009510:	461a      	mov	r2, r3
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	4413      	add	r3, r2
 8009516:	617b      	str	r3, [r7, #20]
 8009518:	463b      	mov	r3, r7
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	011a      	lsls	r2, r3, #4
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	4413      	add	r3, r2
 8009524:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8009528:	f107 0310 	add.w	r3, r7, #16
 800952c:	601a      	str	r2, [r3, #0]
 800952e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009532:	b29a      	uxth	r2, r3
 8009534:	f107 0310 	add.w	r3, r7, #16
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	801a      	strh	r2, [r3, #0]
 800953c:	f000 bcdd 	b.w	8009efa <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009540:	463b      	mov	r3, r7
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	78db      	ldrb	r3, [r3, #3]
 8009546:	2b02      	cmp	r3, #2
 8009548:	f040 8347 	bne.w	8009bda <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800954c:	463b      	mov	r3, r7
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	6a1a      	ldr	r2, [r3, #32]
 8009552:	463b      	mov	r3, r7
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	691b      	ldr	r3, [r3, #16]
 8009558:	429a      	cmp	r2, r3
 800955a:	f240 82eb 	bls.w	8009b34 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800955e:	1d3b      	adds	r3, r7, #4
 8009560:	681a      	ldr	r2, [r3, #0]
 8009562:	463b      	mov	r3, r7
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	4413      	add	r3, r2
 800956c:	881b      	ldrh	r3, [r3, #0]
 800956e:	b29b      	uxth	r3, r3
 8009570:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009578:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800957c:	1d3b      	adds	r3, r7, #4
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	463b      	mov	r3, r7
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	441a      	add	r2, r3
 800958a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800958e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009592:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009596:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800959a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800959e:	b29b      	uxth	r3, r3
 80095a0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80095a2:	463b      	mov	r3, r7
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	6a1a      	ldr	r2, [r3, #32]
 80095a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80095ac:	1ad2      	subs	r2, r2, r3
 80095ae:	463b      	mov	r3, r7
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80095b4:	1d3b      	adds	r3, r7, #4
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	463b      	mov	r3, r7
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	4413      	add	r3, r2
 80095c2:	881b      	ldrh	r3, [r3, #0]
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f000 8159 	beq.w	8009882 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80095d0:	1d3b      	adds	r3, r7, #4
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	637b      	str	r3, [r7, #52]	; 0x34
 80095d6:	463b      	mov	r3, r7
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	785b      	ldrb	r3, [r3, #1]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d164      	bne.n	80096aa <USB_EPStartXfer+0x20e>
 80095e0:	1d3b      	adds	r3, r7, #4
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095e6:	1d3b      	adds	r3, r7, #4
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	461a      	mov	r2, r3
 80095f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095f4:	4413      	add	r3, r2
 80095f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095f8:	463b      	mov	r3, r7
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	011a      	lsls	r2, r3, #4
 8009600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009602:	4413      	add	r3, r2
 8009604:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009608:	62bb      	str	r3, [r7, #40]	; 0x28
 800960a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800960e:	2b00      	cmp	r3, #0
 8009610:	d112      	bne.n	8009638 <USB_EPStartXfer+0x19c>
 8009612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009614:	881b      	ldrh	r3, [r3, #0]
 8009616:	b29b      	uxth	r3, r3
 8009618:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800961c:	b29a      	uxth	r2, r3
 800961e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009620:	801a      	strh	r2, [r3, #0]
 8009622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009624:	881b      	ldrh	r3, [r3, #0]
 8009626:	b29b      	uxth	r3, r3
 8009628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800962c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009630:	b29a      	uxth	r2, r3
 8009632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009634:	801a      	strh	r2, [r3, #0]
 8009636:	e054      	b.n	80096e2 <USB_EPStartXfer+0x246>
 8009638:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800963c:	2b3e      	cmp	r3, #62	; 0x3e
 800963e:	d817      	bhi.n	8009670 <USB_EPStartXfer+0x1d4>
 8009640:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009644:	085b      	lsrs	r3, r3, #1
 8009646:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800964a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800964e:	f003 0301 	and.w	r3, r3, #1
 8009652:	2b00      	cmp	r3, #0
 8009654:	d004      	beq.n	8009660 <USB_EPStartXfer+0x1c4>
 8009656:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800965a:	3301      	adds	r3, #1
 800965c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009664:	b29b      	uxth	r3, r3
 8009666:	029b      	lsls	r3, r3, #10
 8009668:	b29a      	uxth	r2, r3
 800966a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966c:	801a      	strh	r2, [r3, #0]
 800966e:	e038      	b.n	80096e2 <USB_EPStartXfer+0x246>
 8009670:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009674:	095b      	lsrs	r3, r3, #5
 8009676:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800967a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800967e:	f003 031f 	and.w	r3, r3, #31
 8009682:	2b00      	cmp	r3, #0
 8009684:	d104      	bne.n	8009690 <USB_EPStartXfer+0x1f4>
 8009686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800968a:	3b01      	subs	r3, #1
 800968c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009694:	b29b      	uxth	r3, r3
 8009696:	029b      	lsls	r3, r3, #10
 8009698:	b29b      	uxth	r3, r3
 800969a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800969e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096a2:	b29a      	uxth	r2, r3
 80096a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a6:	801a      	strh	r2, [r3, #0]
 80096a8:	e01b      	b.n	80096e2 <USB_EPStartXfer+0x246>
 80096aa:	463b      	mov	r3, r7
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	785b      	ldrb	r3, [r3, #1]
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d116      	bne.n	80096e2 <USB_EPStartXfer+0x246>
 80096b4:	1d3b      	adds	r3, r7, #4
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096bc:	b29b      	uxth	r3, r3
 80096be:	461a      	mov	r2, r3
 80096c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096c2:	4413      	add	r3, r2
 80096c4:	637b      	str	r3, [r7, #52]	; 0x34
 80096c6:	463b      	mov	r3, r7
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	011a      	lsls	r2, r3, #4
 80096ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096d0:	4413      	add	r3, r2
 80096d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80096d6:	633b      	str	r3, [r7, #48]	; 0x30
 80096d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80096dc:	b29a      	uxth	r2, r3
 80096de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80096e2:	463b      	mov	r3, r7
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	895b      	ldrh	r3, [r3, #10]
 80096e8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80096ec:	463b      	mov	r3, r7
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	6959      	ldr	r1, [r3, #20]
 80096f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80096fc:	1d38      	adds	r0, r7, #4
 80096fe:	6800      	ldr	r0, [r0, #0]
 8009700:	f001 f92a 	bl	800a958 <USB_WritePMA>
            ep->xfer_buff += len;
 8009704:	463b      	mov	r3, r7
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	695a      	ldr	r2, [r3, #20]
 800970a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800970e:	441a      	add	r2, r3
 8009710:	463b      	mov	r3, r7
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009716:	463b      	mov	r3, r7
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	6a1a      	ldr	r2, [r3, #32]
 800971c:	463b      	mov	r3, r7
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	691b      	ldr	r3, [r3, #16]
 8009722:	429a      	cmp	r2, r3
 8009724:	d909      	bls.n	800973a <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8009726:	463b      	mov	r3, r7
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	6a1a      	ldr	r2, [r3, #32]
 800972c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009730:	1ad2      	subs	r2, r2, r3
 8009732:	463b      	mov	r3, r7
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	621a      	str	r2, [r3, #32]
 8009738:	e008      	b.n	800974c <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800973a:	463b      	mov	r3, r7
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	6a1b      	ldr	r3, [r3, #32]
 8009740:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8009744:	463b      	mov	r3, r7
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2200      	movs	r2, #0
 800974a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800974c:	463b      	mov	r3, r7
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	785b      	ldrb	r3, [r3, #1]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d164      	bne.n	8009820 <USB_EPStartXfer+0x384>
 8009756:	1d3b      	adds	r3, r7, #4
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	61fb      	str	r3, [r7, #28]
 800975c:	1d3b      	adds	r3, r7, #4
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009764:	b29b      	uxth	r3, r3
 8009766:	461a      	mov	r2, r3
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	4413      	add	r3, r2
 800976c:	61fb      	str	r3, [r7, #28]
 800976e:	463b      	mov	r3, r7
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	011a      	lsls	r2, r3, #4
 8009776:	69fb      	ldr	r3, [r7, #28]
 8009778:	4413      	add	r3, r2
 800977a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800977e:	61bb      	str	r3, [r7, #24]
 8009780:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009784:	2b00      	cmp	r3, #0
 8009786:	d112      	bne.n	80097ae <USB_EPStartXfer+0x312>
 8009788:	69bb      	ldr	r3, [r7, #24]
 800978a:	881b      	ldrh	r3, [r3, #0]
 800978c:	b29b      	uxth	r3, r3
 800978e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009792:	b29a      	uxth	r2, r3
 8009794:	69bb      	ldr	r3, [r7, #24]
 8009796:	801a      	strh	r2, [r3, #0]
 8009798:	69bb      	ldr	r3, [r7, #24]
 800979a:	881b      	ldrh	r3, [r3, #0]
 800979c:	b29b      	uxth	r3, r3
 800979e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097a6:	b29a      	uxth	r2, r3
 80097a8:	69bb      	ldr	r3, [r7, #24]
 80097aa:	801a      	strh	r2, [r3, #0]
 80097ac:	e057      	b.n	800985e <USB_EPStartXfer+0x3c2>
 80097ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80097b2:	2b3e      	cmp	r3, #62	; 0x3e
 80097b4:	d817      	bhi.n	80097e6 <USB_EPStartXfer+0x34a>
 80097b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80097ba:	085b      	lsrs	r3, r3, #1
 80097bc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80097c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80097c4:	f003 0301 	and.w	r3, r3, #1
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d004      	beq.n	80097d6 <USB_EPStartXfer+0x33a>
 80097cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80097d0:	3301      	adds	r3, #1
 80097d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80097d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80097da:	b29b      	uxth	r3, r3
 80097dc:	029b      	lsls	r3, r3, #10
 80097de:	b29a      	uxth	r2, r3
 80097e0:	69bb      	ldr	r3, [r7, #24]
 80097e2:	801a      	strh	r2, [r3, #0]
 80097e4:	e03b      	b.n	800985e <USB_EPStartXfer+0x3c2>
 80097e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80097ea:	095b      	lsrs	r3, r3, #5
 80097ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80097f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80097f4:	f003 031f 	and.w	r3, r3, #31
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d104      	bne.n	8009806 <USB_EPStartXfer+0x36a>
 80097fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009800:	3b01      	subs	r3, #1
 8009802:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009806:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800980a:	b29b      	uxth	r3, r3
 800980c:	029b      	lsls	r3, r3, #10
 800980e:	b29b      	uxth	r3, r3
 8009810:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009814:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009818:	b29a      	uxth	r2, r3
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	801a      	strh	r2, [r3, #0]
 800981e:	e01e      	b.n	800985e <USB_EPStartXfer+0x3c2>
 8009820:	463b      	mov	r3, r7
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	785b      	ldrb	r3, [r3, #1]
 8009826:	2b01      	cmp	r3, #1
 8009828:	d119      	bne.n	800985e <USB_EPStartXfer+0x3c2>
 800982a:	1d3b      	adds	r3, r7, #4
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	627b      	str	r3, [r7, #36]	; 0x24
 8009830:	1d3b      	adds	r3, r7, #4
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009838:	b29b      	uxth	r3, r3
 800983a:	461a      	mov	r2, r3
 800983c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983e:	4413      	add	r3, r2
 8009840:	627b      	str	r3, [r7, #36]	; 0x24
 8009842:	463b      	mov	r3, r7
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	011a      	lsls	r2, r3, #4
 800984a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984c:	4413      	add	r3, r2
 800984e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009852:	623b      	str	r3, [r7, #32]
 8009854:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009858:	b29a      	uxth	r2, r3
 800985a:	6a3b      	ldr	r3, [r7, #32]
 800985c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800985e:	463b      	mov	r3, r7
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	891b      	ldrh	r3, [r3, #8]
 8009864:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009868:	463b      	mov	r3, r7
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	6959      	ldr	r1, [r3, #20]
 800986e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009872:	b29b      	uxth	r3, r3
 8009874:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8009878:	1d38      	adds	r0, r7, #4
 800987a:	6800      	ldr	r0, [r0, #0]
 800987c:	f001 f86c 	bl	800a958 <USB_WritePMA>
 8009880:	e33b      	b.n	8009efa <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009882:	463b      	mov	r3, r7
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	785b      	ldrb	r3, [r3, #1]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d164      	bne.n	8009956 <USB_EPStartXfer+0x4ba>
 800988c:	1d3b      	adds	r3, r7, #4
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009892:	1d3b      	adds	r3, r7, #4
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800989a:	b29b      	uxth	r3, r3
 800989c:	461a      	mov	r2, r3
 800989e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098a0:	4413      	add	r3, r2
 80098a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098a4:	463b      	mov	r3, r7
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	011a      	lsls	r2, r3, #4
 80098ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098ae:	4413      	add	r3, r2
 80098b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80098b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80098b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d112      	bne.n	80098e4 <USB_EPStartXfer+0x448>
 80098be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098c0:	881b      	ldrh	r3, [r3, #0]
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80098c8:	b29a      	uxth	r2, r3
 80098ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098cc:	801a      	strh	r2, [r3, #0]
 80098ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098d0:	881b      	ldrh	r3, [r3, #0]
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098dc:	b29a      	uxth	r2, r3
 80098de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098e0:	801a      	strh	r2, [r3, #0]
 80098e2:	e057      	b.n	8009994 <USB_EPStartXfer+0x4f8>
 80098e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098e8:	2b3e      	cmp	r3, #62	; 0x3e
 80098ea:	d817      	bhi.n	800991c <USB_EPStartXfer+0x480>
 80098ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098f0:	085b      	lsrs	r3, r3, #1
 80098f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80098f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098fa:	f003 0301 	and.w	r3, r3, #1
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d004      	beq.n	800990c <USB_EPStartXfer+0x470>
 8009902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009906:	3301      	adds	r3, #1
 8009908:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800990c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009910:	b29b      	uxth	r3, r3
 8009912:	029b      	lsls	r3, r3, #10
 8009914:	b29a      	uxth	r2, r3
 8009916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009918:	801a      	strh	r2, [r3, #0]
 800991a:	e03b      	b.n	8009994 <USB_EPStartXfer+0x4f8>
 800991c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009920:	095b      	lsrs	r3, r3, #5
 8009922:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009926:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800992a:	f003 031f 	and.w	r3, r3, #31
 800992e:	2b00      	cmp	r3, #0
 8009930:	d104      	bne.n	800993c <USB_EPStartXfer+0x4a0>
 8009932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009936:	3b01      	subs	r3, #1
 8009938:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800993c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009940:	b29b      	uxth	r3, r3
 8009942:	029b      	lsls	r3, r3, #10
 8009944:	b29b      	uxth	r3, r3
 8009946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800994a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800994e:	b29a      	uxth	r2, r3
 8009950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009952:	801a      	strh	r2, [r3, #0]
 8009954:	e01e      	b.n	8009994 <USB_EPStartXfer+0x4f8>
 8009956:	463b      	mov	r3, r7
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	785b      	ldrb	r3, [r3, #1]
 800995c:	2b01      	cmp	r3, #1
 800995e:	d119      	bne.n	8009994 <USB_EPStartXfer+0x4f8>
 8009960:	1d3b      	adds	r3, r7, #4
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	657b      	str	r3, [r7, #84]	; 0x54
 8009966:	1d3b      	adds	r3, r7, #4
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800996e:	b29b      	uxth	r3, r3
 8009970:	461a      	mov	r2, r3
 8009972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009974:	4413      	add	r3, r2
 8009976:	657b      	str	r3, [r7, #84]	; 0x54
 8009978:	463b      	mov	r3, r7
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	011a      	lsls	r2, r3, #4
 8009980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009982:	4413      	add	r3, r2
 8009984:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009988:	653b      	str	r3, [r7, #80]	; 0x50
 800998a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800998e:	b29a      	uxth	r2, r3
 8009990:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009992:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009994:	463b      	mov	r3, r7
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	891b      	ldrh	r3, [r3, #8]
 800999a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800999e:	463b      	mov	r3, r7
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	6959      	ldr	r1, [r3, #20]
 80099a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80099ae:	1d38      	adds	r0, r7, #4
 80099b0:	6800      	ldr	r0, [r0, #0]
 80099b2:	f000 ffd1 	bl	800a958 <USB_WritePMA>
            ep->xfer_buff += len;
 80099b6:	463b      	mov	r3, r7
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	695a      	ldr	r2, [r3, #20]
 80099bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099c0:	441a      	add	r2, r3
 80099c2:	463b      	mov	r3, r7
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80099c8:	463b      	mov	r3, r7
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	6a1a      	ldr	r2, [r3, #32]
 80099ce:	463b      	mov	r3, r7
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	691b      	ldr	r3, [r3, #16]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d909      	bls.n	80099ec <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80099d8:	463b      	mov	r3, r7
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	6a1a      	ldr	r2, [r3, #32]
 80099de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099e2:	1ad2      	subs	r2, r2, r3
 80099e4:	463b      	mov	r3, r7
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	621a      	str	r2, [r3, #32]
 80099ea:	e008      	b.n	80099fe <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 80099ec:	463b      	mov	r3, r7
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	6a1b      	ldr	r3, [r3, #32]
 80099f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80099f6:	463b      	mov	r3, r7
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	2200      	movs	r2, #0
 80099fc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80099fe:	1d3b      	adds	r3, r7, #4
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	647b      	str	r3, [r7, #68]	; 0x44
 8009a04:	463b      	mov	r3, r7
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	785b      	ldrb	r3, [r3, #1]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d164      	bne.n	8009ad8 <USB_EPStartXfer+0x63c>
 8009a0e:	1d3b      	adds	r3, r7, #4
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a14:	1d3b      	adds	r3, r7, #4
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	461a      	mov	r2, r3
 8009a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a22:	4413      	add	r3, r2
 8009a24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a26:	463b      	mov	r3, r7
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	011a      	lsls	r2, r3, #4
 8009a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a30:	4413      	add	r3, r2
 8009a32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009a36:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d112      	bne.n	8009a66 <USB_EPStartXfer+0x5ca>
 8009a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a42:	881b      	ldrh	r3, [r3, #0]
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009a4a:	b29a      	uxth	r2, r3
 8009a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a4e:	801a      	strh	r2, [r3, #0]
 8009a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a52:	881b      	ldrh	r3, [r3, #0]
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a5e:	b29a      	uxth	r2, r3
 8009a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a62:	801a      	strh	r2, [r3, #0]
 8009a64:	e054      	b.n	8009b10 <USB_EPStartXfer+0x674>
 8009a66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a6a:	2b3e      	cmp	r3, #62	; 0x3e
 8009a6c:	d817      	bhi.n	8009a9e <USB_EPStartXfer+0x602>
 8009a6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a72:	085b      	lsrs	r3, r3, #1
 8009a74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009a78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a7c:	f003 0301 	and.w	r3, r3, #1
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d004      	beq.n	8009a8e <USB_EPStartXfer+0x5f2>
 8009a84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009a88:	3301      	adds	r3, #1
 8009a8a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009a8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	029b      	lsls	r3, r3, #10
 8009a96:	b29a      	uxth	r2, r3
 8009a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a9a:	801a      	strh	r2, [r3, #0]
 8009a9c:	e038      	b.n	8009b10 <USB_EPStartXfer+0x674>
 8009a9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009aa2:	095b      	lsrs	r3, r3, #5
 8009aa4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009aa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009aac:	f003 031f 	and.w	r3, r3, #31
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d104      	bne.n	8009abe <USB_EPStartXfer+0x622>
 8009ab4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009ab8:	3b01      	subs	r3, #1
 8009aba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009abe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	029b      	lsls	r3, r3, #10
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009acc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ad0:	b29a      	uxth	r2, r3
 8009ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad4:	801a      	strh	r2, [r3, #0]
 8009ad6:	e01b      	b.n	8009b10 <USB_EPStartXfer+0x674>
 8009ad8:	463b      	mov	r3, r7
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	785b      	ldrb	r3, [r3, #1]
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d116      	bne.n	8009b10 <USB_EPStartXfer+0x674>
 8009ae2:	1d3b      	adds	r3, r7, #4
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	461a      	mov	r2, r3
 8009aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009af0:	4413      	add	r3, r2
 8009af2:	647b      	str	r3, [r7, #68]	; 0x44
 8009af4:	463b      	mov	r3, r7
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	011a      	lsls	r2, r3, #4
 8009afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009afe:	4413      	add	r3, r2
 8009b00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009b04:	643b      	str	r3, [r7, #64]	; 0x40
 8009b06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b0e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009b10:	463b      	mov	r3, r7
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	895b      	ldrh	r3, [r3, #10]
 8009b16:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b1a:	463b      	mov	r3, r7
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	6959      	ldr	r1, [r3, #20]
 8009b20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8009b2a:	1d38      	adds	r0, r7, #4
 8009b2c:	6800      	ldr	r0, [r0, #0]
 8009b2e:	f000 ff13 	bl	800a958 <USB_WritePMA>
 8009b32:	e1e2      	b.n	8009efa <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009b34:	463b      	mov	r3, r7
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	6a1b      	ldr	r3, [r3, #32]
 8009b3a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8009b3e:	1d3b      	adds	r3, r7, #4
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	463b      	mov	r3, r7
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	4413      	add	r3, r2
 8009b4c:	881b      	ldrh	r3, [r3, #0]
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b58:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8009b5c:	1d3b      	adds	r3, r7, #4
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	463b      	mov	r3, r7
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	441a      	add	r2, r3
 8009b6a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009b6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009b82:	1d3b      	adds	r3, r7, #4
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	663b      	str	r3, [r7, #96]	; 0x60
 8009b88:	1d3b      	adds	r3, r7, #4
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	461a      	mov	r2, r3
 8009b94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b96:	4413      	add	r3, r2
 8009b98:	663b      	str	r3, [r7, #96]	; 0x60
 8009b9a:	463b      	mov	r3, r7
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	011a      	lsls	r2, r3, #4
 8009ba2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ba4:	4413      	add	r3, r2
 8009ba6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009baa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009bb0:	b29a      	uxth	r2, r3
 8009bb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009bb4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009bb6:	463b      	mov	r3, r7
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	891b      	ldrh	r3, [r3, #8]
 8009bbc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009bc0:	463b      	mov	r3, r7
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	6959      	ldr	r1, [r3, #20]
 8009bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8009bd0:	1d38      	adds	r0, r7, #4
 8009bd2:	6800      	ldr	r0, [r0, #0]
 8009bd4:	f000 fec0 	bl	800a958 <USB_WritePMA>
 8009bd8:	e18f      	b.n	8009efa <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009bda:	1d3b      	adds	r3, r7, #4
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	463b      	mov	r3, r7
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	4413      	add	r3, r2
 8009be8:	881b      	ldrh	r3, [r3, #0]
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	f000 808f 	beq.w	8009d14 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009bf6:	1d3b      	adds	r3, r7, #4
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	67bb      	str	r3, [r7, #120]	; 0x78
 8009bfc:	463b      	mov	r3, r7
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	785b      	ldrb	r3, [r3, #1]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d164      	bne.n	8009cd0 <USB_EPStartXfer+0x834>
 8009c06:	1d3b      	adds	r3, r7, #4
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	673b      	str	r3, [r7, #112]	; 0x70
 8009c0c:	1d3b      	adds	r3, r7, #4
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	461a      	mov	r2, r3
 8009c18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c1a:	4413      	add	r3, r2
 8009c1c:	673b      	str	r3, [r7, #112]	; 0x70
 8009c1e:	463b      	mov	r3, r7
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	011a      	lsls	r2, r3, #4
 8009c26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c28:	4413      	add	r3, r2
 8009c2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009c2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d112      	bne.n	8009c5e <USB_EPStartXfer+0x7c2>
 8009c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c3a:	881b      	ldrh	r3, [r3, #0]
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009c42:	b29a      	uxth	r2, r3
 8009c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c46:	801a      	strh	r2, [r3, #0]
 8009c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c4a:	881b      	ldrh	r3, [r3, #0]
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c56:	b29a      	uxth	r2, r3
 8009c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c5a:	801a      	strh	r2, [r3, #0]
 8009c5c:	e054      	b.n	8009d08 <USB_EPStartXfer+0x86c>
 8009c5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c62:	2b3e      	cmp	r3, #62	; 0x3e
 8009c64:	d817      	bhi.n	8009c96 <USB_EPStartXfer+0x7fa>
 8009c66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c6a:	085b      	lsrs	r3, r3, #1
 8009c6c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009c70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c74:	f003 0301 	and.w	r3, r3, #1
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d004      	beq.n	8009c86 <USB_EPStartXfer+0x7ea>
 8009c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c80:	3301      	adds	r3, #1
 8009c82:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	029b      	lsls	r3, r3, #10
 8009c8e:	b29a      	uxth	r2, r3
 8009c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c92:	801a      	strh	r2, [r3, #0]
 8009c94:	e038      	b.n	8009d08 <USB_EPStartXfer+0x86c>
 8009c96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c9a:	095b      	lsrs	r3, r3, #5
 8009c9c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009ca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ca4:	f003 031f 	and.w	r3, r3, #31
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d104      	bne.n	8009cb6 <USB_EPStartXfer+0x81a>
 8009cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cb0:	3b01      	subs	r3, #1
 8009cb2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	029b      	lsls	r3, r3, #10
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cc8:	b29a      	uxth	r2, r3
 8009cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ccc:	801a      	strh	r2, [r3, #0]
 8009cce:	e01b      	b.n	8009d08 <USB_EPStartXfer+0x86c>
 8009cd0:	463b      	mov	r3, r7
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	785b      	ldrb	r3, [r3, #1]
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d116      	bne.n	8009d08 <USB_EPStartXfer+0x86c>
 8009cda:	1d3b      	adds	r3, r7, #4
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ce2:	b29b      	uxth	r3, r3
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ce8:	4413      	add	r3, r2
 8009cea:	67bb      	str	r3, [r7, #120]	; 0x78
 8009cec:	463b      	mov	r3, r7
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	011a      	lsls	r2, r3, #4
 8009cf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cf6:	4413      	add	r3, r2
 8009cf8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009cfc:	677b      	str	r3, [r7, #116]	; 0x74
 8009cfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d02:	b29a      	uxth	r2, r3
 8009d04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d06:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009d08:	463b      	mov	r3, r7
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	895b      	ldrh	r3, [r3, #10]
 8009d0e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8009d12:	e097      	b.n	8009e44 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009d14:	463b      	mov	r3, r7
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	785b      	ldrb	r3, [r3, #1]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d168      	bne.n	8009df0 <USB_EPStartXfer+0x954>
 8009d1e:	1d3b      	adds	r3, r7, #4
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009d26:	1d3b      	adds	r3, r7, #4
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	461a      	mov	r2, r3
 8009d32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009d36:	4413      	add	r3, r2
 8009d38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009d3c:	463b      	mov	r3, r7
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	011a      	lsls	r2, r3, #4
 8009d44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009d48:	4413      	add	r3, r2
 8009d4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009d4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d112      	bne.n	8009d7e <USB_EPStartXfer+0x8e2>
 8009d58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009d5a:	881b      	ldrh	r3, [r3, #0]
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009d62:	b29a      	uxth	r2, r3
 8009d64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009d66:	801a      	strh	r2, [r3, #0]
 8009d68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009d6a:	881b      	ldrh	r3, [r3, #0]
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d76:	b29a      	uxth	r2, r3
 8009d78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009d7a:	801a      	strh	r2, [r3, #0]
 8009d7c:	e05d      	b.n	8009e3a <USB_EPStartXfer+0x99e>
 8009d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d82:	2b3e      	cmp	r3, #62	; 0x3e
 8009d84:	d817      	bhi.n	8009db6 <USB_EPStartXfer+0x91a>
 8009d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d8a:	085b      	lsrs	r3, r3, #1
 8009d8c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009d90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d94:	f003 0301 	and.w	r3, r3, #1
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d004      	beq.n	8009da6 <USB_EPStartXfer+0x90a>
 8009d9c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009da0:	3301      	adds	r3, #1
 8009da2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009da6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	029b      	lsls	r3, r3, #10
 8009dae:	b29a      	uxth	r2, r3
 8009db0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009db2:	801a      	strh	r2, [r3, #0]
 8009db4:	e041      	b.n	8009e3a <USB_EPStartXfer+0x99e>
 8009db6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009dba:	095b      	lsrs	r3, r3, #5
 8009dbc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009dc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009dc4:	f003 031f 	and.w	r3, r3, #31
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d104      	bne.n	8009dd6 <USB_EPStartXfer+0x93a>
 8009dcc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009dd0:	3b01      	subs	r3, #1
 8009dd2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009dd6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	029b      	lsls	r3, r3, #10
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009de4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009de8:	b29a      	uxth	r2, r3
 8009dea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009dec:	801a      	strh	r2, [r3, #0]
 8009dee:	e024      	b.n	8009e3a <USB_EPStartXfer+0x99e>
 8009df0:	463b      	mov	r3, r7
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	785b      	ldrb	r3, [r3, #1]
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d11f      	bne.n	8009e3a <USB_EPStartXfer+0x99e>
 8009dfa:	1d3b      	adds	r3, r7, #4
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009e02:	1d3b      	adds	r3, r7, #4
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e12:	4413      	add	r3, r2
 8009e14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009e18:	463b      	mov	r3, r7
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	011a      	lsls	r2, r3, #4
 8009e20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e24:	4413      	add	r3, r2
 8009e26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009e2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009e2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009e32:	b29a      	uxth	r2, r3
 8009e34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009e38:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009e3a:	463b      	mov	r3, r7
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	891b      	ldrh	r3, [r3, #8]
 8009e40:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009e44:	463b      	mov	r3, r7
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	6959      	ldr	r1, [r3, #20]
 8009e4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8009e54:	1d38      	adds	r0, r7, #4
 8009e56:	6800      	ldr	r0, [r0, #0]
 8009e58:	f000 fd7e 	bl	800a958 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8009e5c:	463b      	mov	r3, r7
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	785b      	ldrb	r3, [r3, #1]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d122      	bne.n	8009eac <USB_EPStartXfer+0xa10>
 8009e66:	1d3b      	adds	r3, r7, #4
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	463b      	mov	r3, r7
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	4413      	add	r3, r2
 8009e74:	881b      	ldrh	r3, [r3, #0]
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e80:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8009e84:	1d3b      	adds	r3, r7, #4
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	463b      	mov	r3, r7
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	441a      	add	r2, r3
 8009e92:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8009e96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ea2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	8013      	strh	r3, [r2, #0]
 8009eaa:	e026      	b.n	8009efa <USB_EPStartXfer+0xa5e>
 8009eac:	463b      	mov	r3, r7
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	785b      	ldrb	r3, [r3, #1]
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d121      	bne.n	8009efa <USB_EPStartXfer+0xa5e>
 8009eb6:	1d3b      	adds	r3, r7, #4
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	463b      	mov	r3, r7
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	4413      	add	r3, r2
 8009ec4:	881b      	ldrh	r3, [r3, #0]
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ed0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8009ed4:	1d3b      	adds	r3, r7, #4
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	463b      	mov	r3, r7
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	009b      	lsls	r3, r3, #2
 8009ee0:	441a      	add	r2, r3
 8009ee2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8009ee6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009eea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009eee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009efa:	1d3b      	adds	r3, r7, #4
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	463b      	mov	r3, r7
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	4413      	add	r3, r2
 8009f08:	881b      	ldrh	r3, [r3, #0]
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	f107 020e 	add.w	r2, r7, #14
 8009f10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f18:	8013      	strh	r3, [r2, #0]
 8009f1a:	f107 030e 	add.w	r3, r7, #14
 8009f1e:	f107 020e 	add.w	r2, r7, #14
 8009f22:	8812      	ldrh	r2, [r2, #0]
 8009f24:	f082 0210 	eor.w	r2, r2, #16
 8009f28:	801a      	strh	r2, [r3, #0]
 8009f2a:	f107 030e 	add.w	r3, r7, #14
 8009f2e:	f107 020e 	add.w	r2, r7, #14
 8009f32:	8812      	ldrh	r2, [r2, #0]
 8009f34:	f082 0220 	eor.w	r2, r2, #32
 8009f38:	801a      	strh	r2, [r3, #0]
 8009f3a:	1d3b      	adds	r3, r7, #4
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	463b      	mov	r3, r7
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	441a      	add	r2, r3
 8009f48:	f107 030e 	add.w	r3, r7, #14
 8009f4c:	881b      	ldrh	r3, [r3, #0]
 8009f4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	8013      	strh	r3, [r2, #0]
 8009f62:	e3b5      	b.n	800a6d0 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009f64:	463b      	mov	r3, r7
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	7b1b      	ldrb	r3, [r3, #12]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	f040 8090 	bne.w	800a090 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009f70:	463b      	mov	r3, r7
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	699a      	ldr	r2, [r3, #24]
 8009f76:	463b      	mov	r3, r7
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	691b      	ldr	r3, [r3, #16]
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d90e      	bls.n	8009f9e <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8009f80:	463b      	mov	r3, r7
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	691b      	ldr	r3, [r3, #16]
 8009f86:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8009f8a:	463b      	mov	r3, r7
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	699a      	ldr	r2, [r3, #24]
 8009f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f94:	1ad2      	subs	r2, r2, r3
 8009f96:	463b      	mov	r3, r7
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	619a      	str	r2, [r3, #24]
 8009f9c:	e008      	b.n	8009fb0 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8009f9e:	463b      	mov	r3, r7
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	699b      	ldr	r3, [r3, #24]
 8009fa4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8009fa8:	463b      	mov	r3, r7
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	2200      	movs	r2, #0
 8009fae:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009fb0:	1d3b      	adds	r3, r7, #4
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009fb8:	1d3b      	adds	r3, r7, #4
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009fc8:	4413      	add	r3, r2
 8009fca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009fce:	463b      	mov	r3, r7
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	011a      	lsls	r2, r3, #4
 8009fd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009fda:	4413      	add	r3, r2
 8009fdc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009fe0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009fe4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d116      	bne.n	800a01a <USB_EPStartXfer+0xb7e>
 8009fec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009ff0:	881b      	ldrh	r3, [r3, #0]
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009ff8:	b29a      	uxth	r2, r3
 8009ffa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009ffe:	801a      	strh	r2, [r3, #0]
 800a000:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a004:	881b      	ldrh	r3, [r3, #0]
 800a006:	b29b      	uxth	r3, r3
 800a008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a00c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a010:	b29a      	uxth	r2, r3
 800a012:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a016:	801a      	strh	r2, [r3, #0]
 800a018:	e32c      	b.n	800a674 <USB_EPStartXfer+0x11d8>
 800a01a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a01e:	2b3e      	cmp	r3, #62	; 0x3e
 800a020:	d818      	bhi.n	800a054 <USB_EPStartXfer+0xbb8>
 800a022:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a026:	085b      	lsrs	r3, r3, #1
 800a028:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a02c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a030:	f003 0301 	and.w	r3, r3, #1
 800a034:	2b00      	cmp	r3, #0
 800a036:	d004      	beq.n	800a042 <USB_EPStartXfer+0xba6>
 800a038:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a03c:	3301      	adds	r3, #1
 800a03e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a042:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a046:	b29b      	uxth	r3, r3
 800a048:	029b      	lsls	r3, r3, #10
 800a04a:	b29a      	uxth	r2, r3
 800a04c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a050:	801a      	strh	r2, [r3, #0]
 800a052:	e30f      	b.n	800a674 <USB_EPStartXfer+0x11d8>
 800a054:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a058:	095b      	lsrs	r3, r3, #5
 800a05a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a05e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a062:	f003 031f 	and.w	r3, r3, #31
 800a066:	2b00      	cmp	r3, #0
 800a068:	d104      	bne.n	800a074 <USB_EPStartXfer+0xbd8>
 800a06a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a06e:	3b01      	subs	r3, #1
 800a070:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a074:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a078:	b29b      	uxth	r3, r3
 800a07a:	029b      	lsls	r3, r3, #10
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a082:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a086:	b29a      	uxth	r2, r3
 800a088:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a08c:	801a      	strh	r2, [r3, #0]
 800a08e:	e2f1      	b.n	800a674 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a090:	463b      	mov	r3, r7
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	78db      	ldrb	r3, [r3, #3]
 800a096:	2b02      	cmp	r3, #2
 800a098:	f040 818f 	bne.w	800a3ba <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a09c:	463b      	mov	r3, r7
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	785b      	ldrb	r3, [r3, #1]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d175      	bne.n	800a192 <USB_EPStartXfer+0xcf6>
 800a0a6:	1d3b      	adds	r3, r7, #4
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a0ae:	1d3b      	adds	r3, r7, #4
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a0be:	4413      	add	r3, r2
 800a0c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a0c4:	463b      	mov	r3, r7
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	011a      	lsls	r2, r3, #4
 800a0cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a0d0:	4413      	add	r3, r2
 800a0d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a0d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a0da:	463b      	mov	r3, r7
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	691b      	ldr	r3, [r3, #16]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d116      	bne.n	800a112 <USB_EPStartXfer+0xc76>
 800a0e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a0e8:	881b      	ldrh	r3, [r3, #0]
 800a0ea:	b29b      	uxth	r3, r3
 800a0ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a0f0:	b29a      	uxth	r2, r3
 800a0f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a0f6:	801a      	strh	r2, [r3, #0]
 800a0f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a0fc:	881b      	ldrh	r3, [r3, #0]
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a104:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a108:	b29a      	uxth	r2, r3
 800a10a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a10e:	801a      	strh	r2, [r3, #0]
 800a110:	e065      	b.n	800a1de <USB_EPStartXfer+0xd42>
 800a112:	463b      	mov	r3, r7
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	691b      	ldr	r3, [r3, #16]
 800a118:	2b3e      	cmp	r3, #62	; 0x3e
 800a11a:	d81a      	bhi.n	800a152 <USB_EPStartXfer+0xcb6>
 800a11c:	463b      	mov	r3, r7
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	691b      	ldr	r3, [r3, #16]
 800a122:	085b      	lsrs	r3, r3, #1
 800a124:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a128:	463b      	mov	r3, r7
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	691b      	ldr	r3, [r3, #16]
 800a12e:	f003 0301 	and.w	r3, r3, #1
 800a132:	2b00      	cmp	r3, #0
 800a134:	d004      	beq.n	800a140 <USB_EPStartXfer+0xca4>
 800a136:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a13a:	3301      	adds	r3, #1
 800a13c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a140:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a144:	b29b      	uxth	r3, r3
 800a146:	029b      	lsls	r3, r3, #10
 800a148:	b29a      	uxth	r2, r3
 800a14a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a14e:	801a      	strh	r2, [r3, #0]
 800a150:	e045      	b.n	800a1de <USB_EPStartXfer+0xd42>
 800a152:	463b      	mov	r3, r7
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	691b      	ldr	r3, [r3, #16]
 800a158:	095b      	lsrs	r3, r3, #5
 800a15a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a15e:	463b      	mov	r3, r7
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	691b      	ldr	r3, [r3, #16]
 800a164:	f003 031f 	and.w	r3, r3, #31
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d104      	bne.n	800a176 <USB_EPStartXfer+0xcda>
 800a16c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a170:	3b01      	subs	r3, #1
 800a172:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a176:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	029b      	lsls	r3, r3, #10
 800a17e:	b29b      	uxth	r3, r3
 800a180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a188:	b29a      	uxth	r2, r3
 800a18a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a18e:	801a      	strh	r2, [r3, #0]
 800a190:	e025      	b.n	800a1de <USB_EPStartXfer+0xd42>
 800a192:	463b      	mov	r3, r7
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	785b      	ldrb	r3, [r3, #1]
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d120      	bne.n	800a1de <USB_EPStartXfer+0xd42>
 800a19c:	1d3b      	adds	r3, r7, #4
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a1a4:	1d3b      	adds	r3, r7, #4
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a1b4:	4413      	add	r3, r2
 800a1b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a1ba:	463b      	mov	r3, r7
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	011a      	lsls	r2, r3, #4
 800a1c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a1c6:	4413      	add	r3, r2
 800a1c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a1cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a1d0:	463b      	mov	r3, r7
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	691b      	ldr	r3, [r3, #16]
 800a1d6:	b29a      	uxth	r2, r3
 800a1d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a1dc:	801a      	strh	r2, [r3, #0]
 800a1de:	1d3b      	adds	r3, r7, #4
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a1e6:	463b      	mov	r3, r7
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	785b      	ldrb	r3, [r3, #1]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d175      	bne.n	800a2dc <USB_EPStartXfer+0xe40>
 800a1f0:	1d3b      	adds	r3, r7, #4
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a1f8:	1d3b      	adds	r3, r7, #4
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a200:	b29b      	uxth	r3, r3
 800a202:	461a      	mov	r2, r3
 800a204:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a208:	4413      	add	r3, r2
 800a20a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a20e:	463b      	mov	r3, r7
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	011a      	lsls	r2, r3, #4
 800a216:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a21a:	4413      	add	r3, r2
 800a21c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a220:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a224:	463b      	mov	r3, r7
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	691b      	ldr	r3, [r3, #16]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d116      	bne.n	800a25c <USB_EPStartXfer+0xdc0>
 800a22e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a232:	881b      	ldrh	r3, [r3, #0]
 800a234:	b29b      	uxth	r3, r3
 800a236:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a23a:	b29a      	uxth	r2, r3
 800a23c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a240:	801a      	strh	r2, [r3, #0]
 800a242:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a246:	881b      	ldrh	r3, [r3, #0]
 800a248:	b29b      	uxth	r3, r3
 800a24a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a24e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a252:	b29a      	uxth	r2, r3
 800a254:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a258:	801a      	strh	r2, [r3, #0]
 800a25a:	e061      	b.n	800a320 <USB_EPStartXfer+0xe84>
 800a25c:	463b      	mov	r3, r7
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	691b      	ldr	r3, [r3, #16]
 800a262:	2b3e      	cmp	r3, #62	; 0x3e
 800a264:	d81a      	bhi.n	800a29c <USB_EPStartXfer+0xe00>
 800a266:	463b      	mov	r3, r7
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	691b      	ldr	r3, [r3, #16]
 800a26c:	085b      	lsrs	r3, r3, #1
 800a26e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a272:	463b      	mov	r3, r7
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	691b      	ldr	r3, [r3, #16]
 800a278:	f003 0301 	and.w	r3, r3, #1
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d004      	beq.n	800a28a <USB_EPStartXfer+0xdee>
 800a280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a284:	3301      	adds	r3, #1
 800a286:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a28a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a28e:	b29b      	uxth	r3, r3
 800a290:	029b      	lsls	r3, r3, #10
 800a292:	b29a      	uxth	r2, r3
 800a294:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a298:	801a      	strh	r2, [r3, #0]
 800a29a:	e041      	b.n	800a320 <USB_EPStartXfer+0xe84>
 800a29c:	463b      	mov	r3, r7
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	691b      	ldr	r3, [r3, #16]
 800a2a2:	095b      	lsrs	r3, r3, #5
 800a2a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a2a8:	463b      	mov	r3, r7
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	691b      	ldr	r3, [r3, #16]
 800a2ae:	f003 031f 	and.w	r3, r3, #31
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d104      	bne.n	800a2c0 <USB_EPStartXfer+0xe24>
 800a2b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2ba:	3b01      	subs	r3, #1
 800a2bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a2c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	029b      	lsls	r3, r3, #10
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2d2:	b29a      	uxth	r2, r3
 800a2d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a2d8:	801a      	strh	r2, [r3, #0]
 800a2da:	e021      	b.n	800a320 <USB_EPStartXfer+0xe84>
 800a2dc:	463b      	mov	r3, r7
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	785b      	ldrb	r3, [r3, #1]
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d11c      	bne.n	800a320 <USB_EPStartXfer+0xe84>
 800a2e6:	1d3b      	adds	r3, r7, #4
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a2f6:	4413      	add	r3, r2
 800a2f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a2fc:	463b      	mov	r3, r7
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	011a      	lsls	r2, r3, #4
 800a304:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a308:	4413      	add	r3, r2
 800a30a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a30e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a312:	463b      	mov	r3, r7
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	691b      	ldr	r3, [r3, #16]
 800a318:	b29a      	uxth	r2, r3
 800a31a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a31e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a320:	463b      	mov	r3, r7
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	69db      	ldr	r3, [r3, #28]
 800a326:	2b00      	cmp	r3, #0
 800a328:	f000 81a4 	beq.w	800a674 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a32c:	1d3b      	adds	r3, r7, #4
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	463b      	mov	r3, r7
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	009b      	lsls	r3, r3, #2
 800a338:	4413      	add	r3, r2
 800a33a:	881b      	ldrh	r3, [r3, #0]
 800a33c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a340:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d005      	beq.n	800a358 <USB_EPStartXfer+0xebc>
 800a34c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a354:	2b00      	cmp	r3, #0
 800a356:	d10d      	bne.n	800a374 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a358:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a35c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a360:	2b00      	cmp	r3, #0
 800a362:	f040 8187 	bne.w	800a674 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a366:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a36a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a36e:	2b00      	cmp	r3, #0
 800a370:	f040 8180 	bne.w	800a674 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800a374:	1d3b      	adds	r3, r7, #4
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	463b      	mov	r3, r7
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	4413      	add	r3, r2
 800a382:	881b      	ldrh	r3, [r3, #0]
 800a384:	b29b      	uxth	r3, r3
 800a386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a38a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a38e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800a392:	1d3b      	adds	r3, r7, #4
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	463b      	mov	r3, r7
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	441a      	add	r2, r3
 800a3a0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800a3a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	8013      	strh	r3, [r2, #0]
 800a3b8:	e15c      	b.n	800a674 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a3ba:	463b      	mov	r3, r7
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	78db      	ldrb	r3, [r3, #3]
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	f040 8155 	bne.w	800a670 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a3c6:	463b      	mov	r3, r7
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	699a      	ldr	r2, [r3, #24]
 800a3cc:	463b      	mov	r3, r7
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	691b      	ldr	r3, [r3, #16]
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d90e      	bls.n	800a3f4 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 800a3d6:	463b      	mov	r3, r7
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	691b      	ldr	r3, [r3, #16]
 800a3dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 800a3e0:	463b      	mov	r3, r7
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	699a      	ldr	r2, [r3, #24]
 800a3e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a3ea:	1ad2      	subs	r2, r2, r3
 800a3ec:	463b      	mov	r3, r7
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	619a      	str	r2, [r3, #24]
 800a3f2:	e008      	b.n	800a406 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 800a3f4:	463b      	mov	r3, r7
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	699b      	ldr	r3, [r3, #24]
 800a3fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 800a3fe:	463b      	mov	r3, r7
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	2200      	movs	r2, #0
 800a404:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a406:	463b      	mov	r3, r7
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	785b      	ldrb	r3, [r3, #1]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d16f      	bne.n	800a4f0 <USB_EPStartXfer+0x1054>
 800a410:	1d3b      	adds	r3, r7, #4
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a418:	1d3b      	adds	r3, r7, #4
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a420:	b29b      	uxth	r3, r3
 800a422:	461a      	mov	r2, r3
 800a424:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a428:	4413      	add	r3, r2
 800a42a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a42e:	463b      	mov	r3, r7
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	011a      	lsls	r2, r3, #4
 800a436:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a43a:	4413      	add	r3, r2
 800a43c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a440:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a444:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d116      	bne.n	800a47a <USB_EPStartXfer+0xfde>
 800a44c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a450:	881b      	ldrh	r3, [r3, #0]
 800a452:	b29b      	uxth	r3, r3
 800a454:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a458:	b29a      	uxth	r2, r3
 800a45a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a45e:	801a      	strh	r2, [r3, #0]
 800a460:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a464:	881b      	ldrh	r3, [r3, #0]
 800a466:	b29b      	uxth	r3, r3
 800a468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a46c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a470:	b29a      	uxth	r2, r3
 800a472:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a476:	801a      	strh	r2, [r3, #0]
 800a478:	e05f      	b.n	800a53a <USB_EPStartXfer+0x109e>
 800a47a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a47e:	2b3e      	cmp	r3, #62	; 0x3e
 800a480:	d818      	bhi.n	800a4b4 <USB_EPStartXfer+0x1018>
 800a482:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a486:	085b      	lsrs	r3, r3, #1
 800a488:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a48c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a490:	f003 0301 	and.w	r3, r3, #1
 800a494:	2b00      	cmp	r3, #0
 800a496:	d004      	beq.n	800a4a2 <USB_EPStartXfer+0x1006>
 800a498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a49c:	3301      	adds	r3, #1
 800a49e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a4a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	029b      	lsls	r3, r3, #10
 800a4aa:	b29a      	uxth	r2, r3
 800a4ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a4b0:	801a      	strh	r2, [r3, #0]
 800a4b2:	e042      	b.n	800a53a <USB_EPStartXfer+0x109e>
 800a4b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a4b8:	095b      	lsrs	r3, r3, #5
 800a4ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a4be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a4c2:	f003 031f 	and.w	r3, r3, #31
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d104      	bne.n	800a4d4 <USB_EPStartXfer+0x1038>
 800a4ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4ce:	3b01      	subs	r3, #1
 800a4d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a4d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	029b      	lsls	r3, r3, #10
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4e6:	b29a      	uxth	r2, r3
 800a4e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a4ec:	801a      	strh	r2, [r3, #0]
 800a4ee:	e024      	b.n	800a53a <USB_EPStartXfer+0x109e>
 800a4f0:	463b      	mov	r3, r7
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	785b      	ldrb	r3, [r3, #1]
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d11f      	bne.n	800a53a <USB_EPStartXfer+0x109e>
 800a4fa:	1d3b      	adds	r3, r7, #4
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a502:	1d3b      	adds	r3, r7, #4
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	461a      	mov	r2, r3
 800a50e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a512:	4413      	add	r3, r2
 800a514:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a518:	463b      	mov	r3, r7
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	781b      	ldrb	r3, [r3, #0]
 800a51e:	011a      	lsls	r2, r3, #4
 800a520:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a524:	4413      	add	r3, r2
 800a526:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a52a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a52e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a532:	b29a      	uxth	r2, r3
 800a534:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a538:	801a      	strh	r2, [r3, #0]
 800a53a:	1d3b      	adds	r3, r7, #4
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a542:	463b      	mov	r3, r7
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	785b      	ldrb	r3, [r3, #1]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d16f      	bne.n	800a62c <USB_EPStartXfer+0x1190>
 800a54c:	1d3b      	adds	r3, r7, #4
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a554:	1d3b      	adds	r3, r7, #4
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	461a      	mov	r2, r3
 800a560:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a564:	4413      	add	r3, r2
 800a566:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a56a:	463b      	mov	r3, r7
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	011a      	lsls	r2, r3, #4
 800a572:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a576:	4413      	add	r3, r2
 800a578:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a57c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a580:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a584:	2b00      	cmp	r3, #0
 800a586:	d116      	bne.n	800a5b6 <USB_EPStartXfer+0x111a>
 800a588:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a58c:	881b      	ldrh	r3, [r3, #0]
 800a58e:	b29b      	uxth	r3, r3
 800a590:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a594:	b29a      	uxth	r2, r3
 800a596:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a59a:	801a      	strh	r2, [r3, #0]
 800a59c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a5a0:	881b      	ldrh	r3, [r3, #0]
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5ac:	b29a      	uxth	r2, r3
 800a5ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a5b2:	801a      	strh	r2, [r3, #0]
 800a5b4:	e05e      	b.n	800a674 <USB_EPStartXfer+0x11d8>
 800a5b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a5ba:	2b3e      	cmp	r3, #62	; 0x3e
 800a5bc:	d818      	bhi.n	800a5f0 <USB_EPStartXfer+0x1154>
 800a5be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a5c2:	085b      	lsrs	r3, r3, #1
 800a5c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a5c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a5cc:	f003 0301 	and.w	r3, r3, #1
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d004      	beq.n	800a5de <USB_EPStartXfer+0x1142>
 800a5d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a5d8:	3301      	adds	r3, #1
 800a5da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a5de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	029b      	lsls	r3, r3, #10
 800a5e6:	b29a      	uxth	r2, r3
 800a5e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a5ec:	801a      	strh	r2, [r3, #0]
 800a5ee:	e041      	b.n	800a674 <USB_EPStartXfer+0x11d8>
 800a5f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a5f4:	095b      	lsrs	r3, r3, #5
 800a5f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a5fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a5fe:	f003 031f 	and.w	r3, r3, #31
 800a602:	2b00      	cmp	r3, #0
 800a604:	d104      	bne.n	800a610 <USB_EPStartXfer+0x1174>
 800a606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a60a:	3b01      	subs	r3, #1
 800a60c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a614:	b29b      	uxth	r3, r3
 800a616:	029b      	lsls	r3, r3, #10
 800a618:	b29b      	uxth	r3, r3
 800a61a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a61e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a622:	b29a      	uxth	r2, r3
 800a624:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a628:	801a      	strh	r2, [r3, #0]
 800a62a:	e023      	b.n	800a674 <USB_EPStartXfer+0x11d8>
 800a62c:	463b      	mov	r3, r7
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	785b      	ldrb	r3, [r3, #1]
 800a632:	2b01      	cmp	r3, #1
 800a634:	d11e      	bne.n	800a674 <USB_EPStartXfer+0x11d8>
 800a636:	1d3b      	adds	r3, r7, #4
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a63e:	b29b      	uxth	r3, r3
 800a640:	461a      	mov	r2, r3
 800a642:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a646:	4413      	add	r3, r2
 800a648:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a64c:	463b      	mov	r3, r7
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	011a      	lsls	r2, r3, #4
 800a654:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a658:	4413      	add	r3, r2
 800a65a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a65e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a662:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a666:	b29a      	uxth	r2, r3
 800a668:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a66c:	801a      	strh	r2, [r3, #0]
 800a66e:	e001      	b.n	800a674 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 800a670:	2301      	movs	r3, #1
 800a672:	e02e      	b.n	800a6d2 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a674:	1d3b      	adds	r3, r7, #4
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	463b      	mov	r3, r7
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	781b      	ldrb	r3, [r3, #0]
 800a67e:	009b      	lsls	r3, r3, #2
 800a680:	4413      	add	r3, r2
 800a682:	881b      	ldrh	r3, [r3, #0]
 800a684:	b29b      	uxth	r3, r3
 800a686:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a68a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a68e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800a692:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a696:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a69a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800a69e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a6a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a6a6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800a6aa:	1d3b      	adds	r3, r7, #4
 800a6ac:	681a      	ldr	r2, [r3, #0]
 800a6ae:	463b      	mov	r3, r7
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	009b      	lsls	r3, r3, #2
 800a6b6:	441a      	add	r2, r3
 800a6b8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a6bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6cc:	b29b      	uxth	r3, r3
 800a6ce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a6d0:	2300      	movs	r3, #0
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b085      	sub	sp, #20
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	785b      	ldrb	r3, [r3, #1]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d020      	beq.n	800a730 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	4413      	add	r3, r2
 800a6f8:	881b      	ldrh	r3, [r3, #0]
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a700:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a704:	81bb      	strh	r3, [r7, #12]
 800a706:	89bb      	ldrh	r3, [r7, #12]
 800a708:	f083 0310 	eor.w	r3, r3, #16
 800a70c:	81bb      	strh	r3, [r7, #12]
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	441a      	add	r2, r3
 800a718:	89bb      	ldrh	r3, [r7, #12]
 800a71a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a71e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	8013      	strh	r3, [r2, #0]
 800a72e:	e01f      	b.n	800a770 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a730:	687a      	ldr	r2, [r7, #4]
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	4413      	add	r3, r2
 800a73a:	881b      	ldrh	r3, [r3, #0]
 800a73c:	b29b      	uxth	r3, r3
 800a73e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a746:	81fb      	strh	r3, [r7, #14]
 800a748:	89fb      	ldrh	r3, [r7, #14]
 800a74a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a74e:	81fb      	strh	r3, [r7, #14]
 800a750:	687a      	ldr	r2, [r7, #4]
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	441a      	add	r2, r3
 800a75a:	89fb      	ldrh	r3, [r7, #14]
 800a75c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a760:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a764:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a76c:	b29b      	uxth	r3, r3
 800a76e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a770:	2300      	movs	r3, #0
}
 800a772:	4618      	mov	r0, r3
 800a774:	3714      	adds	r7, #20
 800a776:	46bd      	mov	sp, r7
 800a778:	bc80      	pop	{r7}
 800a77a:	4770      	bx	lr

0800a77c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b087      	sub	sp, #28
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	7b1b      	ldrb	r3, [r3, #12]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	f040 809d 	bne.w	800a8ca <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	785b      	ldrb	r3, [r3, #1]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d04c      	beq.n	800a832 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a798:	687a      	ldr	r2, [r7, #4]
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	4413      	add	r3, r2
 800a7a2:	881b      	ldrh	r3, [r3, #0]
 800a7a4:	823b      	strh	r3, [r7, #16]
 800a7a6:	8a3b      	ldrh	r3, [r7, #16]
 800a7a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d01b      	beq.n	800a7e8 <USB_EPClearStall+0x6c>
 800a7b0:	687a      	ldr	r2, [r7, #4]
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	009b      	lsls	r3, r3, #2
 800a7b8:	4413      	add	r3, r2
 800a7ba:	881b      	ldrh	r3, [r3, #0]
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7c6:	81fb      	strh	r3, [r7, #14]
 800a7c8:	687a      	ldr	r2, [r7, #4]
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	009b      	lsls	r3, r3, #2
 800a7d0:	441a      	add	r2, r3
 800a7d2:	89fb      	ldrh	r3, [r7, #14]
 800a7d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a7e4:	b29b      	uxth	r3, r3
 800a7e6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	78db      	ldrb	r3, [r3, #3]
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d06c      	beq.n	800a8ca <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	009b      	lsls	r3, r3, #2
 800a7f8:	4413      	add	r3, r2
 800a7fa:	881b      	ldrh	r3, [r3, #0]
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a802:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a806:	81bb      	strh	r3, [r7, #12]
 800a808:	89bb      	ldrh	r3, [r7, #12]
 800a80a:	f083 0320 	eor.w	r3, r3, #32
 800a80e:	81bb      	strh	r3, [r7, #12]
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	009b      	lsls	r3, r3, #2
 800a818:	441a      	add	r2, r3
 800a81a:	89bb      	ldrh	r3, [r7, #12]
 800a81c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a820:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	8013      	strh	r3, [r2, #0]
 800a830:	e04b      	b.n	800a8ca <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	4413      	add	r3, r2
 800a83c:	881b      	ldrh	r3, [r3, #0]
 800a83e:	82fb      	strh	r3, [r7, #22]
 800a840:	8afb      	ldrh	r3, [r7, #22]
 800a842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a846:	2b00      	cmp	r3, #0
 800a848:	d01b      	beq.n	800a882 <USB_EPClearStall+0x106>
 800a84a:	687a      	ldr	r2, [r7, #4]
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	009b      	lsls	r3, r3, #2
 800a852:	4413      	add	r3, r2
 800a854:	881b      	ldrh	r3, [r3, #0]
 800a856:	b29b      	uxth	r3, r3
 800a858:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a85c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a860:	82bb      	strh	r3, [r7, #20]
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	441a      	add	r2, r3
 800a86c:	8abb      	ldrh	r3, [r7, #20]
 800a86e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a872:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a876:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a87a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a87e:	b29b      	uxth	r3, r3
 800a880:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a882:	687a      	ldr	r2, [r7, #4]
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	781b      	ldrb	r3, [r3, #0]
 800a888:	009b      	lsls	r3, r3, #2
 800a88a:	4413      	add	r3, r2
 800a88c:	881b      	ldrh	r3, [r3, #0]
 800a88e:	b29b      	uxth	r3, r3
 800a890:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a898:	827b      	strh	r3, [r7, #18]
 800a89a:	8a7b      	ldrh	r3, [r7, #18]
 800a89c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a8a0:	827b      	strh	r3, [r7, #18]
 800a8a2:	8a7b      	ldrh	r3, [r7, #18]
 800a8a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a8a8:	827b      	strh	r3, [r7, #18]
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	441a      	add	r2, r3
 800a8b4:	8a7b      	ldrh	r3, [r7, #18]
 800a8b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8c6:	b29b      	uxth	r3, r3
 800a8c8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	371c      	adds	r7, #28
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bc80      	pop	{r7}
 800a8d4:	4770      	bx	lr

0800a8d6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a8d6:	b480      	push	{r7}
 800a8d8:	b083      	sub	sp, #12
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
 800a8de:	460b      	mov	r3, r1
 800a8e0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a8e2:	78fb      	ldrb	r3, [r7, #3]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d103      	bne.n	800a8f0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2280      	movs	r2, #128	; 0x80
 800a8ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a8f0:	2300      	movs	r3, #0
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	370c      	adds	r7, #12
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bc80      	pop	{r7}
 800a8fa:	4770      	bx	lr

0800a8fc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	370c      	adds	r7, #12
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bc80      	pop	{r7}
 800a90e:	4770      	bx	lr

0800a910 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a910:	b480      	push	{r7}
 800a912:	b083      	sub	sp, #12
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a918:	2300      	movs	r3, #0
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	370c      	adds	r7, #12
 800a91e:	46bd      	mov	sp, r7
 800a920:	bc80      	pop	{r7}
 800a922:	4770      	bx	lr

0800a924 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a924:	b480      	push	{r7}
 800a926:	b085      	sub	sp, #20
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a932:	b29b      	uxth	r3, r3
 800a934:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a936:	68fb      	ldr	r3, [r7, #12]
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3714      	adds	r7, #20
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bc80      	pop	{r7}
 800a940:	4770      	bx	lr

0800a942 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a942:	b480      	push	{r7}
 800a944:	b083      	sub	sp, #12
 800a946:	af00      	add	r7, sp, #0
 800a948:	6078      	str	r0, [r7, #4]
 800a94a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a94c:	2300      	movs	r3, #0
}
 800a94e:	4618      	mov	r0, r3
 800a950:	370c      	adds	r7, #12
 800a952:	46bd      	mov	sp, r7
 800a954:	bc80      	pop	{r7}
 800a956:	4770      	bx	lr

0800a958 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a958:	b480      	push	{r7}
 800a95a:	b08d      	sub	sp, #52	; 0x34
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	60f8      	str	r0, [r7, #12]
 800a960:	60b9      	str	r1, [r7, #8]
 800a962:	4611      	mov	r1, r2
 800a964:	461a      	mov	r2, r3
 800a966:	460b      	mov	r3, r1
 800a968:	80fb      	strh	r3, [r7, #6]
 800a96a:	4613      	mov	r3, r2
 800a96c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a96e:	88bb      	ldrh	r3, [r7, #4]
 800a970:	3301      	adds	r3, #1
 800a972:	085b      	lsrs	r3, r3, #1
 800a974:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a97e:	88fb      	ldrh	r3, [r7, #6]
 800a980:	005a      	lsls	r2, r3, #1
 800a982:	69fb      	ldr	r3, [r7, #28]
 800a984:	4413      	add	r3, r2
 800a986:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a98a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a98c:	6a3b      	ldr	r3, [r7, #32]
 800a98e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a990:	e01e      	b.n	800a9d0 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800a992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a99a:	3301      	adds	r3, #1
 800a99c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	b29b      	uxth	r3, r3
 800a9a4:	021b      	lsls	r3, r3, #8
 800a9a6:	b29b      	uxth	r3, r3
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	69bb      	ldr	r3, [r7, #24]
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	b29a      	uxth	r2, r3
 800a9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ba:	3302      	adds	r3, #2
 800a9bc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800a9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c0:	3302      	adds	r3, #2
 800a9c2:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800a9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c6:	3301      	adds	r3, #1
 800a9c8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9cc:	3b01      	subs	r3, #1
 800a9ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d1dd      	bne.n	800a992 <USB_WritePMA+0x3a>
  }
}
 800a9d6:	bf00      	nop
 800a9d8:	3734      	adds	r7, #52	; 0x34
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bc80      	pop	{r7}
 800a9de:	4770      	bx	lr

0800a9e0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b08b      	sub	sp, #44	; 0x2c
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	4611      	mov	r1, r2
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	80fb      	strh	r3, [r7, #6]
 800a9f2:	4613      	mov	r3, r2
 800a9f4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a9f6:	88bb      	ldrh	r3, [r7, #4]
 800a9f8:	085b      	lsrs	r3, r3, #1
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800aa06:	88fb      	ldrh	r3, [r7, #6]
 800aa08:	005a      	lsls	r2, r3, #1
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	4413      	add	r3, r2
 800aa0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa12:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800aa14:	69bb      	ldr	r3, [r7, #24]
 800aa16:	627b      	str	r3, [r7, #36]	; 0x24
 800aa18:	e01b      	b.n	800aa52 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800aa1a:	6a3b      	ldr	r3, [r7, #32]
 800aa1c:	881b      	ldrh	r3, [r3, #0]
 800aa1e:	b29b      	uxth	r3, r3
 800aa20:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800aa22:	6a3b      	ldr	r3, [r7, #32]
 800aa24:	3302      	adds	r3, #2
 800aa26:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	b2da      	uxtb	r2, r3
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800aa30:	69fb      	ldr	r3, [r7, #28]
 800aa32:	3301      	adds	r3, #1
 800aa34:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	0a1b      	lsrs	r3, r3, #8
 800aa3a:	b2da      	uxtb	r2, r3
 800aa3c:	69fb      	ldr	r3, [r7, #28]
 800aa3e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800aa40:	69fb      	ldr	r3, [r7, #28]
 800aa42:	3301      	adds	r3, #1
 800aa44:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800aa46:	6a3b      	ldr	r3, [r7, #32]
 800aa48:	3302      	adds	r3, #2
 800aa4a:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800aa4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4e:	3b01      	subs	r3, #1
 800aa50:	627b      	str	r3, [r7, #36]	; 0x24
 800aa52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d1e0      	bne.n	800aa1a <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800aa58:	88bb      	ldrh	r3, [r7, #4]
 800aa5a:	f003 0301 	and.w	r3, r3, #1
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d007      	beq.n	800aa74 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800aa64:	6a3b      	ldr	r3, [r7, #32]
 800aa66:	881b      	ldrh	r3, [r3, #0]
 800aa68:	b29b      	uxth	r3, r3
 800aa6a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	b2da      	uxtb	r2, r3
 800aa70:	69fb      	ldr	r3, [r7, #28]
 800aa72:	701a      	strb	r2, [r3, #0]
  }
}
 800aa74:	bf00      	nop
 800aa76:	372c      	adds	r7, #44	; 0x2c
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bc80      	pop	{r7}
 800aa7c:	4770      	bx	lr
	...

0800aa80 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800aa84:	4904      	ldr	r1, [pc, #16]	; (800aa98 <MX_FATFS_Init+0x18>)
 800aa86:	4805      	ldr	r0, [pc, #20]	; (800aa9c <MX_FATFS_Init+0x1c>)
 800aa88:	f004 fb4a 	bl	800f120 <FATFS_LinkDriver>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	461a      	mov	r2, r3
 800aa90:	4b03      	ldr	r3, [pc, #12]	; (800aaa0 <MX_FATFS_Init+0x20>)
 800aa92:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800aa94:	bf00      	nop
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	20000744 	.word	0x20000744
 800aa9c:	08010b0c 	.word	0x08010b0c
 800aaa0:	20000740 	.word	0x20000740

0800aaa4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800aaa8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bc80      	pop	{r7}
 800aab0:	4770      	bx	lr
	...

0800aab4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b082      	sub	sp, #8
 800aab8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800aaba:	2300      	movs	r3, #0
 800aabc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800aabe:	f000 f86b 	bl	800ab98 <BSP_SD_IsDetected>
 800aac2:	4603      	mov	r3, r0
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	d001      	beq.n	800aacc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800aac8:	2301      	movs	r3, #1
 800aaca:	e005      	b.n	800aad8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800aacc:	4804      	ldr	r0, [pc, #16]	; (800aae0 <BSP_SD_Init+0x2c>)
 800aace:	f7fb fe27 	bl	8006720 <HAL_SD_Init>
 800aad2:	4603      	mov	r3, r0
 800aad4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800aad6:	79fb      	ldrb	r3, [r7, #7]
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3708      	adds	r7, #8
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}
 800aae0:	2000060c 	.word	0x2000060c

0800aae4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b088      	sub	sp, #32
 800aae8:	af02      	add	r7, sp, #8
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	60b9      	str	r1, [r7, #8]
 800aaee:	607a      	str	r2, [r7, #4]
 800aaf0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	9300      	str	r3, [sp, #0]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	68ba      	ldr	r2, [r7, #8]
 800aafe:	68f9      	ldr	r1, [r7, #12]
 800ab00:	4806      	ldr	r0, [pc, #24]	; (800ab1c <BSP_SD_ReadBlocks+0x38>)
 800ab02:	f7fb febd 	bl	8006880 <HAL_SD_ReadBlocks>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d001      	beq.n	800ab10 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ab10:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3718      	adds	r7, #24
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	2000060c 	.word	0x2000060c

0800ab20 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b088      	sub	sp, #32
 800ab24:	af02      	add	r7, sp, #8
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	607a      	str	r2, [r7, #4]
 800ab2c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	9300      	str	r3, [sp, #0]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	68ba      	ldr	r2, [r7, #8]
 800ab3a:	68f9      	ldr	r1, [r7, #12]
 800ab3c:	4806      	ldr	r0, [pc, #24]	; (800ab58 <BSP_SD_WriteBlocks+0x38>)
 800ab3e:	f7fc f899 	bl	8006c74 <HAL_SD_WriteBlocks>
 800ab42:	4603      	mov	r3, r0
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d001      	beq.n	800ab4c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ab4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3718      	adds	r7, #24
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
 800ab56:	bf00      	nop
 800ab58:	2000060c 	.word	0x2000060c

0800ab5c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ab60:	4805      	ldr	r0, [pc, #20]	; (800ab78 <BSP_SD_GetCardState+0x1c>)
 800ab62:	f7fc fbf8 	bl	8007356 <HAL_SD_GetCardState>
 800ab66:	4603      	mov	r3, r0
 800ab68:	2b04      	cmp	r3, #4
 800ab6a:	bf14      	ite	ne
 800ab6c:	2301      	movne	r3, #1
 800ab6e:	2300      	moveq	r3, #0
 800ab70:	b2db      	uxtb	r3, r3
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	bd80      	pop	{r7, pc}
 800ab76:	bf00      	nop
 800ab78:	2000060c 	.word	0x2000060c

0800ab7c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b082      	sub	sp, #8
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800ab84:	6879      	ldr	r1, [r7, #4]
 800ab86:	4803      	ldr	r0, [pc, #12]	; (800ab94 <BSP_SD_GetCardInfo+0x18>)
 800ab88:	f7fc fbba 	bl	8007300 <HAL_SD_GetCardInfo>
}
 800ab8c:	bf00      	nop
 800ab8e:	3708      	adds	r7, #8
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}
 800ab94:	2000060c 	.word	0x2000060c

0800ab98 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b082      	sub	sp, #8
 800ab9c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800aba2:	f000 f80b 	bl	800abbc <BSP_PlatformIsDetected>
 800aba6:	4603      	mov	r3, r0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d101      	bne.n	800abb0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800abac:	2300      	movs	r3, #0
 800abae:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800abb0:	79fb      	ldrb	r3, [r7, #7]
 800abb2:	b2db      	uxtb	r3, r3
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3708      	adds	r7, #8
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b082      	sub	sp, #8
 800abc0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800abc2:	2301      	movs	r3, #1
 800abc4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800abc6:	2120      	movs	r1, #32
 800abc8:	4806      	ldr	r0, [pc, #24]	; (800abe4 <BSP_PlatformIsDetected+0x28>)
 800abca:	f7f8 fd19 	bl	8003600 <HAL_GPIO_ReadPin>
 800abce:	4603      	mov	r3, r0
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d001      	beq.n	800abd8 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800abd4:	2300      	movs	r3, #0
 800abd6:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800abd8:	79fb      	ldrb	r3, [r7, #7]
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3708      	adds	r7, #8
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	bf00      	nop
 800abe4:	40010c00 	.word	0x40010c00

0800abe8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	460b      	mov	r3, r1
 800abf2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800abf4:	2300      	movs	r3, #0
 800abf6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	7c1b      	ldrb	r3, [r3, #16]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d115      	bne.n	800ac2c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ac00:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac04:	2202      	movs	r2, #2
 800ac06:	2181      	movs	r1, #129	; 0x81
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f004 fecc 	bl	800f9a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2201      	movs	r2, #1
 800ac12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ac14:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac18:	2202      	movs	r2, #2
 800ac1a:	2101      	movs	r1, #1
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f004 fec2 	bl	800f9a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2201      	movs	r2, #1
 800ac26:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800ac2a:	e012      	b.n	800ac52 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ac2c:	2340      	movs	r3, #64	; 0x40
 800ac2e:	2202      	movs	r2, #2
 800ac30:	2181      	movs	r1, #129	; 0x81
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f004 feb7 	bl	800f9a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ac3e:	2340      	movs	r3, #64	; 0x40
 800ac40:	2202      	movs	r2, #2
 800ac42:	2101      	movs	r1, #1
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f004 feae 	bl	800f9a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ac52:	2308      	movs	r3, #8
 800ac54:	2203      	movs	r2, #3
 800ac56:	2182      	movs	r1, #130	; 0x82
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f004 fea4 	bl	800f9a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2201      	movs	r2, #1
 800ac62:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ac64:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ac68:	f004 ffc4 	bl	800fbf4 <USBD_static_malloc>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d102      	bne.n	800ac84 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	73fb      	strb	r3, [r7, #15]
 800ac82:	e026      	b.n	800acd2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac8a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	2200      	movs	r2, #0
 800aca2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	7c1b      	ldrb	r3, [r3, #16]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d109      	bne.n	800acc2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800acb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acb8:	2101      	movs	r1, #1
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f004 ff64 	bl	800fb88 <USBD_LL_PrepareReceive>
 800acc0:	e007      	b.n	800acd2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800acc8:	2340      	movs	r3, #64	; 0x40
 800acca:	2101      	movs	r1, #1
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f004 ff5b 	bl	800fb88 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800acd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3710      	adds	r7, #16
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}

0800acdc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b084      	sub	sp, #16
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	460b      	mov	r3, r1
 800ace6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ace8:	2300      	movs	r3, #0
 800acea:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800acec:	2181      	movs	r1, #129	; 0x81
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f004 fe7f 	bl	800f9f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2200      	movs	r2, #0
 800acf8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800acfa:	2101      	movs	r1, #1
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f004 fe78 	bl	800f9f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2200      	movs	r2, #0
 800ad06:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ad0a:	2182      	movs	r1, #130	; 0x82
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f004 fe70 	bl	800f9f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2200      	movs	r2, #0
 800ad16:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d00e      	beq.n	800ad40 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad32:	4618      	mov	r0, r3
 800ad34:	f004 ff6a 	bl	800fc0c <USBD_static_free>
    pdev->pClassData = NULL;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800ad40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3710      	adds	r7, #16
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}

0800ad4a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ad4a:	b580      	push	{r7, lr}
 800ad4c:	b086      	sub	sp, #24
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
 800ad52:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad5a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800ad60:	2300      	movs	r3, #0
 800ad62:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800ad64:	2300      	movs	r3, #0
 800ad66:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	781b      	ldrb	r3, [r3, #0]
 800ad6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d039      	beq.n	800ade8 <USBD_CDC_Setup+0x9e>
 800ad74:	2b20      	cmp	r3, #32
 800ad76:	d17c      	bne.n	800ae72 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	88db      	ldrh	r3, [r3, #6]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d029      	beq.n	800add4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	b25b      	sxtb	r3, r3
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	da11      	bge.n	800adae <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad90:	689b      	ldr	r3, [r3, #8]
 800ad92:	683a      	ldr	r2, [r7, #0]
 800ad94:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800ad96:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ad98:	683a      	ldr	r2, [r7, #0]
 800ad9a:	88d2      	ldrh	r2, [r2, #6]
 800ad9c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ad9e:	6939      	ldr	r1, [r7, #16]
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	88db      	ldrh	r3, [r3, #6]
 800ada4:	461a      	mov	r2, r3
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f001 f9fa 	bl	800c1a0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800adac:	e068      	b.n	800ae80 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	785a      	ldrb	r2, [r3, #1]
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	88db      	ldrh	r3, [r3, #6]
 800adbc:	b2da      	uxtb	r2, r3
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800adc4:	6939      	ldr	r1, [r7, #16]
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	88db      	ldrh	r3, [r3, #6]
 800adca:	461a      	mov	r2, r3
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f001 fa15 	bl	800c1fc <USBD_CtlPrepareRx>
      break;
 800add2:	e055      	b.n	800ae80 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800adda:	689b      	ldr	r3, [r3, #8]
 800addc:	683a      	ldr	r2, [r7, #0]
 800adde:	7850      	ldrb	r0, [r2, #1]
 800ade0:	2200      	movs	r2, #0
 800ade2:	6839      	ldr	r1, [r7, #0]
 800ade4:	4798      	blx	r3
      break;
 800ade6:	e04b      	b.n	800ae80 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	785b      	ldrb	r3, [r3, #1]
 800adec:	2b0a      	cmp	r3, #10
 800adee:	d017      	beq.n	800ae20 <USBD_CDC_Setup+0xd6>
 800adf0:	2b0b      	cmp	r3, #11
 800adf2:	d029      	beq.n	800ae48 <USBD_CDC_Setup+0xfe>
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d133      	bne.n	800ae60 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adfe:	2b03      	cmp	r3, #3
 800ae00:	d107      	bne.n	800ae12 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800ae02:	f107 030c 	add.w	r3, r7, #12
 800ae06:	2202      	movs	r2, #2
 800ae08:	4619      	mov	r1, r3
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f001 f9c8 	bl	800c1a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ae10:	e02e      	b.n	800ae70 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800ae12:	6839      	ldr	r1, [r7, #0]
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f001 f959 	bl	800c0cc <USBD_CtlError>
            ret = USBD_FAIL;
 800ae1a:	2302      	movs	r3, #2
 800ae1c:	75fb      	strb	r3, [r7, #23]
          break;
 800ae1e:	e027      	b.n	800ae70 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae26:	2b03      	cmp	r3, #3
 800ae28:	d107      	bne.n	800ae3a <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800ae2a:	f107 030f 	add.w	r3, r7, #15
 800ae2e:	2201      	movs	r2, #1
 800ae30:	4619      	mov	r1, r3
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f001 f9b4 	bl	800c1a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ae38:	e01a      	b.n	800ae70 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800ae3a:	6839      	ldr	r1, [r7, #0]
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f001 f945 	bl	800c0cc <USBD_CtlError>
            ret = USBD_FAIL;
 800ae42:	2302      	movs	r3, #2
 800ae44:	75fb      	strb	r3, [r7, #23]
          break;
 800ae46:	e013      	b.n	800ae70 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae4e:	2b03      	cmp	r3, #3
 800ae50:	d00d      	beq.n	800ae6e <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800ae52:	6839      	ldr	r1, [r7, #0]
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f001 f939 	bl	800c0cc <USBD_CtlError>
            ret = USBD_FAIL;
 800ae5a:	2302      	movs	r3, #2
 800ae5c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ae5e:	e006      	b.n	800ae6e <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800ae60:	6839      	ldr	r1, [r7, #0]
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f001 f932 	bl	800c0cc <USBD_CtlError>
          ret = USBD_FAIL;
 800ae68:	2302      	movs	r3, #2
 800ae6a:	75fb      	strb	r3, [r7, #23]
          break;
 800ae6c:	e000      	b.n	800ae70 <USBD_CDC_Setup+0x126>
          break;
 800ae6e:	bf00      	nop
      }
      break;
 800ae70:	e006      	b.n	800ae80 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800ae72:	6839      	ldr	r1, [r7, #0]
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f001 f929 	bl	800c0cc <USBD_CtlError>
      ret = USBD_FAIL;
 800ae7a:	2302      	movs	r3, #2
 800ae7c:	75fb      	strb	r3, [r7, #23]
      break;
 800ae7e:	bf00      	nop
  }

  return ret;
 800ae80:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3718      	adds	r7, #24
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}

0800ae8a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ae8a:	b580      	push	{r7, lr}
 800ae8c:	b084      	sub	sp, #16
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
 800ae92:	460b      	mov	r3, r1
 800ae94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae9c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aea4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d03a      	beq.n	800af26 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800aeb0:	78fa      	ldrb	r2, [r7, #3]
 800aeb2:	6879      	ldr	r1, [r7, #4]
 800aeb4:	4613      	mov	r3, r2
 800aeb6:	009b      	lsls	r3, r3, #2
 800aeb8:	4413      	add	r3, r2
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	440b      	add	r3, r1
 800aebe:	331c      	adds	r3, #28
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d029      	beq.n	800af1a <USBD_CDC_DataIn+0x90>
 800aec6:	78fa      	ldrb	r2, [r7, #3]
 800aec8:	6879      	ldr	r1, [r7, #4]
 800aeca:	4613      	mov	r3, r2
 800aecc:	009b      	lsls	r3, r3, #2
 800aece:	4413      	add	r3, r2
 800aed0:	009b      	lsls	r3, r3, #2
 800aed2:	440b      	add	r3, r1
 800aed4:	331c      	adds	r3, #28
 800aed6:	681a      	ldr	r2, [r3, #0]
 800aed8:	78f9      	ldrb	r1, [r7, #3]
 800aeda:	68b8      	ldr	r0, [r7, #8]
 800aedc:	460b      	mov	r3, r1
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	440b      	add	r3, r1
 800aee2:	00db      	lsls	r3, r3, #3
 800aee4:	4403      	add	r3, r0
 800aee6:	3338      	adds	r3, #56	; 0x38
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	fbb2 f1f3 	udiv	r1, r2, r3
 800aeee:	fb03 f301 	mul.w	r3, r3, r1
 800aef2:	1ad3      	subs	r3, r2, r3
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d110      	bne.n	800af1a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800aef8:	78fa      	ldrb	r2, [r7, #3]
 800aefa:	6879      	ldr	r1, [r7, #4]
 800aefc:	4613      	mov	r3, r2
 800aefe:	009b      	lsls	r3, r3, #2
 800af00:	4413      	add	r3, r2
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	440b      	add	r3, r1
 800af06:	331c      	adds	r3, #28
 800af08:	2200      	movs	r2, #0
 800af0a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800af0c:	78f9      	ldrb	r1, [r7, #3]
 800af0e:	2300      	movs	r3, #0
 800af10:	2200      	movs	r2, #0
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f004 fe15 	bl	800fb42 <USBD_LL_Transmit>
 800af18:	e003      	b.n	800af22 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	2200      	movs	r2, #0
 800af1e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800af22:	2300      	movs	r3, #0
 800af24:	e000      	b.n	800af28 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800af26:	2302      	movs	r3, #2
  }
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3710      	adds	r7, #16
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	460b      	mov	r3, r1
 800af3a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af42:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800af44:	78fb      	ldrb	r3, [r7, #3]
 800af46:	4619      	mov	r1, r3
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f004 fe40 	bl	800fbce <USBD_LL_GetRxDataSize>
 800af4e:	4602      	mov	r2, r0
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d00d      	beq.n	800af7c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af66:	68db      	ldr	r3, [r3, #12]
 800af68:	68fa      	ldr	r2, [r7, #12]
 800af6a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800af6e:	68fa      	ldr	r2, [r7, #12]
 800af70:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800af74:	4611      	mov	r1, r2
 800af76:	4798      	blx	r3

    return USBD_OK;
 800af78:	2300      	movs	r3, #0
 800af7a:	e000      	b.n	800af7e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800af7c:	2302      	movs	r3, #2
  }
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3710      	adds	r7, #16
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}

0800af86 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800af86:	b580      	push	{r7, lr}
 800af88:	b084      	sub	sp, #16
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af94:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d015      	beq.n	800afcc <USBD_CDC_EP0_RxReady+0x46>
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800afa6:	2bff      	cmp	r3, #255	; 0xff
 800afa8:	d010      	beq.n	800afcc <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800afb0:	689b      	ldr	r3, [r3, #8]
 800afb2:	68fa      	ldr	r2, [r7, #12]
 800afb4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800afb8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800afba:	68fa      	ldr	r2, [r7, #12]
 800afbc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800afc0:	b292      	uxth	r2, r2
 800afc2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	22ff      	movs	r2, #255	; 0xff
 800afc8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800afcc:	2300      	movs	r3, #0
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3710      	adds	r7, #16
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}
	...

0800afd8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800afd8:	b480      	push	{r7}
 800afda:	b083      	sub	sp, #12
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2243      	movs	r2, #67	; 0x43
 800afe4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800afe6:	4b03      	ldr	r3, [pc, #12]	; (800aff4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800afe8:	4618      	mov	r0, r3
 800afea:	370c      	adds	r7, #12
 800afec:	46bd      	mov	sp, r7
 800afee:	bc80      	pop	{r7}
 800aff0:	4770      	bx	lr
 800aff2:	bf00      	nop
 800aff4:	20000094 	.word	0x20000094

0800aff8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800aff8:	b480      	push	{r7}
 800affa:	b083      	sub	sp, #12
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2243      	movs	r2, #67	; 0x43
 800b004:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b006:	4b03      	ldr	r3, [pc, #12]	; (800b014 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b008:	4618      	mov	r0, r3
 800b00a:	370c      	adds	r7, #12
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bc80      	pop	{r7}
 800b010:	4770      	bx	lr
 800b012:	bf00      	nop
 800b014:	20000050 	.word	0x20000050

0800b018 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b018:	b480      	push	{r7}
 800b01a:	b083      	sub	sp, #12
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2243      	movs	r2, #67	; 0x43
 800b024:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b026:	4b03      	ldr	r3, [pc, #12]	; (800b034 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b028:	4618      	mov	r0, r3
 800b02a:	370c      	adds	r7, #12
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bc80      	pop	{r7}
 800b030:	4770      	bx	lr
 800b032:	bf00      	nop
 800b034:	200000d8 	.word	0x200000d8

0800b038 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b038:	b480      	push	{r7}
 800b03a:	b083      	sub	sp, #12
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	220a      	movs	r2, #10
 800b044:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b046:	4b03      	ldr	r3, [pc, #12]	; (800b054 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b048:	4618      	mov	r0, r3
 800b04a:	370c      	adds	r7, #12
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bc80      	pop	{r7}
 800b050:	4770      	bx	lr
 800b052:	bf00      	nop
 800b054:	2000000c 	.word	0x2000000c

0800b058 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b058:	b480      	push	{r7}
 800b05a:	b085      	sub	sp, #20
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b062:	2302      	movs	r3, #2
 800b064:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d005      	beq.n	800b078 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	683a      	ldr	r2, [r7, #0]
 800b070:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800b074:	2300      	movs	r3, #0
 800b076:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b078:	7bfb      	ldrb	r3, [r7, #15]
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3714      	adds	r7, #20
 800b07e:	46bd      	mov	sp, r7
 800b080:	bc80      	pop	{r7}
 800b082:	4770      	bx	lr

0800b084 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b084:	b480      	push	{r7}
 800b086:	b087      	sub	sp, #28
 800b088:	af00      	add	r7, sp, #0
 800b08a:	60f8      	str	r0, [r7, #12]
 800b08c:	60b9      	str	r1, [r7, #8]
 800b08e:	4613      	mov	r3, r2
 800b090:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b098:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	68ba      	ldr	r2, [r7, #8]
 800b09e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b0a2:	88fa      	ldrh	r2, [r7, #6]
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800b0aa:	2300      	movs	r3, #0
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	371c      	adds	r7, #28
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bc80      	pop	{r7}
 800b0b4:	4770      	bx	lr

0800b0b6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b0b6:	b480      	push	{r7}
 800b0b8:	b085      	sub	sp, #20
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]
 800b0be:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0c6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	683a      	ldr	r2, [r7, #0]
 800b0cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800b0d0:	2300      	movs	r3, #0
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3714      	adds	r7, #20
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bc80      	pop	{r7}
 800b0da:	4770      	bx	lr

0800b0dc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b084      	sub	sp, #16
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d01c      	beq.n	800b130 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d115      	bne.n	800b12c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	2201      	movs	r2, #1
 800b104:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b11e:	b29b      	uxth	r3, r3
 800b120:	2181      	movs	r1, #129	; 0x81
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f004 fd0d 	bl	800fb42 <USBD_LL_Transmit>

      return USBD_OK;
 800b128:	2300      	movs	r3, #0
 800b12a:	e002      	b.n	800b132 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b12c:	2301      	movs	r3, #1
 800b12e:	e000      	b.n	800b132 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b130:	2302      	movs	r3, #2
  }
}
 800b132:	4618      	mov	r0, r3
 800b134:	3710      	adds	r7, #16
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}

0800b13a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b13a:	b580      	push	{r7, lr}
 800b13c:	b084      	sub	sp, #16
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b148:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b150:	2b00      	cmp	r3, #0
 800b152:	d017      	beq.n	800b184 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	7c1b      	ldrb	r3, [r3, #16]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d109      	bne.n	800b170 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b162:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b166:	2101      	movs	r1, #1
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f004 fd0d 	bl	800fb88 <USBD_LL_PrepareReceive>
 800b16e:	e007      	b.n	800b180 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b176:	2340      	movs	r3, #64	; 0x40
 800b178:	2101      	movs	r1, #1
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f004 fd04 	bl	800fb88 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b180:	2300      	movs	r3, #0
 800b182:	e000      	b.n	800b186 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b184:	2302      	movs	r3, #2
  }
}
 800b186:	4618      	mov	r0, r3
 800b188:	3710      	adds	r7, #16
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}

0800b18e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b18e:	b580      	push	{r7, lr}
 800b190:	b084      	sub	sp, #16
 800b192:	af00      	add	r7, sp, #0
 800b194:	60f8      	str	r0, [r7, #12]
 800b196:	60b9      	str	r1, [r7, #8]
 800b198:	4613      	mov	r3, r2
 800b19a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d101      	bne.n	800b1a6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b1a2:	2302      	movs	r3, #2
 800b1a4:	e01a      	b.n	800b1dc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d003      	beq.n	800b1b8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d003      	beq.n	800b1c6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	68ba      	ldr	r2, [r7, #8]
 800b1c2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2201      	movs	r2, #1
 800b1ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	79fa      	ldrb	r2, [r7, #7]
 800b1d2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b1d4:	68f8      	ldr	r0, [r7, #12]
 800b1d6:	f004 fb71 	bl	800f8bc <USBD_LL_Init>

  return USBD_OK;
 800b1da:	2300      	movs	r3, #0
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3710      	adds	r7, #16
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b085      	sub	sp, #20
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d006      	beq.n	800b206 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	683a      	ldr	r2, [r7, #0]
 800b1fc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800b200:	2300      	movs	r3, #0
 800b202:	73fb      	strb	r3, [r7, #15]
 800b204:	e001      	b.n	800b20a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b206:	2302      	movs	r3, #2
 800b208:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b20a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3714      	adds	r7, #20
 800b210:	46bd      	mov	sp, r7
 800b212:	bc80      	pop	{r7}
 800b214:	4770      	bx	lr

0800b216 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b216:	b580      	push	{r7, lr}
 800b218:	b082      	sub	sp, #8
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f004 fba6 	bl	800f970 <USBD_LL_Start>

  return USBD_OK;
 800b224:	2300      	movs	r3, #0
}
 800b226:	4618      	mov	r0, r3
 800b228:	3708      	adds	r7, #8
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}

0800b22e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b22e:	b480      	push	{r7}
 800b230:	b083      	sub	sp, #12
 800b232:	af00      	add	r7, sp, #0
 800b234:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b236:	2300      	movs	r3, #0
}
 800b238:	4618      	mov	r0, r3
 800b23a:	370c      	adds	r7, #12
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bc80      	pop	{r7}
 800b240:	4770      	bx	lr

0800b242 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b242:	b580      	push	{r7, lr}
 800b244:	b084      	sub	sp, #16
 800b246:	af00      	add	r7, sp, #0
 800b248:	6078      	str	r0, [r7, #4]
 800b24a:	460b      	mov	r3, r1
 800b24c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b24e:	2302      	movs	r3, #2
 800b250:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d00c      	beq.n	800b276 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	78fa      	ldrb	r2, [r7, #3]
 800b266:	4611      	mov	r1, r2
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	4798      	blx	r3
 800b26c:	4603      	mov	r3, r0
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d101      	bne.n	800b276 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b272:	2300      	movs	r3, #0
 800b274:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b276:	7bfb      	ldrb	r3, [r7, #15]
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3710      	adds	r7, #16
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b082      	sub	sp, #8
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	460b      	mov	r3, r1
 800b28a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	78fa      	ldrb	r2, [r7, #3]
 800b296:	4611      	mov	r1, r2
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	4798      	blx	r3

  return USBD_OK;
 800b29c:	2300      	movs	r3, #0
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3708      	adds	r7, #8
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}

0800b2a6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b2a6:	b580      	push	{r7, lr}
 800b2a8:	b082      	sub	sp, #8
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	6078      	str	r0, [r7, #4]
 800b2ae:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b2b6:	6839      	ldr	r1, [r7, #0]
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f000 fecb 	bl	800c054 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2201      	movs	r2, #1
 800b2c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b2cc:	461a      	mov	r2, r3
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b2da:	f003 031f 	and.w	r3, r3, #31
 800b2de:	2b01      	cmp	r3, #1
 800b2e0:	d00c      	beq.n	800b2fc <USBD_LL_SetupStage+0x56>
 800b2e2:	2b01      	cmp	r3, #1
 800b2e4:	d302      	bcc.n	800b2ec <USBD_LL_SetupStage+0x46>
 800b2e6:	2b02      	cmp	r3, #2
 800b2e8:	d010      	beq.n	800b30c <USBD_LL_SetupStage+0x66>
 800b2ea:	e017      	b.n	800b31c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f000 f9cb 	bl	800b690 <USBD_StdDevReq>
      break;
 800b2fa:	e01a      	b.n	800b332 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b302:	4619      	mov	r1, r3
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f000 fa2d 	bl	800b764 <USBD_StdItfReq>
      break;
 800b30a:	e012      	b.n	800b332 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b312:	4619      	mov	r1, r3
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 fa6b 	bl	800b7f0 <USBD_StdEPReq>
      break;
 800b31a:	e00a      	b.n	800b332 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b326:	b2db      	uxtb	r3, r3
 800b328:	4619      	mov	r1, r3
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f004 fb80 	bl	800fa30 <USBD_LL_StallEP>
      break;
 800b330:	bf00      	nop
  }

  return USBD_OK;
 800b332:	2300      	movs	r3, #0
}
 800b334:	4618      	mov	r0, r3
 800b336:	3708      	adds	r7, #8
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}

0800b33c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b086      	sub	sp, #24
 800b340:	af00      	add	r7, sp, #0
 800b342:	60f8      	str	r0, [r7, #12]
 800b344:	460b      	mov	r3, r1
 800b346:	607a      	str	r2, [r7, #4]
 800b348:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b34a:	7afb      	ldrb	r3, [r7, #11]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d14b      	bne.n	800b3e8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b356:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b35e:	2b03      	cmp	r3, #3
 800b360:	d134      	bne.n	800b3cc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	68da      	ldr	r2, [r3, #12]
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	691b      	ldr	r3, [r3, #16]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d919      	bls.n	800b3a2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	68da      	ldr	r2, [r3, #12]
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	691b      	ldr	r3, [r3, #16]
 800b376:	1ad2      	subs	r2, r2, r3
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	68da      	ldr	r2, [r3, #12]
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b384:	429a      	cmp	r2, r3
 800b386:	d203      	bcs.n	800b390 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b38c:	b29b      	uxth	r3, r3
 800b38e:	e002      	b.n	800b396 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b394:	b29b      	uxth	r3, r3
 800b396:	461a      	mov	r2, r3
 800b398:	6879      	ldr	r1, [r7, #4]
 800b39a:	68f8      	ldr	r0, [r7, #12]
 800b39c:	f000 ff4c 	bl	800c238 <USBD_CtlContinueRx>
 800b3a0:	e038      	b.n	800b414 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3a8:	691b      	ldr	r3, [r3, #16]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d00a      	beq.n	800b3c4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b3b4:	2b03      	cmp	r3, #3
 800b3b6:	d105      	bne.n	800b3c4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3be:	691b      	ldr	r3, [r3, #16]
 800b3c0:	68f8      	ldr	r0, [r7, #12]
 800b3c2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b3c4:	68f8      	ldr	r0, [r7, #12]
 800b3c6:	f000 ff49 	bl	800c25c <USBD_CtlSendStatus>
 800b3ca:	e023      	b.n	800b414 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b3d2:	2b05      	cmp	r3, #5
 800b3d4:	d11e      	bne.n	800b414 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b3de:	2100      	movs	r1, #0
 800b3e0:	68f8      	ldr	r0, [r7, #12]
 800b3e2:	f004 fb25 	bl	800fa30 <USBD_LL_StallEP>
 800b3e6:	e015      	b.n	800b414 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3ee:	699b      	ldr	r3, [r3, #24]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d00d      	beq.n	800b410 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b3fa:	2b03      	cmp	r3, #3
 800b3fc:	d108      	bne.n	800b410 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b404:	699b      	ldr	r3, [r3, #24]
 800b406:	7afa      	ldrb	r2, [r7, #11]
 800b408:	4611      	mov	r1, r2
 800b40a:	68f8      	ldr	r0, [r7, #12]
 800b40c:	4798      	blx	r3
 800b40e:	e001      	b.n	800b414 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b410:	2302      	movs	r3, #2
 800b412:	e000      	b.n	800b416 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b414:	2300      	movs	r3, #0
}
 800b416:	4618      	mov	r0, r3
 800b418:	3718      	adds	r7, #24
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}

0800b41e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b41e:	b580      	push	{r7, lr}
 800b420:	b086      	sub	sp, #24
 800b422:	af00      	add	r7, sp, #0
 800b424:	60f8      	str	r0, [r7, #12]
 800b426:	460b      	mov	r3, r1
 800b428:	607a      	str	r2, [r7, #4]
 800b42a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b42c:	7afb      	ldrb	r3, [r7, #11]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d17f      	bne.n	800b532 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	3314      	adds	r3, #20
 800b436:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b43e:	2b02      	cmp	r3, #2
 800b440:	d15c      	bne.n	800b4fc <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	68da      	ldr	r2, [r3, #12]
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	691b      	ldr	r3, [r3, #16]
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d915      	bls.n	800b47a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	68da      	ldr	r2, [r3, #12]
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	691b      	ldr	r3, [r3, #16]
 800b456:	1ad2      	subs	r2, r2, r3
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	68db      	ldr	r3, [r3, #12]
 800b460:	b29b      	uxth	r3, r3
 800b462:	461a      	mov	r2, r3
 800b464:	6879      	ldr	r1, [r7, #4]
 800b466:	68f8      	ldr	r0, [r7, #12]
 800b468:	f000 feb6 	bl	800c1d8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b46c:	2300      	movs	r3, #0
 800b46e:	2200      	movs	r2, #0
 800b470:	2100      	movs	r1, #0
 800b472:	68f8      	ldr	r0, [r7, #12]
 800b474:	f004 fb88 	bl	800fb88 <USBD_LL_PrepareReceive>
 800b478:	e04e      	b.n	800b518 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	689b      	ldr	r3, [r3, #8]
 800b47e:	697a      	ldr	r2, [r7, #20]
 800b480:	6912      	ldr	r2, [r2, #16]
 800b482:	fbb3 f1f2 	udiv	r1, r3, r2
 800b486:	fb02 f201 	mul.w	r2, r2, r1
 800b48a:	1a9b      	subs	r3, r3, r2
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d11c      	bne.n	800b4ca <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	689a      	ldr	r2, [r3, #8]
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b498:	429a      	cmp	r2, r3
 800b49a:	d316      	bcc.n	800b4ca <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	689a      	ldr	r2, [r3, #8]
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d20f      	bcs.n	800b4ca <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	2100      	movs	r1, #0
 800b4ae:	68f8      	ldr	r0, [r7, #12]
 800b4b0:	f000 fe92 	bl	800c1d8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b4bc:	2300      	movs	r3, #0
 800b4be:	2200      	movs	r2, #0
 800b4c0:	2100      	movs	r1, #0
 800b4c2:	68f8      	ldr	r0, [r7, #12]
 800b4c4:	f004 fb60 	bl	800fb88 <USBD_LL_PrepareReceive>
 800b4c8:	e026      	b.n	800b518 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4d0:	68db      	ldr	r3, [r3, #12]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d00a      	beq.n	800b4ec <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b4dc:	2b03      	cmp	r3, #3
 800b4de:	d105      	bne.n	800b4ec <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4e6:	68db      	ldr	r3, [r3, #12]
 800b4e8:	68f8      	ldr	r0, [r7, #12]
 800b4ea:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b4ec:	2180      	movs	r1, #128	; 0x80
 800b4ee:	68f8      	ldr	r0, [r7, #12]
 800b4f0:	f004 fa9e 	bl	800fa30 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b4f4:	68f8      	ldr	r0, [r7, #12]
 800b4f6:	f000 fec4 	bl	800c282 <USBD_CtlReceiveStatus>
 800b4fa:	e00d      	b.n	800b518 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b502:	2b04      	cmp	r3, #4
 800b504:	d004      	beq.n	800b510 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d103      	bne.n	800b518 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b510:	2180      	movs	r1, #128	; 0x80
 800b512:	68f8      	ldr	r0, [r7, #12]
 800b514:	f004 fa8c 	bl	800fa30 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d11d      	bne.n	800b55e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b522:	68f8      	ldr	r0, [r7, #12]
 800b524:	f7ff fe83 	bl	800b22e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	2200      	movs	r2, #0
 800b52c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b530:	e015      	b.n	800b55e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b538:	695b      	ldr	r3, [r3, #20]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d00d      	beq.n	800b55a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b544:	2b03      	cmp	r3, #3
 800b546:	d108      	bne.n	800b55a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b54e:	695b      	ldr	r3, [r3, #20]
 800b550:	7afa      	ldrb	r2, [r7, #11]
 800b552:	4611      	mov	r1, r2
 800b554:	68f8      	ldr	r0, [r7, #12]
 800b556:	4798      	blx	r3
 800b558:	e001      	b.n	800b55e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b55a:	2302      	movs	r3, #2
 800b55c:	e000      	b.n	800b560 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b55e:	2300      	movs	r3, #0
}
 800b560:	4618      	mov	r0, r3
 800b562:	3718      	adds	r7, #24
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b082      	sub	sp, #8
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b570:	2340      	movs	r3, #64	; 0x40
 800b572:	2200      	movs	r2, #0
 800b574:	2100      	movs	r1, #0
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f004 fa15 	bl	800f9a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2201      	movs	r2, #1
 800b580:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2240      	movs	r2, #64	; 0x40
 800b588:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b58c:	2340      	movs	r3, #64	; 0x40
 800b58e:	2200      	movs	r2, #0
 800b590:	2180      	movs	r1, #128	; 0x80
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f004 fa07 	bl	800f9a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2201      	movs	r2, #1
 800b59c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2240      	movs	r2, #64	; 0x40
 800b5a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d009      	beq.n	800b5e0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	687a      	ldr	r2, [r7, #4]
 800b5d6:	6852      	ldr	r2, [r2, #4]
 800b5d8:	b2d2      	uxtb	r2, r2
 800b5da:	4611      	mov	r1, r2
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	4798      	blx	r3
  }

  return USBD_OK;
 800b5e0:	2300      	movs	r3, #0
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3708      	adds	r7, #8
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}

0800b5ea <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b5ea:	b480      	push	{r7}
 800b5ec:	b083      	sub	sp, #12
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	6078      	str	r0, [r7, #4]
 800b5f2:	460b      	mov	r3, r1
 800b5f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	78fa      	ldrb	r2, [r7, #3]
 800b5fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b5fc:	2300      	movs	r3, #0
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	370c      	adds	r7, #12
 800b602:	46bd      	mov	sp, r7
 800b604:	bc80      	pop	{r7}
 800b606:	4770      	bx	lr

0800b608 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b608:	b480      	push	{r7}
 800b60a:	b083      	sub	sp, #12
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2204      	movs	r2, #4
 800b620:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b624:	2300      	movs	r3, #0
}
 800b626:	4618      	mov	r0, r3
 800b628:	370c      	adds	r7, #12
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bc80      	pop	{r7}
 800b62e:	4770      	bx	lr

0800b630 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b630:	b480      	push	{r7}
 800b632:	b083      	sub	sp, #12
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b63e:	2b04      	cmp	r3, #4
 800b640:	d105      	bne.n	800b64e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b64e:	2300      	movs	r3, #0
}
 800b650:	4618      	mov	r0, r3
 800b652:	370c      	adds	r7, #12
 800b654:	46bd      	mov	sp, r7
 800b656:	bc80      	pop	{r7}
 800b658:	4770      	bx	lr

0800b65a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b65a:	b580      	push	{r7, lr}
 800b65c:	b082      	sub	sp, #8
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b668:	2b03      	cmp	r3, #3
 800b66a:	d10b      	bne.n	800b684 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b672:	69db      	ldr	r3, [r3, #28]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d005      	beq.n	800b684 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b67e:	69db      	ldr	r3, [r3, #28]
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b684:	2300      	movs	r3, #0
}
 800b686:	4618      	mov	r0, r3
 800b688:	3708      	adds	r7, #8
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}
	...

0800b690 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b084      	sub	sp, #16
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b69a:	2300      	movs	r3, #0
 800b69c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	781b      	ldrb	r3, [r3, #0]
 800b6a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b6a6:	2b20      	cmp	r3, #32
 800b6a8:	d004      	beq.n	800b6b4 <USBD_StdDevReq+0x24>
 800b6aa:	2b40      	cmp	r3, #64	; 0x40
 800b6ac:	d002      	beq.n	800b6b4 <USBD_StdDevReq+0x24>
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d008      	beq.n	800b6c4 <USBD_StdDevReq+0x34>
 800b6b2:	e04c      	b.n	800b74e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6ba:	689b      	ldr	r3, [r3, #8]
 800b6bc:	6839      	ldr	r1, [r7, #0]
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	4798      	blx	r3
      break;
 800b6c2:	e049      	b.n	800b758 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	785b      	ldrb	r3, [r3, #1]
 800b6c8:	2b09      	cmp	r3, #9
 800b6ca:	d83a      	bhi.n	800b742 <USBD_StdDevReq+0xb2>
 800b6cc:	a201      	add	r2, pc, #4	; (adr r2, 800b6d4 <USBD_StdDevReq+0x44>)
 800b6ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6d2:	bf00      	nop
 800b6d4:	0800b725 	.word	0x0800b725
 800b6d8:	0800b739 	.word	0x0800b739
 800b6dc:	0800b743 	.word	0x0800b743
 800b6e0:	0800b72f 	.word	0x0800b72f
 800b6e4:	0800b743 	.word	0x0800b743
 800b6e8:	0800b707 	.word	0x0800b707
 800b6ec:	0800b6fd 	.word	0x0800b6fd
 800b6f0:	0800b743 	.word	0x0800b743
 800b6f4:	0800b71b 	.word	0x0800b71b
 800b6f8:	0800b711 	.word	0x0800b711
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b6fc:	6839      	ldr	r1, [r7, #0]
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f000 f9d4 	bl	800baac <USBD_GetDescriptor>
          break;
 800b704:	e022      	b.n	800b74c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b706:	6839      	ldr	r1, [r7, #0]
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f000 fb37 	bl	800bd7c <USBD_SetAddress>
          break;
 800b70e:	e01d      	b.n	800b74c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b710:	6839      	ldr	r1, [r7, #0]
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 fb74 	bl	800be00 <USBD_SetConfig>
          break;
 800b718:	e018      	b.n	800b74c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b71a:	6839      	ldr	r1, [r7, #0]
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 fbfd 	bl	800bf1c <USBD_GetConfig>
          break;
 800b722:	e013      	b.n	800b74c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b724:	6839      	ldr	r1, [r7, #0]
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f000 fc2c 	bl	800bf84 <USBD_GetStatus>
          break;
 800b72c:	e00e      	b.n	800b74c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b72e:	6839      	ldr	r1, [r7, #0]
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f000 fc5a 	bl	800bfea <USBD_SetFeature>
          break;
 800b736:	e009      	b.n	800b74c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b738:	6839      	ldr	r1, [r7, #0]
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 fc69 	bl	800c012 <USBD_ClrFeature>
          break;
 800b740:	e004      	b.n	800b74c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b742:	6839      	ldr	r1, [r7, #0]
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f000 fcc1 	bl	800c0cc <USBD_CtlError>
          break;
 800b74a:	bf00      	nop
      }
      break;
 800b74c:	e004      	b.n	800b758 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b74e:	6839      	ldr	r1, [r7, #0]
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f000 fcbb 	bl	800c0cc <USBD_CtlError>
      break;
 800b756:	bf00      	nop
  }

  return ret;
 800b758:	7bfb      	ldrb	r3, [r7, #15]
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3710      	adds	r7, #16
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
 800b762:	bf00      	nop

0800b764 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b084      	sub	sp, #16
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b76e:	2300      	movs	r3, #0
 800b770:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	781b      	ldrb	r3, [r3, #0]
 800b776:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b77a:	2b20      	cmp	r3, #32
 800b77c:	d003      	beq.n	800b786 <USBD_StdItfReq+0x22>
 800b77e:	2b40      	cmp	r3, #64	; 0x40
 800b780:	d001      	beq.n	800b786 <USBD_StdItfReq+0x22>
 800b782:	2b00      	cmp	r3, #0
 800b784:	d12a      	bne.n	800b7dc <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b78c:	3b01      	subs	r3, #1
 800b78e:	2b02      	cmp	r3, #2
 800b790:	d81d      	bhi.n	800b7ce <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	889b      	ldrh	r3, [r3, #4]
 800b796:	b2db      	uxtb	r3, r3
 800b798:	2b01      	cmp	r3, #1
 800b79a:	d813      	bhi.n	800b7c4 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7a2:	689b      	ldr	r3, [r3, #8]
 800b7a4:	6839      	ldr	r1, [r7, #0]
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	4798      	blx	r3
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	88db      	ldrh	r3, [r3, #6]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d110      	bne.n	800b7d8 <USBD_StdItfReq+0x74>
 800b7b6:	7bfb      	ldrb	r3, [r7, #15]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d10d      	bne.n	800b7d8 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f000 fd4d 	bl	800c25c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b7c2:	e009      	b.n	800b7d8 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800b7c4:	6839      	ldr	r1, [r7, #0]
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f000 fc80 	bl	800c0cc <USBD_CtlError>
          break;
 800b7cc:	e004      	b.n	800b7d8 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800b7ce:	6839      	ldr	r1, [r7, #0]
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f000 fc7b 	bl	800c0cc <USBD_CtlError>
          break;
 800b7d6:	e000      	b.n	800b7da <USBD_StdItfReq+0x76>
          break;
 800b7d8:	bf00      	nop
      }
      break;
 800b7da:	e004      	b.n	800b7e6 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800b7dc:	6839      	ldr	r1, [r7, #0]
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f000 fc74 	bl	800c0cc <USBD_CtlError>
      break;
 800b7e4:	bf00      	nop
  }

  return USBD_OK;
 800b7e6:	2300      	movs	r3, #0
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3710      	adds	r7, #16
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b084      	sub	sp, #16
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	889b      	ldrh	r3, [r3, #4]
 800b802:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b80c:	2b20      	cmp	r3, #32
 800b80e:	d004      	beq.n	800b81a <USBD_StdEPReq+0x2a>
 800b810:	2b40      	cmp	r3, #64	; 0x40
 800b812:	d002      	beq.n	800b81a <USBD_StdEPReq+0x2a>
 800b814:	2b00      	cmp	r3, #0
 800b816:	d008      	beq.n	800b82a <USBD_StdEPReq+0x3a>
 800b818:	e13d      	b.n	800ba96 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b820:	689b      	ldr	r3, [r3, #8]
 800b822:	6839      	ldr	r1, [r7, #0]
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	4798      	blx	r3
      break;
 800b828:	e13a      	b.n	800baa0 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	781b      	ldrb	r3, [r3, #0]
 800b82e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b832:	2b20      	cmp	r3, #32
 800b834:	d10a      	bne.n	800b84c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b83c:	689b      	ldr	r3, [r3, #8]
 800b83e:	6839      	ldr	r1, [r7, #0]
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	4798      	blx	r3
 800b844:	4603      	mov	r3, r0
 800b846:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b848:	7bfb      	ldrb	r3, [r7, #15]
 800b84a:	e12a      	b.n	800baa2 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	785b      	ldrb	r3, [r3, #1]
 800b850:	2b01      	cmp	r3, #1
 800b852:	d03e      	beq.n	800b8d2 <USBD_StdEPReq+0xe2>
 800b854:	2b03      	cmp	r3, #3
 800b856:	d002      	beq.n	800b85e <USBD_StdEPReq+0x6e>
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d070      	beq.n	800b93e <USBD_StdEPReq+0x14e>
 800b85c:	e115      	b.n	800ba8a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b864:	2b02      	cmp	r3, #2
 800b866:	d002      	beq.n	800b86e <USBD_StdEPReq+0x7e>
 800b868:	2b03      	cmp	r3, #3
 800b86a:	d015      	beq.n	800b898 <USBD_StdEPReq+0xa8>
 800b86c:	e02b      	b.n	800b8c6 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b86e:	7bbb      	ldrb	r3, [r7, #14]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d00c      	beq.n	800b88e <USBD_StdEPReq+0x9e>
 800b874:	7bbb      	ldrb	r3, [r7, #14]
 800b876:	2b80      	cmp	r3, #128	; 0x80
 800b878:	d009      	beq.n	800b88e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b87a:	7bbb      	ldrb	r3, [r7, #14]
 800b87c:	4619      	mov	r1, r3
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f004 f8d6 	bl	800fa30 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b884:	2180      	movs	r1, #128	; 0x80
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f004 f8d2 	bl	800fa30 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b88c:	e020      	b.n	800b8d0 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800b88e:	6839      	ldr	r1, [r7, #0]
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f000 fc1b 	bl	800c0cc <USBD_CtlError>
              break;
 800b896:	e01b      	b.n	800b8d0 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	885b      	ldrh	r3, [r3, #2]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d10e      	bne.n	800b8be <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800b8a0:	7bbb      	ldrb	r3, [r7, #14]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d00b      	beq.n	800b8be <USBD_StdEPReq+0xce>
 800b8a6:	7bbb      	ldrb	r3, [r7, #14]
 800b8a8:	2b80      	cmp	r3, #128	; 0x80
 800b8aa:	d008      	beq.n	800b8be <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	88db      	ldrh	r3, [r3, #6]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d104      	bne.n	800b8be <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b8b4:	7bbb      	ldrb	r3, [r7, #14]
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f004 f8b9 	bl	800fa30 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 fccc 	bl	800c25c <USBD_CtlSendStatus>

              break;
 800b8c4:	e004      	b.n	800b8d0 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800b8c6:	6839      	ldr	r1, [r7, #0]
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 fbff 	bl	800c0cc <USBD_CtlError>
              break;
 800b8ce:	bf00      	nop
          }
          break;
 800b8d0:	e0e0      	b.n	800ba94 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8d8:	2b02      	cmp	r3, #2
 800b8da:	d002      	beq.n	800b8e2 <USBD_StdEPReq+0xf2>
 800b8dc:	2b03      	cmp	r3, #3
 800b8de:	d015      	beq.n	800b90c <USBD_StdEPReq+0x11c>
 800b8e0:	e026      	b.n	800b930 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b8e2:	7bbb      	ldrb	r3, [r7, #14]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d00c      	beq.n	800b902 <USBD_StdEPReq+0x112>
 800b8e8:	7bbb      	ldrb	r3, [r7, #14]
 800b8ea:	2b80      	cmp	r3, #128	; 0x80
 800b8ec:	d009      	beq.n	800b902 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b8ee:	7bbb      	ldrb	r3, [r7, #14]
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f004 f89c 	bl	800fa30 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b8f8:	2180      	movs	r1, #128	; 0x80
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f004 f898 	bl	800fa30 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b900:	e01c      	b.n	800b93c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800b902:	6839      	ldr	r1, [r7, #0]
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f000 fbe1 	bl	800c0cc <USBD_CtlError>
              break;
 800b90a:	e017      	b.n	800b93c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	885b      	ldrh	r3, [r3, #2]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d112      	bne.n	800b93a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b914:	7bbb      	ldrb	r3, [r7, #14]
 800b916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d004      	beq.n	800b928 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b91e:	7bbb      	ldrb	r3, [r7, #14]
 800b920:	4619      	mov	r1, r3
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f004 f8a3 	bl	800fa6e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f000 fc97 	bl	800c25c <USBD_CtlSendStatus>
              }
              break;
 800b92e:	e004      	b.n	800b93a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800b930:	6839      	ldr	r1, [r7, #0]
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f000 fbca 	bl	800c0cc <USBD_CtlError>
              break;
 800b938:	e000      	b.n	800b93c <USBD_StdEPReq+0x14c>
              break;
 800b93a:	bf00      	nop
          }
          break;
 800b93c:	e0aa      	b.n	800ba94 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b944:	2b02      	cmp	r3, #2
 800b946:	d002      	beq.n	800b94e <USBD_StdEPReq+0x15e>
 800b948:	2b03      	cmp	r3, #3
 800b94a:	d032      	beq.n	800b9b2 <USBD_StdEPReq+0x1c2>
 800b94c:	e097      	b.n	800ba7e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b94e:	7bbb      	ldrb	r3, [r7, #14]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d007      	beq.n	800b964 <USBD_StdEPReq+0x174>
 800b954:	7bbb      	ldrb	r3, [r7, #14]
 800b956:	2b80      	cmp	r3, #128	; 0x80
 800b958:	d004      	beq.n	800b964 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800b95a:	6839      	ldr	r1, [r7, #0]
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f000 fbb5 	bl	800c0cc <USBD_CtlError>
                break;
 800b962:	e091      	b.n	800ba88 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b964:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	da0b      	bge.n	800b984 <USBD_StdEPReq+0x194>
 800b96c:	7bbb      	ldrb	r3, [r7, #14]
 800b96e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b972:	4613      	mov	r3, r2
 800b974:	009b      	lsls	r3, r3, #2
 800b976:	4413      	add	r3, r2
 800b978:	009b      	lsls	r3, r3, #2
 800b97a:	3310      	adds	r3, #16
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	4413      	add	r3, r2
 800b980:	3304      	adds	r3, #4
 800b982:	e00b      	b.n	800b99c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b984:	7bbb      	ldrb	r3, [r7, #14]
 800b986:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b98a:	4613      	mov	r3, r2
 800b98c:	009b      	lsls	r3, r3, #2
 800b98e:	4413      	add	r3, r2
 800b990:	009b      	lsls	r3, r3, #2
 800b992:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b996:	687a      	ldr	r2, [r7, #4]
 800b998:	4413      	add	r3, r2
 800b99a:	3304      	adds	r3, #4
 800b99c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	2202      	movs	r2, #2
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f000 fbf8 	bl	800c1a0 <USBD_CtlSendData>
              break;
 800b9b0:	e06a      	b.n	800ba88 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b9b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	da11      	bge.n	800b9de <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b9ba:	7bbb      	ldrb	r3, [r7, #14]
 800b9bc:	f003 020f 	and.w	r2, r3, #15
 800b9c0:	6879      	ldr	r1, [r7, #4]
 800b9c2:	4613      	mov	r3, r2
 800b9c4:	009b      	lsls	r3, r3, #2
 800b9c6:	4413      	add	r3, r2
 800b9c8:	009b      	lsls	r3, r3, #2
 800b9ca:	440b      	add	r3, r1
 800b9cc:	3318      	adds	r3, #24
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d117      	bne.n	800ba04 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800b9d4:	6839      	ldr	r1, [r7, #0]
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f000 fb78 	bl	800c0cc <USBD_CtlError>
                  break;
 800b9dc:	e054      	b.n	800ba88 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b9de:	7bbb      	ldrb	r3, [r7, #14]
 800b9e0:	f003 020f 	and.w	r2, r3, #15
 800b9e4:	6879      	ldr	r1, [r7, #4]
 800b9e6:	4613      	mov	r3, r2
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	4413      	add	r3, r2
 800b9ec:	009b      	lsls	r3, r3, #2
 800b9ee:	440b      	add	r3, r1
 800b9f0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d104      	bne.n	800ba04 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800b9fa:	6839      	ldr	r1, [r7, #0]
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 fb65 	bl	800c0cc <USBD_CtlError>
                  break;
 800ba02:	e041      	b.n	800ba88 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	da0b      	bge.n	800ba24 <USBD_StdEPReq+0x234>
 800ba0c:	7bbb      	ldrb	r3, [r7, #14]
 800ba0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba12:	4613      	mov	r3, r2
 800ba14:	009b      	lsls	r3, r3, #2
 800ba16:	4413      	add	r3, r2
 800ba18:	009b      	lsls	r3, r3, #2
 800ba1a:	3310      	adds	r3, #16
 800ba1c:	687a      	ldr	r2, [r7, #4]
 800ba1e:	4413      	add	r3, r2
 800ba20:	3304      	adds	r3, #4
 800ba22:	e00b      	b.n	800ba3c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ba24:	7bbb      	ldrb	r3, [r7, #14]
 800ba26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba2a:	4613      	mov	r3, r2
 800ba2c:	009b      	lsls	r3, r3, #2
 800ba2e:	4413      	add	r3, r2
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ba36:	687a      	ldr	r2, [r7, #4]
 800ba38:	4413      	add	r3, r2
 800ba3a:	3304      	adds	r3, #4
 800ba3c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ba3e:	7bbb      	ldrb	r3, [r7, #14]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d002      	beq.n	800ba4a <USBD_StdEPReq+0x25a>
 800ba44:	7bbb      	ldrb	r3, [r7, #14]
 800ba46:	2b80      	cmp	r3, #128	; 0x80
 800ba48:	d103      	bne.n	800ba52 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	601a      	str	r2, [r3, #0]
 800ba50:	e00e      	b.n	800ba70 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800ba52:	7bbb      	ldrb	r3, [r7, #14]
 800ba54:	4619      	mov	r1, r3
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f004 f828 	bl	800faac <USBD_LL_IsStallEP>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d003      	beq.n	800ba6a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	2201      	movs	r2, #1
 800ba66:	601a      	str	r2, [r3, #0]
 800ba68:	e002      	b.n	800ba70 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	2202      	movs	r2, #2
 800ba74:	4619      	mov	r1, r3
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f000 fb92 	bl	800c1a0 <USBD_CtlSendData>
              break;
 800ba7c:	e004      	b.n	800ba88 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800ba7e:	6839      	ldr	r1, [r7, #0]
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f000 fb23 	bl	800c0cc <USBD_CtlError>
              break;
 800ba86:	bf00      	nop
          }
          break;
 800ba88:	e004      	b.n	800ba94 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800ba8a:	6839      	ldr	r1, [r7, #0]
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 fb1d 	bl	800c0cc <USBD_CtlError>
          break;
 800ba92:	bf00      	nop
      }
      break;
 800ba94:	e004      	b.n	800baa0 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800ba96:	6839      	ldr	r1, [r7, #0]
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f000 fb17 	bl	800c0cc <USBD_CtlError>
      break;
 800ba9e:	bf00      	nop
  }

  return ret;
 800baa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3710      	adds	r7, #16
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
	...

0800baac <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b084      	sub	sp, #16
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bab6:	2300      	movs	r3, #0
 800bab8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800baba:	2300      	movs	r3, #0
 800babc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800babe:	2300      	movs	r3, #0
 800bac0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	885b      	ldrh	r3, [r3, #2]
 800bac6:	0a1b      	lsrs	r3, r3, #8
 800bac8:	b29b      	uxth	r3, r3
 800baca:	3b01      	subs	r3, #1
 800bacc:	2b06      	cmp	r3, #6
 800bace:	f200 8128 	bhi.w	800bd22 <USBD_GetDescriptor+0x276>
 800bad2:	a201      	add	r2, pc, #4	; (adr r2, 800bad8 <USBD_GetDescriptor+0x2c>)
 800bad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bad8:	0800baf5 	.word	0x0800baf5
 800badc:	0800bb0d 	.word	0x0800bb0d
 800bae0:	0800bb4d 	.word	0x0800bb4d
 800bae4:	0800bd23 	.word	0x0800bd23
 800bae8:	0800bd23 	.word	0x0800bd23
 800baec:	0800bcc3 	.word	0x0800bcc3
 800baf0:	0800bcef 	.word	0x0800bcef
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	687a      	ldr	r2, [r7, #4]
 800bafe:	7c12      	ldrb	r2, [r2, #16]
 800bb00:	f107 0108 	add.w	r1, r7, #8
 800bb04:	4610      	mov	r0, r2
 800bb06:	4798      	blx	r3
 800bb08:	60f8      	str	r0, [r7, #12]
      break;
 800bb0a:	e112      	b.n	800bd32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	7c1b      	ldrb	r3, [r3, #16]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d10d      	bne.n	800bb30 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb1c:	f107 0208 	add.w	r2, r7, #8
 800bb20:	4610      	mov	r0, r2
 800bb22:	4798      	blx	r3
 800bb24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	3301      	adds	r3, #1
 800bb2a:	2202      	movs	r2, #2
 800bb2c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bb2e:	e100      	b.n	800bd32 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb38:	f107 0208 	add.w	r2, r7, #8
 800bb3c:	4610      	mov	r0, r2
 800bb3e:	4798      	blx	r3
 800bb40:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	3301      	adds	r3, #1
 800bb46:	2202      	movs	r2, #2
 800bb48:	701a      	strb	r2, [r3, #0]
      break;
 800bb4a:	e0f2      	b.n	800bd32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	885b      	ldrh	r3, [r3, #2]
 800bb50:	b2db      	uxtb	r3, r3
 800bb52:	2b05      	cmp	r3, #5
 800bb54:	f200 80ac 	bhi.w	800bcb0 <USBD_GetDescriptor+0x204>
 800bb58:	a201      	add	r2, pc, #4	; (adr r2, 800bb60 <USBD_GetDescriptor+0xb4>)
 800bb5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb5e:	bf00      	nop
 800bb60:	0800bb79 	.word	0x0800bb79
 800bb64:	0800bbad 	.word	0x0800bbad
 800bb68:	0800bbe1 	.word	0x0800bbe1
 800bb6c:	0800bc15 	.word	0x0800bc15
 800bb70:	0800bc49 	.word	0x0800bc49
 800bb74:	0800bc7d 	.word	0x0800bc7d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d00b      	beq.n	800bb9c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bb8a:	685b      	ldr	r3, [r3, #4]
 800bb8c:	687a      	ldr	r2, [r7, #4]
 800bb8e:	7c12      	ldrb	r2, [r2, #16]
 800bb90:	f107 0108 	add.w	r1, r7, #8
 800bb94:	4610      	mov	r0, r2
 800bb96:	4798      	blx	r3
 800bb98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb9a:	e091      	b.n	800bcc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb9c:	6839      	ldr	r1, [r7, #0]
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 fa94 	bl	800c0cc <USBD_CtlError>
            err++;
 800bba4:	7afb      	ldrb	r3, [r7, #11]
 800bba6:	3301      	adds	r3, #1
 800bba8:	72fb      	strb	r3, [r7, #11]
          break;
 800bbaa:	e089      	b.n	800bcc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bbb2:	689b      	ldr	r3, [r3, #8]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d00b      	beq.n	800bbd0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bbbe:	689b      	ldr	r3, [r3, #8]
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	7c12      	ldrb	r2, [r2, #16]
 800bbc4:	f107 0108 	add.w	r1, r7, #8
 800bbc8:	4610      	mov	r0, r2
 800bbca:	4798      	blx	r3
 800bbcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbce:	e077      	b.n	800bcc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bbd0:	6839      	ldr	r1, [r7, #0]
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f000 fa7a 	bl	800c0cc <USBD_CtlError>
            err++;
 800bbd8:	7afb      	ldrb	r3, [r7, #11]
 800bbda:	3301      	adds	r3, #1
 800bbdc:	72fb      	strb	r3, [r7, #11]
          break;
 800bbde:	e06f      	b.n	800bcc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bbe6:	68db      	ldr	r3, [r3, #12]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d00b      	beq.n	800bc04 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bbf2:	68db      	ldr	r3, [r3, #12]
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	7c12      	ldrb	r2, [r2, #16]
 800bbf8:	f107 0108 	add.w	r1, r7, #8
 800bbfc:	4610      	mov	r0, r2
 800bbfe:	4798      	blx	r3
 800bc00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc02:	e05d      	b.n	800bcc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc04:	6839      	ldr	r1, [r7, #0]
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 fa60 	bl	800c0cc <USBD_CtlError>
            err++;
 800bc0c:	7afb      	ldrb	r3, [r7, #11]
 800bc0e:	3301      	adds	r3, #1
 800bc10:	72fb      	strb	r3, [r7, #11]
          break;
 800bc12:	e055      	b.n	800bcc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc1a:	691b      	ldr	r3, [r3, #16]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d00b      	beq.n	800bc38 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc26:	691b      	ldr	r3, [r3, #16]
 800bc28:	687a      	ldr	r2, [r7, #4]
 800bc2a:	7c12      	ldrb	r2, [r2, #16]
 800bc2c:	f107 0108 	add.w	r1, r7, #8
 800bc30:	4610      	mov	r0, r2
 800bc32:	4798      	blx	r3
 800bc34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc36:	e043      	b.n	800bcc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc38:	6839      	ldr	r1, [r7, #0]
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f000 fa46 	bl	800c0cc <USBD_CtlError>
            err++;
 800bc40:	7afb      	ldrb	r3, [r7, #11]
 800bc42:	3301      	adds	r3, #1
 800bc44:	72fb      	strb	r3, [r7, #11]
          break;
 800bc46:	e03b      	b.n	800bcc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc4e:	695b      	ldr	r3, [r3, #20]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d00b      	beq.n	800bc6c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc5a:	695b      	ldr	r3, [r3, #20]
 800bc5c:	687a      	ldr	r2, [r7, #4]
 800bc5e:	7c12      	ldrb	r2, [r2, #16]
 800bc60:	f107 0108 	add.w	r1, r7, #8
 800bc64:	4610      	mov	r0, r2
 800bc66:	4798      	blx	r3
 800bc68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc6a:	e029      	b.n	800bcc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc6c:	6839      	ldr	r1, [r7, #0]
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f000 fa2c 	bl	800c0cc <USBD_CtlError>
            err++;
 800bc74:	7afb      	ldrb	r3, [r7, #11]
 800bc76:	3301      	adds	r3, #1
 800bc78:	72fb      	strb	r3, [r7, #11]
          break;
 800bc7a:	e021      	b.n	800bcc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc82:	699b      	ldr	r3, [r3, #24]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d00b      	beq.n	800bca0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc8e:	699b      	ldr	r3, [r3, #24]
 800bc90:	687a      	ldr	r2, [r7, #4]
 800bc92:	7c12      	ldrb	r2, [r2, #16]
 800bc94:	f107 0108 	add.w	r1, r7, #8
 800bc98:	4610      	mov	r0, r2
 800bc9a:	4798      	blx	r3
 800bc9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc9e:	e00f      	b.n	800bcc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bca0:	6839      	ldr	r1, [r7, #0]
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f000 fa12 	bl	800c0cc <USBD_CtlError>
            err++;
 800bca8:	7afb      	ldrb	r3, [r7, #11]
 800bcaa:	3301      	adds	r3, #1
 800bcac:	72fb      	strb	r3, [r7, #11]
          break;
 800bcae:	e007      	b.n	800bcc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800bcb0:	6839      	ldr	r1, [r7, #0]
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f000 fa0a 	bl	800c0cc <USBD_CtlError>
          err++;
 800bcb8:	7afb      	ldrb	r3, [r7, #11]
 800bcba:	3301      	adds	r3, #1
 800bcbc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800bcbe:	e038      	b.n	800bd32 <USBD_GetDescriptor+0x286>
 800bcc0:	e037      	b.n	800bd32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	7c1b      	ldrb	r3, [r3, #16]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d109      	bne.n	800bcde <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcd2:	f107 0208 	add.w	r2, r7, #8
 800bcd6:	4610      	mov	r0, r2
 800bcd8:	4798      	blx	r3
 800bcda:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bcdc:	e029      	b.n	800bd32 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bcde:	6839      	ldr	r1, [r7, #0]
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f000 f9f3 	bl	800c0cc <USBD_CtlError>
        err++;
 800bce6:	7afb      	ldrb	r3, [r7, #11]
 800bce8:	3301      	adds	r3, #1
 800bcea:	72fb      	strb	r3, [r7, #11]
      break;
 800bcec:	e021      	b.n	800bd32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	7c1b      	ldrb	r3, [r3, #16]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d10d      	bne.n	800bd12 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcfe:	f107 0208 	add.w	r2, r7, #8
 800bd02:	4610      	mov	r0, r2
 800bd04:	4798      	blx	r3
 800bd06:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	3301      	adds	r3, #1
 800bd0c:	2207      	movs	r2, #7
 800bd0e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd10:	e00f      	b.n	800bd32 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bd12:	6839      	ldr	r1, [r7, #0]
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f000 f9d9 	bl	800c0cc <USBD_CtlError>
        err++;
 800bd1a:	7afb      	ldrb	r3, [r7, #11]
 800bd1c:	3301      	adds	r3, #1
 800bd1e:	72fb      	strb	r3, [r7, #11]
      break;
 800bd20:	e007      	b.n	800bd32 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bd22:	6839      	ldr	r1, [r7, #0]
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f000 f9d1 	bl	800c0cc <USBD_CtlError>
      err++;
 800bd2a:	7afb      	ldrb	r3, [r7, #11]
 800bd2c:	3301      	adds	r3, #1
 800bd2e:	72fb      	strb	r3, [r7, #11]
      break;
 800bd30:	bf00      	nop
  }

  if (err != 0U)
 800bd32:	7afb      	ldrb	r3, [r7, #11]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d11c      	bne.n	800bd72 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800bd38:	893b      	ldrh	r3, [r7, #8]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d011      	beq.n	800bd62 <USBD_GetDescriptor+0x2b6>
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	88db      	ldrh	r3, [r3, #6]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d00d      	beq.n	800bd62 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	88da      	ldrh	r2, [r3, #6]
 800bd4a:	893b      	ldrh	r3, [r7, #8]
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	bf28      	it	cs
 800bd50:	4613      	movcs	r3, r2
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bd56:	893b      	ldrh	r3, [r7, #8]
 800bd58:	461a      	mov	r2, r3
 800bd5a:	68f9      	ldr	r1, [r7, #12]
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f000 fa1f 	bl	800c1a0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	88db      	ldrh	r3, [r3, #6]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d104      	bne.n	800bd74 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f000 fa76 	bl	800c25c <USBD_CtlSendStatus>
 800bd70:	e000      	b.n	800bd74 <USBD_GetDescriptor+0x2c8>
    return;
 800bd72:	bf00      	nop
    }
  }
}
 800bd74:	3710      	adds	r7, #16
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
 800bd7a:	bf00      	nop

0800bd7c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b084      	sub	sp, #16
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	889b      	ldrh	r3, [r3, #4]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d130      	bne.n	800bdf0 <USBD_SetAddress+0x74>
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	88db      	ldrh	r3, [r3, #6]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d12c      	bne.n	800bdf0 <USBD_SetAddress+0x74>
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	885b      	ldrh	r3, [r3, #2]
 800bd9a:	2b7f      	cmp	r3, #127	; 0x7f
 800bd9c:	d828      	bhi.n	800bdf0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	885b      	ldrh	r3, [r3, #2]
 800bda2:	b2db      	uxtb	r3, r3
 800bda4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bda8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdb0:	2b03      	cmp	r3, #3
 800bdb2:	d104      	bne.n	800bdbe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800bdb4:	6839      	ldr	r1, [r7, #0]
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f000 f988 	bl	800c0cc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdbc:	e01c      	b.n	800bdf8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	7bfa      	ldrb	r2, [r7, #15]
 800bdc2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bdc6:	7bfb      	ldrb	r3, [r7, #15]
 800bdc8:	4619      	mov	r1, r3
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f003 fe9a 	bl	800fb04 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f000 fa43 	bl	800c25c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bdd6:	7bfb      	ldrb	r3, [r7, #15]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d004      	beq.n	800bde6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2202      	movs	r2, #2
 800bde0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bde4:	e008      	b.n	800bdf8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2201      	movs	r2, #1
 800bdea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdee:	e003      	b.n	800bdf8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bdf0:	6839      	ldr	r1, [r7, #0]
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f000 f96a 	bl	800c0cc <USBD_CtlError>
  }
}
 800bdf8:	bf00      	nop
 800bdfa:	3710      	adds	r7, #16
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	885b      	ldrh	r3, [r3, #2]
 800be0e:	b2da      	uxtb	r2, r3
 800be10:	4b41      	ldr	r3, [pc, #260]	; (800bf18 <USBD_SetConfig+0x118>)
 800be12:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800be14:	4b40      	ldr	r3, [pc, #256]	; (800bf18 <USBD_SetConfig+0x118>)
 800be16:	781b      	ldrb	r3, [r3, #0]
 800be18:	2b01      	cmp	r3, #1
 800be1a:	d904      	bls.n	800be26 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800be1c:	6839      	ldr	r1, [r7, #0]
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f000 f954 	bl	800c0cc <USBD_CtlError>
 800be24:	e075      	b.n	800bf12 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be2c:	2b02      	cmp	r3, #2
 800be2e:	d002      	beq.n	800be36 <USBD_SetConfig+0x36>
 800be30:	2b03      	cmp	r3, #3
 800be32:	d023      	beq.n	800be7c <USBD_SetConfig+0x7c>
 800be34:	e062      	b.n	800befc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800be36:	4b38      	ldr	r3, [pc, #224]	; (800bf18 <USBD_SetConfig+0x118>)
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d01a      	beq.n	800be74 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800be3e:	4b36      	ldr	r3, [pc, #216]	; (800bf18 <USBD_SetConfig+0x118>)
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	461a      	mov	r2, r3
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2203      	movs	r2, #3
 800be4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800be50:	4b31      	ldr	r3, [pc, #196]	; (800bf18 <USBD_SetConfig+0x118>)
 800be52:	781b      	ldrb	r3, [r3, #0]
 800be54:	4619      	mov	r1, r3
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f7ff f9f3 	bl	800b242 <USBD_SetClassConfig>
 800be5c:	4603      	mov	r3, r0
 800be5e:	2b02      	cmp	r3, #2
 800be60:	d104      	bne.n	800be6c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800be62:	6839      	ldr	r1, [r7, #0]
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f000 f931 	bl	800c0cc <USBD_CtlError>
            return;
 800be6a:	e052      	b.n	800bf12 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f000 f9f5 	bl	800c25c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800be72:	e04e      	b.n	800bf12 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f000 f9f1 	bl	800c25c <USBD_CtlSendStatus>
        break;
 800be7a:	e04a      	b.n	800bf12 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800be7c:	4b26      	ldr	r3, [pc, #152]	; (800bf18 <USBD_SetConfig+0x118>)
 800be7e:	781b      	ldrb	r3, [r3, #0]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d112      	bne.n	800beaa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2202      	movs	r2, #2
 800be88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800be8c:	4b22      	ldr	r3, [pc, #136]	; (800bf18 <USBD_SetConfig+0x118>)
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	461a      	mov	r2, r3
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800be96:	4b20      	ldr	r3, [pc, #128]	; (800bf18 <USBD_SetConfig+0x118>)
 800be98:	781b      	ldrb	r3, [r3, #0]
 800be9a:	4619      	mov	r1, r3
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f7ff f9ef 	bl	800b280 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f000 f9da 	bl	800c25c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bea8:	e033      	b.n	800bf12 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800beaa:	4b1b      	ldr	r3, [pc, #108]	; (800bf18 <USBD_SetConfig+0x118>)
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	461a      	mov	r2, r3
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	685b      	ldr	r3, [r3, #4]
 800beb4:	429a      	cmp	r2, r3
 800beb6:	d01d      	beq.n	800bef4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	685b      	ldr	r3, [r3, #4]
 800bebc:	b2db      	uxtb	r3, r3
 800bebe:	4619      	mov	r1, r3
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f7ff f9dd 	bl	800b280 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800bec6:	4b14      	ldr	r3, [pc, #80]	; (800bf18 <USBD_SetConfig+0x118>)
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	461a      	mov	r2, r3
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bed0:	4b11      	ldr	r3, [pc, #68]	; (800bf18 <USBD_SetConfig+0x118>)
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	4619      	mov	r1, r3
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f7ff f9b3 	bl	800b242 <USBD_SetClassConfig>
 800bedc:	4603      	mov	r3, r0
 800bede:	2b02      	cmp	r3, #2
 800bee0:	d104      	bne.n	800beec <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800bee2:	6839      	ldr	r1, [r7, #0]
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 f8f1 	bl	800c0cc <USBD_CtlError>
            return;
 800beea:	e012      	b.n	800bf12 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f000 f9b5 	bl	800c25c <USBD_CtlSendStatus>
        break;
 800bef2:	e00e      	b.n	800bf12 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f000 f9b1 	bl	800c25c <USBD_CtlSendStatus>
        break;
 800befa:	e00a      	b.n	800bf12 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800befc:	6839      	ldr	r1, [r7, #0]
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f000 f8e4 	bl	800c0cc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800bf04:	4b04      	ldr	r3, [pc, #16]	; (800bf18 <USBD_SetConfig+0x118>)
 800bf06:	781b      	ldrb	r3, [r3, #0]
 800bf08:	4619      	mov	r1, r3
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f7ff f9b8 	bl	800b280 <USBD_ClrClassConfig>
        break;
 800bf10:	bf00      	nop
    }
  }
}
 800bf12:	3708      	adds	r7, #8
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}
 800bf18:	20000220 	.word	0x20000220

0800bf1c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b082      	sub	sp, #8
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	88db      	ldrh	r3, [r3, #6]
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d004      	beq.n	800bf38 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bf2e:	6839      	ldr	r1, [r7, #0]
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f000 f8cb 	bl	800c0cc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bf36:	e021      	b.n	800bf7c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	db17      	blt.n	800bf72 <USBD_GetConfig+0x56>
 800bf42:	2b02      	cmp	r3, #2
 800bf44:	dd02      	ble.n	800bf4c <USBD_GetConfig+0x30>
 800bf46:	2b03      	cmp	r3, #3
 800bf48:	d00b      	beq.n	800bf62 <USBD_GetConfig+0x46>
 800bf4a:	e012      	b.n	800bf72 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	3308      	adds	r3, #8
 800bf56:	2201      	movs	r2, #1
 800bf58:	4619      	mov	r1, r3
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f000 f920 	bl	800c1a0 <USBD_CtlSendData>
        break;
 800bf60:	e00c      	b.n	800bf7c <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	3304      	adds	r3, #4
 800bf66:	2201      	movs	r2, #1
 800bf68:	4619      	mov	r1, r3
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f000 f918 	bl	800c1a0 <USBD_CtlSendData>
        break;
 800bf70:	e004      	b.n	800bf7c <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800bf72:	6839      	ldr	r1, [r7, #0]
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f000 f8a9 	bl	800c0cc <USBD_CtlError>
        break;
 800bf7a:	bf00      	nop
}
 800bf7c:	bf00      	nop
 800bf7e:	3708      	adds	r7, #8
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b082      	sub	sp, #8
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf94:	3b01      	subs	r3, #1
 800bf96:	2b02      	cmp	r3, #2
 800bf98:	d81e      	bhi.n	800bfd8 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	88db      	ldrh	r3, [r3, #6]
 800bf9e:	2b02      	cmp	r3, #2
 800bfa0:	d004      	beq.n	800bfac <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800bfa2:	6839      	ldr	r1, [r7, #0]
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 f891 	bl	800c0cc <USBD_CtlError>
        break;
 800bfaa:	e01a      	b.n	800bfe2 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2201      	movs	r2, #1
 800bfb0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d005      	beq.n	800bfc8 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	68db      	ldr	r3, [r3, #12]
 800bfc0:	f043 0202 	orr.w	r2, r3, #2
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	330c      	adds	r3, #12
 800bfcc:	2202      	movs	r2, #2
 800bfce:	4619      	mov	r1, r3
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f000 f8e5 	bl	800c1a0 <USBD_CtlSendData>
      break;
 800bfd6:	e004      	b.n	800bfe2 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800bfd8:	6839      	ldr	r1, [r7, #0]
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 f876 	bl	800c0cc <USBD_CtlError>
      break;
 800bfe0:	bf00      	nop
  }
}
 800bfe2:	bf00      	nop
 800bfe4:	3708      	adds	r7, #8
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}

0800bfea <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bfea:	b580      	push	{r7, lr}
 800bfec:	b082      	sub	sp, #8
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	6078      	str	r0, [r7, #4]
 800bff2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	885b      	ldrh	r3, [r3, #2]
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d106      	bne.n	800c00a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2201      	movs	r2, #1
 800c000:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 f929 	bl	800c25c <USBD_CtlSendStatus>
  }
}
 800c00a:	bf00      	nop
 800c00c:	3708      	adds	r7, #8
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}

0800c012 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c012:	b580      	push	{r7, lr}
 800c014:	b082      	sub	sp, #8
 800c016:	af00      	add	r7, sp, #0
 800c018:	6078      	str	r0, [r7, #4]
 800c01a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c022:	3b01      	subs	r3, #1
 800c024:	2b02      	cmp	r3, #2
 800c026:	d80b      	bhi.n	800c040 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	885b      	ldrh	r3, [r3, #2]
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	d10c      	bne.n	800c04a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2200      	movs	r2, #0
 800c034:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f000 f90f 	bl	800c25c <USBD_CtlSendStatus>
      }
      break;
 800c03e:	e004      	b.n	800c04a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c040:	6839      	ldr	r1, [r7, #0]
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 f842 	bl	800c0cc <USBD_CtlError>
      break;
 800c048:	e000      	b.n	800c04c <USBD_ClrFeature+0x3a>
      break;
 800c04a:	bf00      	nop
  }
}
 800c04c:	bf00      	nop
 800c04e:	3708      	adds	r7, #8
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c054:	b480      	push	{r7}
 800c056:	b083      	sub	sp, #12
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	781a      	ldrb	r2, [r3, #0]
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	785a      	ldrb	r2, [r3, #1]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	3302      	adds	r3, #2
 800c072:	781b      	ldrb	r3, [r3, #0]
 800c074:	b29a      	uxth	r2, r3
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	3303      	adds	r3, #3
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	b29b      	uxth	r3, r3
 800c07e:	021b      	lsls	r3, r3, #8
 800c080:	b29b      	uxth	r3, r3
 800c082:	4413      	add	r3, r2
 800c084:	b29a      	uxth	r2, r3
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	3304      	adds	r3, #4
 800c08e:	781b      	ldrb	r3, [r3, #0]
 800c090:	b29a      	uxth	r2, r3
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	3305      	adds	r3, #5
 800c096:	781b      	ldrb	r3, [r3, #0]
 800c098:	b29b      	uxth	r3, r3
 800c09a:	021b      	lsls	r3, r3, #8
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	4413      	add	r3, r2
 800c0a0:	b29a      	uxth	r2, r3
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	3306      	adds	r3, #6
 800c0aa:	781b      	ldrb	r3, [r3, #0]
 800c0ac:	b29a      	uxth	r2, r3
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	3307      	adds	r3, #7
 800c0b2:	781b      	ldrb	r3, [r3, #0]
 800c0b4:	b29b      	uxth	r3, r3
 800c0b6:	021b      	lsls	r3, r3, #8
 800c0b8:	b29b      	uxth	r3, r3
 800c0ba:	4413      	add	r3, r2
 800c0bc:	b29a      	uxth	r2, r3
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	80da      	strh	r2, [r3, #6]

}
 800c0c2:	bf00      	nop
 800c0c4:	370c      	adds	r7, #12
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bc80      	pop	{r7}
 800c0ca:	4770      	bx	lr

0800c0cc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c0d6:	2180      	movs	r1, #128	; 0x80
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f003 fca9 	bl	800fa30 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c0de:	2100      	movs	r1, #0
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f003 fca5 	bl	800fa30 <USBD_LL_StallEP>
}
 800c0e6:	bf00      	nop
 800c0e8:	3708      	adds	r7, #8
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}

0800c0ee <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c0ee:	b580      	push	{r7, lr}
 800c0f0:	b086      	sub	sp, #24
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	60f8      	str	r0, [r7, #12]
 800c0f6:	60b9      	str	r1, [r7, #8]
 800c0f8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d032      	beq.n	800c16a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c104:	68f8      	ldr	r0, [r7, #12]
 800c106:	f000 f834 	bl	800c172 <USBD_GetLen>
 800c10a:	4603      	mov	r3, r0
 800c10c:	3301      	adds	r3, #1
 800c10e:	b29b      	uxth	r3, r3
 800c110:	005b      	lsls	r3, r3, #1
 800c112:	b29a      	uxth	r2, r3
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c118:	7dfb      	ldrb	r3, [r7, #23]
 800c11a:	1c5a      	adds	r2, r3, #1
 800c11c:	75fa      	strb	r2, [r7, #23]
 800c11e:	461a      	mov	r2, r3
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	4413      	add	r3, r2
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	7812      	ldrb	r2, [r2, #0]
 800c128:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c12a:	7dfb      	ldrb	r3, [r7, #23]
 800c12c:	1c5a      	adds	r2, r3, #1
 800c12e:	75fa      	strb	r2, [r7, #23]
 800c130:	461a      	mov	r2, r3
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	4413      	add	r3, r2
 800c136:	2203      	movs	r2, #3
 800c138:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c13a:	e012      	b.n	800c162 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	1c5a      	adds	r2, r3, #1
 800c140:	60fa      	str	r2, [r7, #12]
 800c142:	7dfa      	ldrb	r2, [r7, #23]
 800c144:	1c51      	adds	r1, r2, #1
 800c146:	75f9      	strb	r1, [r7, #23]
 800c148:	4611      	mov	r1, r2
 800c14a:	68ba      	ldr	r2, [r7, #8]
 800c14c:	440a      	add	r2, r1
 800c14e:	781b      	ldrb	r3, [r3, #0]
 800c150:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c152:	7dfb      	ldrb	r3, [r7, #23]
 800c154:	1c5a      	adds	r2, r3, #1
 800c156:	75fa      	strb	r2, [r7, #23]
 800c158:	461a      	mov	r2, r3
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	4413      	add	r3, r2
 800c15e:	2200      	movs	r2, #0
 800c160:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	781b      	ldrb	r3, [r3, #0]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d1e8      	bne.n	800c13c <USBD_GetString+0x4e>
    }
  }
}
 800c16a:	bf00      	nop
 800c16c:	3718      	adds	r7, #24
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}

0800c172 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c172:	b480      	push	{r7}
 800c174:	b085      	sub	sp, #20
 800c176:	af00      	add	r7, sp, #0
 800c178:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c17a:	2300      	movs	r3, #0
 800c17c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c17e:	e005      	b.n	800c18c <USBD_GetLen+0x1a>
  {
    len++;
 800c180:	7bfb      	ldrb	r3, [r7, #15]
 800c182:	3301      	adds	r3, #1
 800c184:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	3301      	adds	r3, #1
 800c18a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d1f5      	bne.n	800c180 <USBD_GetLen+0xe>
  }

  return len;
 800c194:	7bfb      	ldrb	r3, [r7, #15]
}
 800c196:	4618      	mov	r0, r3
 800c198:	3714      	adds	r7, #20
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bc80      	pop	{r7}
 800c19e:	4770      	bx	lr

0800c1a0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b084      	sub	sp, #16
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	60f8      	str	r0, [r7, #12]
 800c1a8:	60b9      	str	r1, [r7, #8]
 800c1aa:	4613      	mov	r3, r2
 800c1ac:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	2202      	movs	r2, #2
 800c1b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c1b6:	88fa      	ldrh	r2, [r7, #6]
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c1bc:	88fa      	ldrh	r2, [r7, #6]
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c1c2:	88fb      	ldrh	r3, [r7, #6]
 800c1c4:	68ba      	ldr	r2, [r7, #8]
 800c1c6:	2100      	movs	r1, #0
 800c1c8:	68f8      	ldr	r0, [r7, #12]
 800c1ca:	f003 fcba 	bl	800fb42 <USBD_LL_Transmit>

  return USBD_OK;
 800c1ce:	2300      	movs	r3, #0
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3710      	adds	r7, #16
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}

0800c1d8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b084      	sub	sp, #16
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	60f8      	str	r0, [r7, #12]
 800c1e0:	60b9      	str	r1, [r7, #8]
 800c1e2:	4613      	mov	r3, r2
 800c1e4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c1e6:	88fb      	ldrh	r3, [r7, #6]
 800c1e8:	68ba      	ldr	r2, [r7, #8]
 800c1ea:	2100      	movs	r1, #0
 800c1ec:	68f8      	ldr	r0, [r7, #12]
 800c1ee:	f003 fca8 	bl	800fb42 <USBD_LL_Transmit>

  return USBD_OK;
 800c1f2:	2300      	movs	r3, #0
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3710      	adds	r7, #16
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}

0800c1fc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b084      	sub	sp, #16
 800c200:	af00      	add	r7, sp, #0
 800c202:	60f8      	str	r0, [r7, #12]
 800c204:	60b9      	str	r1, [r7, #8]
 800c206:	4613      	mov	r3, r2
 800c208:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2203      	movs	r2, #3
 800c20e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c212:	88fa      	ldrh	r2, [r7, #6]
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c21a:	88fa      	ldrh	r2, [r7, #6]
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c222:	88fb      	ldrh	r3, [r7, #6]
 800c224:	68ba      	ldr	r2, [r7, #8]
 800c226:	2100      	movs	r1, #0
 800c228:	68f8      	ldr	r0, [r7, #12]
 800c22a:	f003 fcad 	bl	800fb88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c22e:	2300      	movs	r3, #0
}
 800c230:	4618      	mov	r0, r3
 800c232:	3710      	adds	r7, #16
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}

0800c238 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b084      	sub	sp, #16
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	60b9      	str	r1, [r7, #8]
 800c242:	4613      	mov	r3, r2
 800c244:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c246:	88fb      	ldrh	r3, [r7, #6]
 800c248:	68ba      	ldr	r2, [r7, #8]
 800c24a:	2100      	movs	r1, #0
 800c24c:	68f8      	ldr	r0, [r7, #12]
 800c24e:	f003 fc9b 	bl	800fb88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c252:	2300      	movs	r3, #0
}
 800c254:	4618      	mov	r0, r3
 800c256:	3710      	adds	r7, #16
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}

0800c25c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2204      	movs	r2, #4
 800c268:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c26c:	2300      	movs	r3, #0
 800c26e:	2200      	movs	r2, #0
 800c270:	2100      	movs	r1, #0
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f003 fc65 	bl	800fb42 <USBD_LL_Transmit>

  return USBD_OK;
 800c278:	2300      	movs	r3, #0
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3708      	adds	r7, #8
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}

0800c282 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c282:	b580      	push	{r7, lr}
 800c284:	b082      	sub	sp, #8
 800c286:	af00      	add	r7, sp, #0
 800c288:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2205      	movs	r2, #5
 800c28e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c292:	2300      	movs	r3, #0
 800c294:	2200      	movs	r2, #0
 800c296:	2100      	movs	r1, #0
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	f003 fc75 	bl	800fb88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c29e:	2300      	movs	r3, #0
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3708      	adds	r7, #8
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b084      	sub	sp, #16
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c2b2:	79fb      	ldrb	r3, [r7, #7]
 800c2b4:	4a08      	ldr	r2, [pc, #32]	; (800c2d8 <disk_status+0x30>)
 800c2b6:	009b      	lsls	r3, r3, #2
 800c2b8:	4413      	add	r3, r2
 800c2ba:	685b      	ldr	r3, [r3, #4]
 800c2bc:	685b      	ldr	r3, [r3, #4]
 800c2be:	79fa      	ldrb	r2, [r7, #7]
 800c2c0:	4905      	ldr	r1, [pc, #20]	; (800c2d8 <disk_status+0x30>)
 800c2c2:	440a      	add	r2, r1
 800c2c4:	7a12      	ldrb	r2, [r2, #8]
 800c2c6:	4610      	mov	r0, r2
 800c2c8:	4798      	blx	r3
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c2ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	3710      	adds	r7, #16
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}
 800c2d8:	20000244 	.word	0x20000244

0800c2dc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b084      	sub	sp, #16
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800c2ea:	79fb      	ldrb	r3, [r7, #7]
 800c2ec:	4a0d      	ldr	r2, [pc, #52]	; (800c324 <disk_initialize+0x48>)
 800c2ee:	5cd3      	ldrb	r3, [r2, r3]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d111      	bne.n	800c318 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800c2f4:	79fb      	ldrb	r3, [r7, #7]
 800c2f6:	4a0b      	ldr	r2, [pc, #44]	; (800c324 <disk_initialize+0x48>)
 800c2f8:	2101      	movs	r1, #1
 800c2fa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c2fc:	79fb      	ldrb	r3, [r7, #7]
 800c2fe:	4a09      	ldr	r2, [pc, #36]	; (800c324 <disk_initialize+0x48>)
 800c300:	009b      	lsls	r3, r3, #2
 800c302:	4413      	add	r3, r2
 800c304:	685b      	ldr	r3, [r3, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	79fa      	ldrb	r2, [r7, #7]
 800c30a:	4906      	ldr	r1, [pc, #24]	; (800c324 <disk_initialize+0x48>)
 800c30c:	440a      	add	r2, r1
 800c30e:	7a12      	ldrb	r2, [r2, #8]
 800c310:	4610      	mov	r0, r2
 800c312:	4798      	blx	r3
 800c314:	4603      	mov	r3, r0
 800c316:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c318:	7bfb      	ldrb	r3, [r7, #15]
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3710      	adds	r7, #16
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}
 800c322:	bf00      	nop
 800c324:	20000244 	.word	0x20000244

0800c328 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c328:	b590      	push	{r4, r7, lr}
 800c32a:	b087      	sub	sp, #28
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	60b9      	str	r1, [r7, #8]
 800c330:	607a      	str	r2, [r7, #4]
 800c332:	603b      	str	r3, [r7, #0]
 800c334:	4603      	mov	r3, r0
 800c336:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c338:	7bfb      	ldrb	r3, [r7, #15]
 800c33a:	4a0a      	ldr	r2, [pc, #40]	; (800c364 <disk_read+0x3c>)
 800c33c:	009b      	lsls	r3, r3, #2
 800c33e:	4413      	add	r3, r2
 800c340:	685b      	ldr	r3, [r3, #4]
 800c342:	689c      	ldr	r4, [r3, #8]
 800c344:	7bfb      	ldrb	r3, [r7, #15]
 800c346:	4a07      	ldr	r2, [pc, #28]	; (800c364 <disk_read+0x3c>)
 800c348:	4413      	add	r3, r2
 800c34a:	7a18      	ldrb	r0, [r3, #8]
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	687a      	ldr	r2, [r7, #4]
 800c350:	68b9      	ldr	r1, [r7, #8]
 800c352:	47a0      	blx	r4
 800c354:	4603      	mov	r3, r0
 800c356:	75fb      	strb	r3, [r7, #23]
  return res;
 800c358:	7dfb      	ldrb	r3, [r7, #23]
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	371c      	adds	r7, #28
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd90      	pop	{r4, r7, pc}
 800c362:	bf00      	nop
 800c364:	20000244 	.word	0x20000244

0800c368 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c368:	b590      	push	{r4, r7, lr}
 800c36a:	b087      	sub	sp, #28
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	60b9      	str	r1, [r7, #8]
 800c370:	607a      	str	r2, [r7, #4]
 800c372:	603b      	str	r3, [r7, #0]
 800c374:	4603      	mov	r3, r0
 800c376:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c378:	7bfb      	ldrb	r3, [r7, #15]
 800c37a:	4a0a      	ldr	r2, [pc, #40]	; (800c3a4 <disk_write+0x3c>)
 800c37c:	009b      	lsls	r3, r3, #2
 800c37e:	4413      	add	r3, r2
 800c380:	685b      	ldr	r3, [r3, #4]
 800c382:	68dc      	ldr	r4, [r3, #12]
 800c384:	7bfb      	ldrb	r3, [r7, #15]
 800c386:	4a07      	ldr	r2, [pc, #28]	; (800c3a4 <disk_write+0x3c>)
 800c388:	4413      	add	r3, r2
 800c38a:	7a18      	ldrb	r0, [r3, #8]
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	687a      	ldr	r2, [r7, #4]
 800c390:	68b9      	ldr	r1, [r7, #8]
 800c392:	47a0      	blx	r4
 800c394:	4603      	mov	r3, r0
 800c396:	75fb      	strb	r3, [r7, #23]
  return res;
 800c398:	7dfb      	ldrb	r3, [r7, #23]
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	371c      	adds	r7, #28
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd90      	pop	{r4, r7, pc}
 800c3a2:	bf00      	nop
 800c3a4:	20000244 	.word	0x20000244

0800c3a8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b084      	sub	sp, #16
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	603a      	str	r2, [r7, #0]
 800c3b2:	71fb      	strb	r3, [r7, #7]
 800c3b4:	460b      	mov	r3, r1
 800c3b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c3b8:	79fb      	ldrb	r3, [r7, #7]
 800c3ba:	4a09      	ldr	r2, [pc, #36]	; (800c3e0 <disk_ioctl+0x38>)
 800c3bc:	009b      	lsls	r3, r3, #2
 800c3be:	4413      	add	r3, r2
 800c3c0:	685b      	ldr	r3, [r3, #4]
 800c3c2:	691b      	ldr	r3, [r3, #16]
 800c3c4:	79fa      	ldrb	r2, [r7, #7]
 800c3c6:	4906      	ldr	r1, [pc, #24]	; (800c3e0 <disk_ioctl+0x38>)
 800c3c8:	440a      	add	r2, r1
 800c3ca:	7a10      	ldrb	r0, [r2, #8]
 800c3cc:	79b9      	ldrb	r1, [r7, #6]
 800c3ce:	683a      	ldr	r2, [r7, #0]
 800c3d0:	4798      	blx	r3
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	73fb      	strb	r3, [r7, #15]
  return res;
 800c3d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3710      	adds	r7, #16
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}
 800c3e0:	20000244 	.word	0x20000244

0800c3e4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c3e4:	b480      	push	{r7}
 800c3e6:	b087      	sub	sp, #28
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	60f8      	str	r0, [r7, #12]
 800c3ec:	60b9      	str	r1, [r7, #8]
 800c3ee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800c3f8:	e007      	b.n	800c40a <mem_cpy+0x26>
		*d++ = *s++;
 800c3fa:	693a      	ldr	r2, [r7, #16]
 800c3fc:	1c53      	adds	r3, r2, #1
 800c3fe:	613b      	str	r3, [r7, #16]
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	1c59      	adds	r1, r3, #1
 800c404:	6179      	str	r1, [r7, #20]
 800c406:	7812      	ldrb	r2, [r2, #0]
 800c408:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	1e5a      	subs	r2, r3, #1
 800c40e:	607a      	str	r2, [r7, #4]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d1f2      	bne.n	800c3fa <mem_cpy+0x16>
}
 800c414:	bf00      	nop
 800c416:	371c      	adds	r7, #28
 800c418:	46bd      	mov	sp, r7
 800c41a:	bc80      	pop	{r7}
 800c41c:	4770      	bx	lr

0800c41e <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c41e:	b480      	push	{r7}
 800c420:	b087      	sub	sp, #28
 800c422:	af00      	add	r7, sp, #0
 800c424:	60f8      	str	r0, [r7, #12]
 800c426:	60b9      	str	r1, [r7, #8]
 800c428:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800c42e:	e005      	b.n	800c43c <mem_set+0x1e>
		*d++ = (BYTE)val;
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	1c5a      	adds	r2, r3, #1
 800c434:	617a      	str	r2, [r7, #20]
 800c436:	68ba      	ldr	r2, [r7, #8]
 800c438:	b2d2      	uxtb	r2, r2
 800c43a:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	1e5a      	subs	r2, r3, #1
 800c440:	607a      	str	r2, [r7, #4]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d1f4      	bne.n	800c430 <mem_set+0x12>
}
 800c446:	bf00      	nop
 800c448:	371c      	adds	r7, #28
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bc80      	pop	{r7}
 800c44e:	4770      	bx	lr

0800c450 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800c450:	b480      	push	{r7}
 800c452:	b089      	sub	sp, #36	; 0x24
 800c454:	af00      	add	r7, sp, #0
 800c456:	60f8      	str	r0, [r7, #12]
 800c458:	60b9      	str	r1, [r7, #8]
 800c45a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	61fb      	str	r3, [r7, #28]
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c464:	2300      	movs	r3, #0
 800c466:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800c468:	bf00      	nop
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	1e5a      	subs	r2, r3, #1
 800c46e:	607a      	str	r2, [r7, #4]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d00d      	beq.n	800c490 <mem_cmp+0x40>
 800c474:	69fb      	ldr	r3, [r7, #28]
 800c476:	1c5a      	adds	r2, r3, #1
 800c478:	61fa      	str	r2, [r7, #28]
 800c47a:	781b      	ldrb	r3, [r3, #0]
 800c47c:	4619      	mov	r1, r3
 800c47e:	69bb      	ldr	r3, [r7, #24]
 800c480:	1c5a      	adds	r2, r3, #1
 800c482:	61ba      	str	r2, [r7, #24]
 800c484:	781b      	ldrb	r3, [r3, #0]
 800c486:	1acb      	subs	r3, r1, r3
 800c488:	617b      	str	r3, [r7, #20]
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d0ec      	beq.n	800c46a <mem_cmp+0x1a>
	return r;
 800c490:	697b      	ldr	r3, [r7, #20]
}
 800c492:	4618      	mov	r0, r3
 800c494:	3724      	adds	r7, #36	; 0x24
 800c496:	46bd      	mov	sp, r7
 800c498:	bc80      	pop	{r7}
 800c49a:	4770      	bx	lr

0800c49c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800c49c:	b480      	push	{r7}
 800c49e:	b083      	sub	sp, #12
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c4a6:	e002      	b.n	800c4ae <chk_chr+0x12>
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	607b      	str	r3, [r7, #4]
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	781b      	ldrb	r3, [r3, #0]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d005      	beq.n	800c4c2 <chk_chr+0x26>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	781b      	ldrb	r3, [r3, #0]
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d1f2      	bne.n	800c4a8 <chk_chr+0xc>
	return *str;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	781b      	ldrb	r3, [r3, #0]
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	370c      	adds	r7, #12
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bc80      	pop	{r7}
 800c4ce:	4770      	bx	lr

0800c4d0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b085      	sub	sp, #20
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c4da:	2300      	movs	r3, #0
 800c4dc:	60bb      	str	r3, [r7, #8]
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	60fb      	str	r3, [r7, #12]
 800c4e2:	e038      	b.n	800c556 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 800c4e4:	492f      	ldr	r1, [pc, #188]	; (800c5a4 <chk_lock+0xd4>)
 800c4e6:	68fa      	ldr	r2, [r7, #12]
 800c4e8:	4613      	mov	r3, r2
 800c4ea:	005b      	lsls	r3, r3, #1
 800c4ec:	4413      	add	r3, r2
 800c4ee:	009b      	lsls	r3, r3, #2
 800c4f0:	440b      	add	r3, r1
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d029      	beq.n	800c54c <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800c4f8:	492a      	ldr	r1, [pc, #168]	; (800c5a4 <chk_lock+0xd4>)
 800c4fa:	68fa      	ldr	r2, [r7, #12]
 800c4fc:	4613      	mov	r3, r2
 800c4fe:	005b      	lsls	r3, r3, #1
 800c500:	4413      	add	r3, r2
 800c502:	009b      	lsls	r3, r3, #2
 800c504:	440b      	add	r3, r1
 800c506:	681a      	ldr	r2, [r3, #0]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c50e:	429a      	cmp	r2, r3
 800c510:	d11e      	bne.n	800c550 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800c512:	4924      	ldr	r1, [pc, #144]	; (800c5a4 <chk_lock+0xd4>)
 800c514:	68fa      	ldr	r2, [r7, #12]
 800c516:	4613      	mov	r3, r2
 800c518:	005b      	lsls	r3, r3, #1
 800c51a:	4413      	add	r3, r2
 800c51c:	009b      	lsls	r3, r3, #2
 800c51e:	440b      	add	r3, r1
 800c520:	3304      	adds	r3, #4
 800c522:	681a      	ldr	r2, [r3, #0]
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d110      	bne.n	800c550 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800c52e:	491d      	ldr	r1, [pc, #116]	; (800c5a4 <chk_lock+0xd4>)
 800c530:	68fa      	ldr	r2, [r7, #12]
 800c532:	4613      	mov	r3, r2
 800c534:	005b      	lsls	r3, r3, #1
 800c536:	4413      	add	r3, r2
 800c538:	009b      	lsls	r3, r3, #2
 800c53a:	440b      	add	r3, r1
 800c53c:	3308      	adds	r3, #8
 800c53e:	881a      	ldrh	r2, [r3, #0]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 800c546:	429a      	cmp	r2, r3
 800c548:	d102      	bne.n	800c550 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800c54a:	e007      	b.n	800c55c <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 800c54c:	2301      	movs	r3, #1
 800c54e:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	3301      	adds	r3, #1
 800c554:	60fb      	str	r3, [r7, #12]
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	2b01      	cmp	r3, #1
 800c55a:	d9c3      	bls.n	800c4e4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2b02      	cmp	r3, #2
 800c560:	d109      	bne.n	800c576 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d102      	bne.n	800c56e <chk_lock+0x9e>
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	2b02      	cmp	r3, #2
 800c56c:	d101      	bne.n	800c572 <chk_lock+0xa2>
 800c56e:	2300      	movs	r3, #0
 800c570:	e013      	b.n	800c59a <chk_lock+0xca>
 800c572:	2312      	movs	r3, #18
 800c574:	e011      	b.n	800c59a <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d10b      	bne.n	800c594 <chk_lock+0xc4>
 800c57c:	4909      	ldr	r1, [pc, #36]	; (800c5a4 <chk_lock+0xd4>)
 800c57e:	68fa      	ldr	r2, [r7, #12]
 800c580:	4613      	mov	r3, r2
 800c582:	005b      	lsls	r3, r3, #1
 800c584:	4413      	add	r3, r2
 800c586:	009b      	lsls	r3, r3, #2
 800c588:	440b      	add	r3, r1
 800c58a:	330a      	adds	r3, #10
 800c58c:	881b      	ldrh	r3, [r3, #0]
 800c58e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c592:	d101      	bne.n	800c598 <chk_lock+0xc8>
 800c594:	2310      	movs	r3, #16
 800c596:	e000      	b.n	800c59a <chk_lock+0xca>
 800c598:	2300      	movs	r3, #0
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3714      	adds	r7, #20
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bc80      	pop	{r7}
 800c5a2:	4770      	bx	lr
 800c5a4:	2000022c 	.word	0x2000022c

0800c5a8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	b083      	sub	sp, #12
 800c5ac:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	607b      	str	r3, [r7, #4]
 800c5b2:	e002      	b.n	800c5ba <enq_lock+0x12>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	3301      	adds	r3, #1
 800c5b8:	607b      	str	r3, [r7, #4]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2b01      	cmp	r3, #1
 800c5be:	d809      	bhi.n	800c5d4 <enq_lock+0x2c>
 800c5c0:	490a      	ldr	r1, [pc, #40]	; (800c5ec <enq_lock+0x44>)
 800c5c2:	687a      	ldr	r2, [r7, #4]
 800c5c4:	4613      	mov	r3, r2
 800c5c6:	005b      	lsls	r3, r3, #1
 800c5c8:	4413      	add	r3, r2
 800c5ca:	009b      	lsls	r3, r3, #2
 800c5cc:	440b      	add	r3, r1
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d1ef      	bne.n	800c5b4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2b02      	cmp	r3, #2
 800c5d8:	bf14      	ite	ne
 800c5da:	2301      	movne	r3, #1
 800c5dc:	2300      	moveq	r3, #0
 800c5de:	b2db      	uxtb	r3, r3
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	370c      	adds	r7, #12
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bc80      	pop	{r7}
 800c5e8:	4770      	bx	lr
 800c5ea:	bf00      	nop
 800c5ec:	2000022c 	.word	0x2000022c

0800c5f0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b085      	sub	sp, #20
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
 800c5f8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	60fb      	str	r3, [r7, #12]
 800c5fe:	e02b      	b.n	800c658 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 800c600:	4955      	ldr	r1, [pc, #340]	; (800c758 <inc_lock+0x168>)
 800c602:	68fa      	ldr	r2, [r7, #12]
 800c604:	4613      	mov	r3, r2
 800c606:	005b      	lsls	r3, r3, #1
 800c608:	4413      	add	r3, r2
 800c60a:	009b      	lsls	r3, r3, #2
 800c60c:	440b      	add	r3, r1
 800c60e:	681a      	ldr	r2, [r3, #0]
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c616:	429a      	cmp	r2, r3
 800c618:	d11b      	bne.n	800c652 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800c61a:	494f      	ldr	r1, [pc, #316]	; (800c758 <inc_lock+0x168>)
 800c61c:	68fa      	ldr	r2, [r7, #12]
 800c61e:	4613      	mov	r3, r2
 800c620:	005b      	lsls	r3, r3, #1
 800c622:	4413      	add	r3, r2
 800c624:	009b      	lsls	r3, r3, #2
 800c626:	440b      	add	r3, r1
 800c628:	3304      	adds	r3, #4
 800c62a:	681a      	ldr	r2, [r3, #0]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 800c632:	429a      	cmp	r2, r3
 800c634:	d10d      	bne.n	800c652 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800c636:	4948      	ldr	r1, [pc, #288]	; (800c758 <inc_lock+0x168>)
 800c638:	68fa      	ldr	r2, [r7, #12]
 800c63a:	4613      	mov	r3, r2
 800c63c:	005b      	lsls	r3, r3, #1
 800c63e:	4413      	add	r3, r2
 800c640:	009b      	lsls	r3, r3, #2
 800c642:	440b      	add	r3, r1
 800c644:	3308      	adds	r3, #8
 800c646:	881a      	ldrh	r2, [r3, #0]
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 800c64e:	429a      	cmp	r2, r3
 800c650:	d006      	beq.n	800c660 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	3301      	adds	r3, #1
 800c656:	60fb      	str	r3, [r7, #12]
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	2b01      	cmp	r3, #1
 800c65c:	d9d0      	bls.n	800c600 <inc_lock+0x10>
 800c65e:	e000      	b.n	800c662 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 800c660:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	2b02      	cmp	r3, #2
 800c666:	d145      	bne.n	800c6f4 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c668:	2300      	movs	r3, #0
 800c66a:	60fb      	str	r3, [r7, #12]
 800c66c:	e002      	b.n	800c674 <inc_lock+0x84>
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	3301      	adds	r3, #1
 800c672:	60fb      	str	r3, [r7, #12]
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	2b01      	cmp	r3, #1
 800c678:	d809      	bhi.n	800c68e <inc_lock+0x9e>
 800c67a:	4937      	ldr	r1, [pc, #220]	; (800c758 <inc_lock+0x168>)
 800c67c:	68fa      	ldr	r2, [r7, #12]
 800c67e:	4613      	mov	r3, r2
 800c680:	005b      	lsls	r3, r3, #1
 800c682:	4413      	add	r3, r2
 800c684:	009b      	lsls	r3, r3, #2
 800c686:	440b      	add	r3, r1
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d1ef      	bne.n	800c66e <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	2b02      	cmp	r3, #2
 800c692:	d101      	bne.n	800c698 <inc_lock+0xa8>
 800c694:	2300      	movs	r3, #0
 800c696:	e05a      	b.n	800c74e <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 800c69e:	482e      	ldr	r0, [pc, #184]	; (800c758 <inc_lock+0x168>)
 800c6a0:	68fa      	ldr	r2, [r7, #12]
 800c6a2:	4613      	mov	r3, r2
 800c6a4:	005b      	lsls	r3, r3, #1
 800c6a6:	4413      	add	r3, r2
 800c6a8:	009b      	lsls	r3, r3, #2
 800c6aa:	4403      	add	r3, r0
 800c6ac:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 800c6b4:	4828      	ldr	r0, [pc, #160]	; (800c758 <inc_lock+0x168>)
 800c6b6:	68fa      	ldr	r2, [r7, #12]
 800c6b8:	4613      	mov	r3, r2
 800c6ba:	005b      	lsls	r3, r3, #1
 800c6bc:	4413      	add	r3, r2
 800c6be:	009b      	lsls	r3, r3, #2
 800c6c0:	4403      	add	r3, r0
 800c6c2:	3304      	adds	r3, #4
 800c6c4:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 800c6cc:	4922      	ldr	r1, [pc, #136]	; (800c758 <inc_lock+0x168>)
 800c6ce:	68fa      	ldr	r2, [r7, #12]
 800c6d0:	4613      	mov	r3, r2
 800c6d2:	005b      	lsls	r3, r3, #1
 800c6d4:	4413      	add	r3, r2
 800c6d6:	009b      	lsls	r3, r3, #2
 800c6d8:	440b      	add	r3, r1
 800c6da:	3308      	adds	r3, #8
 800c6dc:	4602      	mov	r2, r0
 800c6de:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800c6e0:	491d      	ldr	r1, [pc, #116]	; (800c758 <inc_lock+0x168>)
 800c6e2:	68fa      	ldr	r2, [r7, #12]
 800c6e4:	4613      	mov	r3, r2
 800c6e6:	005b      	lsls	r3, r3, #1
 800c6e8:	4413      	add	r3, r2
 800c6ea:	009b      	lsls	r3, r3, #2
 800c6ec:	440b      	add	r3, r1
 800c6ee:	330a      	adds	r3, #10
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d00c      	beq.n	800c714 <inc_lock+0x124>
 800c6fa:	4917      	ldr	r1, [pc, #92]	; (800c758 <inc_lock+0x168>)
 800c6fc:	68fa      	ldr	r2, [r7, #12]
 800c6fe:	4613      	mov	r3, r2
 800c700:	005b      	lsls	r3, r3, #1
 800c702:	4413      	add	r3, r2
 800c704:	009b      	lsls	r3, r3, #2
 800c706:	440b      	add	r3, r1
 800c708:	330a      	adds	r3, #10
 800c70a:	881b      	ldrh	r3, [r3, #0]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d001      	beq.n	800c714 <inc_lock+0x124>
 800c710:	2300      	movs	r3, #0
 800c712:	e01c      	b.n	800c74e <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d10b      	bne.n	800c732 <inc_lock+0x142>
 800c71a:	490f      	ldr	r1, [pc, #60]	; (800c758 <inc_lock+0x168>)
 800c71c:	68fa      	ldr	r2, [r7, #12]
 800c71e:	4613      	mov	r3, r2
 800c720:	005b      	lsls	r3, r3, #1
 800c722:	4413      	add	r3, r2
 800c724:	009b      	lsls	r3, r3, #2
 800c726:	440b      	add	r3, r1
 800c728:	330a      	adds	r3, #10
 800c72a:	881b      	ldrh	r3, [r3, #0]
 800c72c:	3301      	adds	r3, #1
 800c72e:	b299      	uxth	r1, r3
 800c730:	e001      	b.n	800c736 <inc_lock+0x146>
 800c732:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c736:	4808      	ldr	r0, [pc, #32]	; (800c758 <inc_lock+0x168>)
 800c738:	68fa      	ldr	r2, [r7, #12]
 800c73a:	4613      	mov	r3, r2
 800c73c:	005b      	lsls	r3, r3, #1
 800c73e:	4413      	add	r3, r2
 800c740:	009b      	lsls	r3, r3, #2
 800c742:	4403      	add	r3, r0
 800c744:	330a      	adds	r3, #10
 800c746:	460a      	mov	r2, r1
 800c748:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	3301      	adds	r3, #1
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3714      	adds	r7, #20
 800c752:	46bd      	mov	sp, r7
 800c754:	bc80      	pop	{r7}
 800c756:	4770      	bx	lr
 800c758:	2000022c 	.word	0x2000022c

0800c75c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c75c:	b480      	push	{r7}
 800c75e:	b085      	sub	sp, #20
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	3b01      	subs	r3, #1
 800c768:	607b      	str	r3, [r7, #4]
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2b01      	cmp	r3, #1
 800c76e:	d82e      	bhi.n	800c7ce <dec_lock+0x72>
		n = Files[i].ctr;
 800c770:	491b      	ldr	r1, [pc, #108]	; (800c7e0 <dec_lock+0x84>)
 800c772:	687a      	ldr	r2, [r7, #4]
 800c774:	4613      	mov	r3, r2
 800c776:	005b      	lsls	r3, r3, #1
 800c778:	4413      	add	r3, r2
 800c77a:	009b      	lsls	r3, r3, #2
 800c77c:	440b      	add	r3, r1
 800c77e:	330a      	adds	r3, #10
 800c780:	881b      	ldrh	r3, [r3, #0]
 800c782:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c784:	89fb      	ldrh	r3, [r7, #14]
 800c786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c78a:	d101      	bne.n	800c790 <dec_lock+0x34>
 800c78c:	2300      	movs	r3, #0
 800c78e:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800c790:	89fb      	ldrh	r3, [r7, #14]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d002      	beq.n	800c79c <dec_lock+0x40>
 800c796:	89fb      	ldrh	r3, [r7, #14]
 800c798:	3b01      	subs	r3, #1
 800c79a:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c79c:	4910      	ldr	r1, [pc, #64]	; (800c7e0 <dec_lock+0x84>)
 800c79e:	687a      	ldr	r2, [r7, #4]
 800c7a0:	4613      	mov	r3, r2
 800c7a2:	005b      	lsls	r3, r3, #1
 800c7a4:	4413      	add	r3, r2
 800c7a6:	009b      	lsls	r3, r3, #2
 800c7a8:	440b      	add	r3, r1
 800c7aa:	330a      	adds	r3, #10
 800c7ac:	89fa      	ldrh	r2, [r7, #14]
 800c7ae:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c7b0:	89fb      	ldrh	r3, [r7, #14]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d108      	bne.n	800c7c8 <dec_lock+0x6c>
 800c7b6:	490a      	ldr	r1, [pc, #40]	; (800c7e0 <dec_lock+0x84>)
 800c7b8:	687a      	ldr	r2, [r7, #4]
 800c7ba:	4613      	mov	r3, r2
 800c7bc:	005b      	lsls	r3, r3, #1
 800c7be:	4413      	add	r3, r2
 800c7c0:	009b      	lsls	r3, r3, #2
 800c7c2:	440b      	add	r3, r1
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	737b      	strb	r3, [r7, #13]
 800c7cc:	e001      	b.n	800c7d2 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c7ce:	2302      	movs	r3, #2
 800c7d0:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c7d2:	7b7b      	ldrb	r3, [r7, #13]
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3714      	adds	r7, #20
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bc80      	pop	{r7}
 800c7dc:	4770      	bx	lr
 800c7de:	bf00      	nop
 800c7e0:	2000022c 	.word	0x2000022c

0800c7e4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b085      	sub	sp, #20
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	60fb      	str	r3, [r7, #12]
 800c7f0:	e016      	b.n	800c820 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c7f2:	490f      	ldr	r1, [pc, #60]	; (800c830 <clear_lock+0x4c>)
 800c7f4:	68fa      	ldr	r2, [r7, #12]
 800c7f6:	4613      	mov	r3, r2
 800c7f8:	005b      	lsls	r3, r3, #1
 800c7fa:	4413      	add	r3, r2
 800c7fc:	009b      	lsls	r3, r3, #2
 800c7fe:	440b      	add	r3, r1
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	429a      	cmp	r2, r3
 800c806:	d108      	bne.n	800c81a <clear_lock+0x36>
 800c808:	4909      	ldr	r1, [pc, #36]	; (800c830 <clear_lock+0x4c>)
 800c80a:	68fa      	ldr	r2, [r7, #12]
 800c80c:	4613      	mov	r3, r2
 800c80e:	005b      	lsls	r3, r3, #1
 800c810:	4413      	add	r3, r2
 800c812:	009b      	lsls	r3, r3, #2
 800c814:	440b      	add	r3, r1
 800c816:	2200      	movs	r2, #0
 800c818:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	3301      	adds	r3, #1
 800c81e:	60fb      	str	r3, [r7, #12]
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	2b01      	cmp	r3, #1
 800c824:	d9e5      	bls.n	800c7f2 <clear_lock+0xe>
	}
}
 800c826:	bf00      	nop
 800c828:	3714      	adds	r7, #20
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bc80      	pop	{r7}
 800c82e:	4770      	bx	lr
 800c830:	2000022c 	.word	0x2000022c

0800c834 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b086      	sub	sp, #24
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c83c:	2300      	movs	r3, #0
 800c83e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800c846:	2b00      	cmp	r3, #0
 800c848:	d038      	beq.n	800c8bc <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800c850:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c858:	6879      	ldr	r1, [r7, #4]
 800c85a:	2301      	movs	r3, #1
 800c85c:	697a      	ldr	r2, [r7, #20]
 800c85e:	f7ff fd83 	bl	800c368 <disk_write>
 800c862:	4603      	mov	r3, r0
 800c864:	2b00      	cmp	r3, #0
 800c866:	d002      	beq.n	800c86e <sync_window+0x3a>
			res = FR_DISK_ERR;
 800c868:	2301      	movs	r3, #1
 800c86a:	73fb      	strb	r3, [r7, #15]
 800c86c:	e026      	b.n	800c8bc <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2200      	movs	r2, #0
 800c872:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800c87c:	697a      	ldr	r2, [r7, #20]
 800c87e:	1ad2      	subs	r2, r2, r3
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c886:	429a      	cmp	r2, r3
 800c888:	d218      	bcs.n	800c8bc <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800c890:	613b      	str	r3, [r7, #16]
 800c892:	e010      	b.n	800c8b6 <sync_window+0x82>
					wsect += fs->fsize;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c89a:	697a      	ldr	r2, [r7, #20]
 800c89c:	4413      	add	r3, r2
 800c89e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c8a6:	6879      	ldr	r1, [r7, #4]
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	697a      	ldr	r2, [r7, #20]
 800c8ac:	f7ff fd5c 	bl	800c368 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	3b01      	subs	r3, #1
 800c8b4:	613b      	str	r3, [r7, #16]
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	2b01      	cmp	r3, #1
 800c8ba:	d8eb      	bhi.n	800c894 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800c8bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3718      	adds	r7, #24
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}

0800c8c6 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800c8c6:	b580      	push	{r7, lr}
 800c8c8:	b084      	sub	sp, #16
 800c8ca:	af00      	add	r7, sp, #0
 800c8cc:	6078      	str	r0, [r7, #4]
 800c8ce:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800c8da:	683a      	ldr	r2, [r7, #0]
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	d01b      	beq.n	800c918 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f7ff ffa7 	bl	800c834 <sync_window>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c8ea:	7bfb      	ldrb	r3, [r7, #15]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d113      	bne.n	800c918 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c8f6:	6879      	ldr	r1, [r7, #4]
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	683a      	ldr	r2, [r7, #0]
 800c8fc:	f7ff fd14 	bl	800c328 <disk_read>
 800c900:	4603      	mov	r3, r0
 800c902:	2b00      	cmp	r3, #0
 800c904:	d004      	beq.n	800c910 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c90a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c90c:	2301      	movs	r3, #1
 800c90e:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	683a      	ldr	r2, [r7, #0]
 800c914:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 800c918:	7bfb      	ldrb	r3, [r7, #15]
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	3710      	adds	r7, #16
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}

0800c922 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800c922:	b580      	push	{r7, lr}
 800c924:	b084      	sub	sp, #16
 800c926:	af00      	add	r7, sp, #0
 800c928:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f7ff ff82 	bl	800c834 <sync_window>
 800c930:	4603      	mov	r3, r0
 800c932:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c934:	7bfb      	ldrb	r3, [r7, #15]
 800c936:	2b00      	cmp	r3, #0
 800c938:	f040 809b 	bne.w	800ca72 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c942:	2b03      	cmp	r3, #3
 800c944:	f040 8088 	bne.w	800ca58 <sync_fs+0x136>
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800c94e:	2b01      	cmp	r3, #1
 800c950:	f040 8082 	bne.w	800ca58 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c95a:	2100      	movs	r1, #0
 800c95c:	4618      	mov	r0, r3
 800c95e:	f7ff fd5e 	bl	800c41e <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2255      	movs	r2, #85	; 0x55
 800c966:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	22aa      	movs	r2, #170	; 0xaa
 800c96e:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2252      	movs	r2, #82	; 0x52
 800c976:	701a      	strb	r2, [r3, #0]
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2252      	movs	r2, #82	; 0x52
 800c97c:	705a      	strb	r2, [r3, #1]
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2261      	movs	r2, #97	; 0x61
 800c982:	709a      	strb	r2, [r3, #2]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2241      	movs	r2, #65	; 0x41
 800c988:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2272      	movs	r2, #114	; 0x72
 800c98e:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2272      	movs	r2, #114	; 0x72
 800c996:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2241      	movs	r2, #65	; 0x41
 800c99e:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2261      	movs	r2, #97	; 0x61
 800c9a6:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c9b0:	b2da      	uxtb	r2, r3
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c9be:	b29b      	uxth	r3, r3
 800c9c0:	0a1b      	lsrs	r3, r3, #8
 800c9c2:	b29b      	uxth	r3, r3
 800c9c4:	b2da      	uxtb	r2, r3
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c9d2:	0c1b      	lsrs	r3, r3, #16
 800c9d4:	b2da      	uxtb	r2, r3
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c9e2:	0e1b      	lsrs	r3, r3, #24
 800c9e4:	b2da      	uxtb	r2, r3
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c9f2:	b2da      	uxtb	r2, r3
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800ca00:	b29b      	uxth	r3, r3
 800ca02:	0a1b      	lsrs	r3, r3, #8
 800ca04:	b29b      	uxth	r3, r3
 800ca06:	b2da      	uxtb	r2, r3
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800ca14:	0c1b      	lsrs	r3, r3, #16
 800ca16:	b2da      	uxtb	r2, r3
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800ca24:	0e1b      	lsrs	r3, r3, #24
 800ca26:	b2da      	uxtb	r2, r3
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800ca34:	1c5a      	adds	r2, r3, #1
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800ca42:	6879      	ldr	r1, [r7, #4]
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	f7ff fc8c 	bl	800c368 <disk_write>
			fs->fsi_flag = 0;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2200      	movs	r2, #0
 800ca54:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800ca5e:	2200      	movs	r2, #0
 800ca60:	2100      	movs	r1, #0
 800ca62:	4618      	mov	r0, r3
 800ca64:	f7ff fca0 	bl	800c3a8 <disk_ioctl>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d001      	beq.n	800ca72 <sync_fs+0x150>
			res = FR_DISK_ERR;
 800ca6e:	2301      	movs	r3, #1
 800ca70:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ca72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3710      	adds	r7, #16
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}

0800ca7c <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b083      	sub	sp, #12
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	3b02      	subs	r3, #2
 800ca8a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ca92:	3b02      	subs	r3, #2
 800ca94:	683a      	ldr	r2, [r7, #0]
 800ca96:	429a      	cmp	r2, r3
 800ca98:	d301      	bcc.n	800ca9e <clust2sect+0x22>
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	e00a      	b.n	800cab4 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800caa4:	461a      	mov	r2, r3
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	fb03 f202 	mul.w	r2, r3, r2
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800cab2:	4413      	add	r3, r2
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	370c      	adds	r7, #12
 800cab8:	46bd      	mov	sp, r7
 800caba:	bc80      	pop	{r7}
 800cabc:	4770      	bx	lr

0800cabe <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800cabe:	b580      	push	{r7, lr}
 800cac0:	b086      	sub	sp, #24
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	6078      	str	r0, [r7, #4]
 800cac6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	2b01      	cmp	r3, #1
 800cacc:	d905      	bls.n	800cada <get_fat+0x1c>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cad4:	683a      	ldr	r2, [r7, #0]
 800cad6:	429a      	cmp	r2, r3
 800cad8:	d302      	bcc.n	800cae0 <get_fat+0x22>
		val = 1;	/* Internal error */
 800cada:	2301      	movs	r3, #1
 800cadc:	617b      	str	r3, [r7, #20]
 800cade:	e0a0      	b.n	800cc22 <get_fat+0x164>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cae4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800caec:	2b02      	cmp	r3, #2
 800caee:	d044      	beq.n	800cb7a <get_fat+0xbc>
 800caf0:	2b03      	cmp	r3, #3
 800caf2:	d063      	beq.n	800cbbc <get_fat+0xfe>
 800caf4:	2b01      	cmp	r3, #1
 800caf6:	f040 808a 	bne.w	800cc0e <get_fat+0x150>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	60fb      	str	r3, [r7, #12]
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	085b      	lsrs	r3, r3, #1
 800cb02:	68fa      	ldr	r2, [r7, #12]
 800cb04:	4413      	add	r3, r2
 800cb06:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	0a5b      	lsrs	r3, r3, #9
 800cb12:	4413      	add	r3, r2
 800cb14:	4619      	mov	r1, r3
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f7ff fed5 	bl	800c8c6 <move_window>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d178      	bne.n	800cc14 <get_fat+0x156>
			wc = fs->win.d8[bc++ % SS(fs)];
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	1c5a      	adds	r2, r3, #1
 800cb26:	60fa      	str	r2, [r7, #12]
 800cb28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb2c:	687a      	ldr	r2, [r7, #4]
 800cb2e:	5cd3      	ldrb	r3, [r2, r3]
 800cb30:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	0a5b      	lsrs	r3, r3, #9
 800cb3c:	4413      	add	r3, r2
 800cb3e:	4619      	mov	r1, r3
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f7ff fec0 	bl	800c8c6 <move_window>
 800cb46:	4603      	mov	r3, r0
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d165      	bne.n	800cc18 <get_fat+0x15a>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb52:	687a      	ldr	r2, [r7, #4]
 800cb54:	5cd3      	ldrb	r3, [r2, r3]
 800cb56:	021b      	lsls	r3, r3, #8
 800cb58:	461a      	mov	r2, r3
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	4313      	orrs	r3, r2
 800cb5e:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	f003 0301 	and.w	r3, r3, #1
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d002      	beq.n	800cb70 <get_fat+0xb2>
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	091b      	lsrs	r3, r3, #4
 800cb6e:	e002      	b.n	800cb76 <get_fat+0xb8>
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cb76:	617b      	str	r3, [r7, #20]
			break;
 800cb78:	e053      	b.n	800cc22 <get_fat+0x164>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	0a1b      	lsrs	r3, r3, #8
 800cb84:	4413      	add	r3, r2
 800cb86:	4619      	mov	r1, r3
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f7ff fe9c 	bl	800c8c6 <move_window>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d143      	bne.n	800cc1c <get_fat+0x15e>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	005b      	lsls	r3, r3, #1
 800cb98:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800cb9c:	687a      	ldr	r2, [r7, #4]
 800cb9e:	4413      	add	r3, r2
 800cba0:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	3301      	adds	r3, #1
 800cba6:	781b      	ldrb	r3, [r3, #0]
 800cba8:	021b      	lsls	r3, r3, #8
 800cbaa:	b21a      	sxth	r2, r3
 800cbac:	693b      	ldr	r3, [r7, #16]
 800cbae:	781b      	ldrb	r3, [r3, #0]
 800cbb0:	b21b      	sxth	r3, r3
 800cbb2:	4313      	orrs	r3, r2
 800cbb4:	b21b      	sxth	r3, r3
 800cbb6:	b29b      	uxth	r3, r3
 800cbb8:	617b      	str	r3, [r7, #20]
			break;
 800cbba:	e032      	b.n	800cc22 <get_fat+0x164>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	09db      	lsrs	r3, r3, #7
 800cbc6:	4413      	add	r3, r2
 800cbc8:	4619      	mov	r1, r3
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f7ff fe7b 	bl	800c8c6 <move_window>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d124      	bne.n	800cc20 <get_fat+0x162>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	009b      	lsls	r3, r3, #2
 800cbda:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cbde:	687a      	ldr	r2, [r7, #4]
 800cbe0:	4413      	add	r3, r2
 800cbe2:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	3303      	adds	r3, #3
 800cbe8:	781b      	ldrb	r3, [r3, #0]
 800cbea:	061a      	lsls	r2, r3, #24
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	3302      	adds	r3, #2
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	041b      	lsls	r3, r3, #16
 800cbf4:	4313      	orrs	r3, r2
 800cbf6:	693a      	ldr	r2, [r7, #16]
 800cbf8:	3201      	adds	r2, #1
 800cbfa:	7812      	ldrb	r2, [r2, #0]
 800cbfc:	0212      	lsls	r2, r2, #8
 800cbfe:	4313      	orrs	r3, r2
 800cc00:	693a      	ldr	r2, [r7, #16]
 800cc02:	7812      	ldrb	r2, [r2, #0]
 800cc04:	4313      	orrs	r3, r2
 800cc06:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cc0a:	617b      	str	r3, [r7, #20]
			break;
 800cc0c:	e009      	b.n	800cc22 <get_fat+0x164>

		default:
			val = 1;	/* Internal error */
 800cc0e:	2301      	movs	r3, #1
 800cc10:	617b      	str	r3, [r7, #20]
 800cc12:	e006      	b.n	800cc22 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cc14:	bf00      	nop
 800cc16:	e004      	b.n	800cc22 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cc18:	bf00      	nop
 800cc1a:	e002      	b.n	800cc22 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cc1c:	bf00      	nop
 800cc1e:	e000      	b.n	800cc22 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cc20:	bf00      	nop
		}
	}

	return val;
 800cc22:	697b      	ldr	r3, [r7, #20]
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	3718      	adds	r7, #24
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}

0800cc2c <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b088      	sub	sp, #32
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	60f8      	str	r0, [r7, #12]
 800cc34:	60b9      	str	r1, [r7, #8]
 800cc36:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	2b01      	cmp	r3, #1
 800cc3c:	d905      	bls.n	800cc4a <put_fat+0x1e>
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cc44:	68ba      	ldr	r2, [r7, #8]
 800cc46:	429a      	cmp	r2, r3
 800cc48:	d302      	bcc.n	800cc50 <put_fat+0x24>
		res = FR_INT_ERR;
 800cc4a:	2302      	movs	r3, #2
 800cc4c:	77fb      	strb	r3, [r7, #31]
 800cc4e:	e0f3      	b.n	800ce38 <put_fat+0x20c>

	} else {
		switch (fs->fs_type) {
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cc56:	2b02      	cmp	r3, #2
 800cc58:	d074      	beq.n	800cd44 <put_fat+0x118>
 800cc5a:	2b03      	cmp	r3, #3
 800cc5c:	f000 8099 	beq.w	800cd92 <put_fat+0x166>
 800cc60:	2b01      	cmp	r3, #1
 800cc62:	f040 80df 	bne.w	800ce24 <put_fat+0x1f8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	617b      	str	r3, [r7, #20]
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	085b      	lsrs	r3, r3, #1
 800cc6e:	697a      	ldr	r2, [r7, #20]
 800cc70:	4413      	add	r3, r2
 800cc72:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	0a5b      	lsrs	r3, r3, #9
 800cc7e:	4413      	add	r3, r2
 800cc80:	4619      	mov	r1, r3
 800cc82:	68f8      	ldr	r0, [r7, #12]
 800cc84:	f7ff fe1f 	bl	800c8c6 <move_window>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cc8c:	7ffb      	ldrb	r3, [r7, #31]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	f040 80cb 	bne.w	800ce2a <put_fat+0x1fe>
			p = &fs->win.d8[bc++ % SS(fs)];
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	1c5a      	adds	r2, r3, #1
 800cc98:	617a      	str	r2, [r7, #20]
 800cc9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc9e:	68fa      	ldr	r2, [r7, #12]
 800cca0:	4413      	add	r3, r2
 800cca2:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	f003 0301 	and.w	r3, r3, #1
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d00d      	beq.n	800ccca <put_fat+0x9e>
 800ccae:	69bb      	ldr	r3, [r7, #24]
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	b25b      	sxtb	r3, r3
 800ccb4:	f003 030f 	and.w	r3, r3, #15
 800ccb8:	b25a      	sxtb	r2, r3
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	b2db      	uxtb	r3, r3
 800ccbe:	011b      	lsls	r3, r3, #4
 800ccc0:	b25b      	sxtb	r3, r3
 800ccc2:	4313      	orrs	r3, r2
 800ccc4:	b25b      	sxtb	r3, r3
 800ccc6:	b2db      	uxtb	r3, r3
 800ccc8:	e001      	b.n	800ccce <put_fat+0xa2>
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	b2db      	uxtb	r3, r3
 800ccce:	69ba      	ldr	r2, [r7, #24]
 800ccd0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	2201      	movs	r2, #1
 800ccd6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	0a5b      	lsrs	r3, r3, #9
 800cce4:	4413      	add	r3, r2
 800cce6:	4619      	mov	r1, r3
 800cce8:	68f8      	ldr	r0, [r7, #12]
 800ccea:	f7ff fdec 	bl	800c8c6 <move_window>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ccf2:	7ffb      	ldrb	r3, [r7, #31]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	f040 809a 	bne.w	800ce2e <put_fat+0x202>
			p = &fs->win.d8[bc % SS(fs)];
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd00:	68fa      	ldr	r2, [r7, #12]
 800cd02:	4413      	add	r3, r2
 800cd04:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800cd06:	68bb      	ldr	r3, [r7, #8]
 800cd08:	f003 0301 	and.w	r3, r3, #1
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d003      	beq.n	800cd18 <put_fat+0xec>
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	091b      	lsrs	r3, r3, #4
 800cd14:	b2db      	uxtb	r3, r3
 800cd16:	e00e      	b.n	800cd36 <put_fat+0x10a>
 800cd18:	69bb      	ldr	r3, [r7, #24]
 800cd1a:	781b      	ldrb	r3, [r3, #0]
 800cd1c:	b25b      	sxtb	r3, r3
 800cd1e:	f023 030f 	bic.w	r3, r3, #15
 800cd22:	b25a      	sxtb	r2, r3
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	0a1b      	lsrs	r3, r3, #8
 800cd28:	b25b      	sxtb	r3, r3
 800cd2a:	f003 030f 	and.w	r3, r3, #15
 800cd2e:	b25b      	sxtb	r3, r3
 800cd30:	4313      	orrs	r3, r2
 800cd32:	b25b      	sxtb	r3, r3
 800cd34:	b2db      	uxtb	r3, r3
 800cd36:	69ba      	ldr	r2, [r7, #24]
 800cd38:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	2201      	movs	r2, #1
 800cd3e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800cd42:	e079      	b.n	800ce38 <put_fat+0x20c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	0a1b      	lsrs	r3, r3, #8
 800cd4e:	4413      	add	r3, r2
 800cd50:	4619      	mov	r1, r3
 800cd52:	68f8      	ldr	r0, [r7, #12]
 800cd54:	f7ff fdb7 	bl	800c8c6 <move_window>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cd5c:	7ffb      	ldrb	r3, [r7, #31]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d167      	bne.n	800ce32 <put_fat+0x206>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	005b      	lsls	r3, r3, #1
 800cd66:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800cd6a:	68fa      	ldr	r2, [r7, #12]
 800cd6c:	4413      	add	r3, r2
 800cd6e:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	b2da      	uxtb	r2, r3
 800cd74:	69bb      	ldr	r3, [r7, #24]
 800cd76:	701a      	strb	r2, [r3, #0]
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	b29b      	uxth	r3, r3
 800cd7c:	0a1b      	lsrs	r3, r3, #8
 800cd7e:	b29a      	uxth	r2, r3
 800cd80:	69bb      	ldr	r3, [r7, #24]
 800cd82:	3301      	adds	r3, #1
 800cd84:	b2d2      	uxtb	r2, r2
 800cd86:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800cd90:	e052      	b.n	800ce38 <put_fat+0x20c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	09db      	lsrs	r3, r3, #7
 800cd9c:	4413      	add	r3, r2
 800cd9e:	4619      	mov	r1, r3
 800cda0:	68f8      	ldr	r0, [r7, #12]
 800cda2:	f7ff fd90 	bl	800c8c6 <move_window>
 800cda6:	4603      	mov	r3, r0
 800cda8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cdaa:	7ffb      	ldrb	r3, [r7, #31]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d142      	bne.n	800ce36 <put_fat+0x20a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	009b      	lsls	r3, r3, #2
 800cdb4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cdb8:	68fa      	ldr	r2, [r7, #12]
 800cdba:	4413      	add	r3, r2
 800cdbc:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800cdbe:	69bb      	ldr	r3, [r7, #24]
 800cdc0:	3303      	adds	r3, #3
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	061a      	lsls	r2, r3, #24
 800cdc6:	69bb      	ldr	r3, [r7, #24]
 800cdc8:	3302      	adds	r3, #2
 800cdca:	781b      	ldrb	r3, [r3, #0]
 800cdcc:	041b      	lsls	r3, r3, #16
 800cdce:	4313      	orrs	r3, r2
 800cdd0:	69ba      	ldr	r2, [r7, #24]
 800cdd2:	3201      	adds	r2, #1
 800cdd4:	7812      	ldrb	r2, [r2, #0]
 800cdd6:	0212      	lsls	r2, r2, #8
 800cdd8:	4313      	orrs	r3, r2
 800cdda:	69ba      	ldr	r2, [r7, #24]
 800cddc:	7812      	ldrb	r2, [r2, #0]
 800cdde:	4313      	orrs	r3, r2
 800cde0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cde4:	687a      	ldr	r2, [r7, #4]
 800cde6:	4313      	orrs	r3, r2
 800cde8:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	b2da      	uxtb	r2, r3
 800cdee:	69bb      	ldr	r3, [r7, #24]
 800cdf0:	701a      	strb	r2, [r3, #0]
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	b29b      	uxth	r3, r3
 800cdf6:	0a1b      	lsrs	r3, r3, #8
 800cdf8:	b29a      	uxth	r2, r3
 800cdfa:	69bb      	ldr	r3, [r7, #24]
 800cdfc:	3301      	adds	r3, #1
 800cdfe:	b2d2      	uxtb	r2, r2
 800ce00:	701a      	strb	r2, [r3, #0]
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	0c1a      	lsrs	r2, r3, #16
 800ce06:	69bb      	ldr	r3, [r7, #24]
 800ce08:	3302      	adds	r3, #2
 800ce0a:	b2d2      	uxtb	r2, r2
 800ce0c:	701a      	strb	r2, [r3, #0]
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	0e1a      	lsrs	r2, r3, #24
 800ce12:	69bb      	ldr	r3, [r7, #24]
 800ce14:	3303      	adds	r3, #3
 800ce16:	b2d2      	uxtb	r2, r2
 800ce18:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	2201      	movs	r2, #1
 800ce1e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800ce22:	e009      	b.n	800ce38 <put_fat+0x20c>

		default :
			res = FR_INT_ERR;
 800ce24:	2302      	movs	r3, #2
 800ce26:	77fb      	strb	r3, [r7, #31]
 800ce28:	e006      	b.n	800ce38 <put_fat+0x20c>
			if (res != FR_OK) break;
 800ce2a:	bf00      	nop
 800ce2c:	e004      	b.n	800ce38 <put_fat+0x20c>
			if (res != FR_OK) break;
 800ce2e:	bf00      	nop
 800ce30:	e002      	b.n	800ce38 <put_fat+0x20c>
			if (res != FR_OK) break;
 800ce32:	bf00      	nop
 800ce34:	e000      	b.n	800ce38 <put_fat+0x20c>
			if (res != FR_OK) break;
 800ce36:	bf00      	nop
		}
	}

	return res;
 800ce38:	7ffb      	ldrb	r3, [r7, #31]
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3720      	adds	r7, #32
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}

0800ce42 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800ce42:	b580      	push	{r7, lr}
 800ce44:	b084      	sub	sp, #16
 800ce46:	af00      	add	r7, sp, #0
 800ce48:	6078      	str	r0, [r7, #4]
 800ce4a:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	2b01      	cmp	r3, #1
 800ce50:	d905      	bls.n	800ce5e <remove_chain+0x1c>
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ce58:	683a      	ldr	r2, [r7, #0]
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d302      	bcc.n	800ce64 <remove_chain+0x22>
		res = FR_INT_ERR;
 800ce5e:	2302      	movs	r3, #2
 800ce60:	73fb      	strb	r3, [r7, #15]
 800ce62:	e043      	b.n	800ceec <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800ce64:	2300      	movs	r3, #0
 800ce66:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800ce68:	e036      	b.n	800ced8 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800ce6a:	6839      	ldr	r1, [r7, #0]
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f7ff fe26 	bl	800cabe <get_fat>
 800ce72:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d035      	beq.n	800cee6 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	2b01      	cmp	r3, #1
 800ce7e:	d102      	bne.n	800ce86 <remove_chain+0x44>
 800ce80:	2302      	movs	r3, #2
 800ce82:	73fb      	strb	r3, [r7, #15]
 800ce84:	e032      	b.n	800ceec <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce8c:	d102      	bne.n	800ce94 <remove_chain+0x52>
 800ce8e:	2301      	movs	r3, #1
 800ce90:	73fb      	strb	r3, [r7, #15]
 800ce92:	e02b      	b.n	800ceec <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800ce94:	2200      	movs	r2, #0
 800ce96:	6839      	ldr	r1, [r7, #0]
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f7ff fec7 	bl	800cc2c <put_fat>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800cea2:	7bfb      	ldrb	r3, [r7, #15]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d120      	bne.n	800ceea <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ceae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ceb2:	d00f      	beq.n	800ced4 <remove_chain+0x92>
				fs->free_clust++;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ceba:	1c5a      	adds	r2, r3, #1
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800cec8:	f043 0301 	orr.w	r3, r3, #1
 800cecc:	b2da      	uxtb	r2, r3
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cede:	683a      	ldr	r2, [r7, #0]
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d3c2      	bcc.n	800ce6a <remove_chain+0x28>
 800cee4:	e002      	b.n	800ceec <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800cee6:	bf00      	nop
 800cee8:	e000      	b.n	800ceec <remove_chain+0xaa>
			if (res != FR_OK) break;
 800ceea:	bf00      	nop
		}
	}

	return res;
 800ceec:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3710      	adds	r7, #16
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}

0800cef6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800cef6:	b580      	push	{r7, lr}
 800cef8:	b086      	sub	sp, #24
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	6078      	str	r0, [r7, #4]
 800cefe:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d10f      	bne.n	800cf26 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800cf0c:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d005      	beq.n	800cf20 <create_chain+0x2a>
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cf1a:	693a      	ldr	r2, [r7, #16]
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	d31c      	bcc.n	800cf5a <create_chain+0x64>
 800cf20:	2301      	movs	r3, #1
 800cf22:	613b      	str	r3, [r7, #16]
 800cf24:	e019      	b.n	800cf5a <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800cf26:	6839      	ldr	r1, [r7, #0]
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f7ff fdc8 	bl	800cabe <get_fat>
 800cf2e:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	2b01      	cmp	r3, #1
 800cf34:	d801      	bhi.n	800cf3a <create_chain+0x44>
 800cf36:	2301      	movs	r3, #1
 800cf38:	e076      	b.n	800d028 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf40:	d101      	bne.n	800cf46 <create_chain+0x50>
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	e070      	b.n	800d028 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cf4c:	68ba      	ldr	r2, [r7, #8]
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d201      	bcs.n	800cf56 <create_chain+0x60>
 800cf52:	68bb      	ldr	r3, [r7, #8]
 800cf54:	e068      	b.n	800d028 <create_chain+0x132>
		scl = clst;
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	3301      	adds	r3, #1
 800cf62:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cf6a:	697a      	ldr	r2, [r7, #20]
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	d307      	bcc.n	800cf80 <create_chain+0x8a>
			ncl = 2;
 800cf70:	2302      	movs	r3, #2
 800cf72:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800cf74:	697a      	ldr	r2, [r7, #20]
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d901      	bls.n	800cf80 <create_chain+0x8a>
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	e053      	b.n	800d028 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800cf80:	6979      	ldr	r1, [r7, #20]
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f7ff fd9b 	bl	800cabe <get_fat>
 800cf88:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d00e      	beq.n	800cfae <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf96:	d002      	beq.n	800cf9e <create_chain+0xa8>
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	2b01      	cmp	r3, #1
 800cf9c:	d101      	bne.n	800cfa2 <create_chain+0xac>
			return cs;
 800cf9e:	68bb      	ldr	r3, [r7, #8]
 800cfa0:	e042      	b.n	800d028 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800cfa2:	697a      	ldr	r2, [r7, #20]
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	d1d9      	bne.n	800cf5e <create_chain+0x68>
 800cfaa:	2300      	movs	r3, #0
 800cfac:	e03c      	b.n	800d028 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800cfae:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800cfb0:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800cfb4:	6979      	ldr	r1, [r7, #20]
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f7ff fe38 	bl	800cc2c <put_fat>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800cfc0:	7bfb      	ldrb	r3, [r7, #15]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d109      	bne.n	800cfda <create_chain+0xe4>
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d006      	beq.n	800cfda <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800cfcc:	697a      	ldr	r2, [r7, #20]
 800cfce:	6839      	ldr	r1, [r7, #0]
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	f7ff fe2b 	bl	800cc2c <put_fat>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800cfda:	7bfb      	ldrb	r3, [r7, #15]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d11a      	bne.n	800d016 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	697a      	ldr	r2, [r7, #20]
 800cfe4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800cfee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cff2:	d018      	beq.n	800d026 <create_chain+0x130>
			fs->free_clust--;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800cffa:	1e5a      	subs	r2, r3, #1
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800d008:	f043 0301 	orr.w	r3, r3, #1
 800d00c:	b2da      	uxtb	r2, r3
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 800d014:	e007      	b.n	800d026 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800d016:	7bfb      	ldrb	r3, [r7, #15]
 800d018:	2b01      	cmp	r3, #1
 800d01a:	d102      	bne.n	800d022 <create_chain+0x12c>
 800d01c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d020:	e000      	b.n	800d024 <create_chain+0x12e>
 800d022:	2301      	movs	r3, #1
 800d024:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800d026:	697b      	ldr	r3, [r7, #20]
}
 800d028:	4618      	mov	r0, r3
 800d02a:	3718      	adds	r7, #24
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}

0800d030 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800d030:	b480      	push	{r7}
 800d032:	b087      	sub	sp, #28
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
 800d038:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800d040:	3304      	adds	r3, #4
 800d042:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	0a5b      	lsrs	r3, r3, #9
 800d048:	687a      	ldr	r2, [r7, #4]
 800d04a:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800d04e:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800d052:	fbb3 f3f2 	udiv	r3, r3, r2
 800d056:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d058:	693b      	ldr	r3, [r7, #16]
 800d05a:	1d1a      	adds	r2, r3, #4
 800d05c:	613a      	str	r2, [r7, #16]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d101      	bne.n	800d06c <clmt_clust+0x3c>
 800d068:	2300      	movs	r3, #0
 800d06a:	e010      	b.n	800d08e <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800d06c:	697a      	ldr	r2, [r7, #20]
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	429a      	cmp	r2, r3
 800d072:	d307      	bcc.n	800d084 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 800d074:	697a      	ldr	r2, [r7, #20]
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	1ad3      	subs	r3, r2, r3
 800d07a:	617b      	str	r3, [r7, #20]
 800d07c:	693b      	ldr	r3, [r7, #16]
 800d07e:	3304      	adds	r3, #4
 800d080:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d082:	e7e9      	b.n	800d058 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800d084:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d086:	693b      	ldr	r3, [r7, #16]
 800d088:	681a      	ldr	r2, [r3, #0]
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	4413      	add	r3, r2
}
 800d08e:	4618      	mov	r0, r3
 800d090:	371c      	adds	r7, #28
 800d092:	46bd      	mov	sp, r7
 800d094:	bc80      	pop	{r7}
 800d096:	4770      	bx	lr

0800d098 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b086      	sub	sp, #24
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
 800d0a0:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	b29a      	uxth	r2, r3
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d0b2:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	2b01      	cmp	r3, #1
 800d0b8:	d007      	beq.n	800d0ca <dir_sdi+0x32>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d0c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d0c4:	697a      	ldr	r2, [r7, #20]
 800d0c6:	429a      	cmp	r2, r3
 800d0c8:	d301      	bcc.n	800d0ce <dir_sdi+0x36>
		return FR_INT_ERR;
 800d0ca:	2302      	movs	r3, #2
 800d0cc:	e074      	b.n	800d1b8 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d10c      	bne.n	800d0ee <dir_sdi+0x56>
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d0da:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d0de:	2b03      	cmp	r3, #3
 800d0e0:	d105      	bne.n	800d0ee <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d0e8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800d0ec:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d111      	bne.n	800d118 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d0fa:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800d0fe:	461a      	mov	r2, r3
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	4293      	cmp	r3, r2
 800d104:	d301      	bcc.n	800d10a <dir_sdi+0x72>
			return FR_INT_ERR;
 800d106:	2302      	movs	r3, #2
 800d108:	e056      	b.n	800d1b8 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d110:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800d114:	613b      	str	r3, [r7, #16]
 800d116:	e032      	b.n	800d17e <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d11e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800d122:	011b      	lsls	r3, r3, #4
 800d124:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800d126:	e01e      	b.n	800d166 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d12e:	6979      	ldr	r1, [r7, #20]
 800d130:	4618      	mov	r0, r3
 800d132:	f7ff fcc4 	bl	800cabe <get_fat>
 800d136:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d138:	697b      	ldr	r3, [r7, #20]
 800d13a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d13e:	d101      	bne.n	800d144 <dir_sdi+0xac>
 800d140:	2301      	movs	r3, #1
 800d142:	e039      	b.n	800d1b8 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	2b01      	cmp	r3, #1
 800d148:	d907      	bls.n	800d15a <dir_sdi+0xc2>
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d150:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d154:	697a      	ldr	r2, [r7, #20]
 800d156:	429a      	cmp	r2, r3
 800d158:	d301      	bcc.n	800d15e <dir_sdi+0xc6>
				return FR_INT_ERR;
 800d15a:	2302      	movs	r3, #2
 800d15c:	e02c      	b.n	800d1b8 <dir_sdi+0x120>
			idx -= ic;
 800d15e:	683a      	ldr	r2, [r7, #0]
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	1ad3      	subs	r3, r2, r3
 800d164:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800d166:	683a      	ldr	r2, [r7, #0]
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d2dc      	bcs.n	800d128 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d174:	6979      	ldr	r1, [r7, #20]
 800d176:	4618      	mov	r0, r3
 800d178:	f7ff fc80 	bl	800ca7c <clust2sect>
 800d17c:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	697a      	ldr	r2, [r7, #20]
 800d182:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d101      	bne.n	800d190 <dir_sdi+0xf8>
 800d18c:	2302      	movs	r3, #2
 800d18e:	e013      	b.n	800d1b8 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	091a      	lsrs	r2, r3, #4
 800d194:	693b      	ldr	r3, [r7, #16]
 800d196:	441a      	add	r2, r3
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d1a4:	461a      	mov	r2, r3
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	f003 030f 	and.w	r3, r3, #15
 800d1ac:	015b      	lsls	r3, r3, #5
 800d1ae:	441a      	add	r2, r3
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800d1b6:	2300      	movs	r3, #0
}
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3718      	adds	r7, #24
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}

0800d1c0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d1c0:	b590      	push	{r4, r7, lr}
 800d1c2:	b087      	sub	sp, #28
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800d1d0:	3301      	adds	r3, #1
 800d1d2:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	b29b      	uxth	r3, r3
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d004      	beq.n	800d1e6 <dir_next+0x26>
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d101      	bne.n	800d1ea <dir_next+0x2a>
		return FR_NO_FILE;
 800d1e6:	2304      	movs	r3, #4
 800d1e8:	e0dd      	b.n	800d3a6 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	f003 030f 	and.w	r3, r3, #15
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	f040 80c6 	bne.w	800d382 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d1fc:	1c5a      	adds	r2, r3, #1
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d10b      	bne.n	800d226 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d214:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800d218:	461a      	mov	r2, r3
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	4293      	cmp	r3, r2
 800d21e:	f0c0 80b0 	bcc.w	800d382 <dir_next+0x1c2>
				return FR_NO_FILE;
 800d222:	2304      	movs	r3, #4
 800d224:	e0bf      	b.n	800d3a6 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	091b      	lsrs	r3, r3, #4
 800d22a:	687a      	ldr	r2, [r7, #4]
 800d22c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800d230:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800d234:	3a01      	subs	r2, #1
 800d236:	4013      	ands	r3, r2
 800d238:	2b00      	cmp	r3, #0
 800d23a:	f040 80a2 	bne.w	800d382 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800d24a:	4619      	mov	r1, r3
 800d24c:	4610      	mov	r0, r2
 800d24e:	f7ff fc36 	bl	800cabe <get_fat>
 800d252:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	2b01      	cmp	r3, #1
 800d258:	d801      	bhi.n	800d25e <dir_next+0x9e>
 800d25a:	2302      	movs	r3, #2
 800d25c:	e0a3      	b.n	800d3a6 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d264:	d101      	bne.n	800d26a <dir_next+0xaa>
 800d266:	2301      	movs	r3, #1
 800d268:	e09d      	b.n	800d3a6 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d270:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d274:	697a      	ldr	r2, [r7, #20]
 800d276:	429a      	cmp	r2, r3
 800d278:	d374      	bcc.n	800d364 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d101      	bne.n	800d284 <dir_next+0xc4>
 800d280:	2304      	movs	r3, #4
 800d282:	e090      	b.n	800d3a6 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800d290:	4619      	mov	r1, r3
 800d292:	4610      	mov	r0, r2
 800d294:	f7ff fe2f 	bl	800cef6 <create_chain>
 800d298:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d101      	bne.n	800d2a4 <dir_next+0xe4>
 800d2a0:	2307      	movs	r3, #7
 800d2a2:	e080      	b.n	800d3a6 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	2b01      	cmp	r3, #1
 800d2a8:	d101      	bne.n	800d2ae <dir_next+0xee>
 800d2aa:	2302      	movs	r3, #2
 800d2ac:	e07b      	b.n	800d3a6 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800d2ae:	697b      	ldr	r3, [r7, #20]
 800d2b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d2b4:	d101      	bne.n	800d2ba <dir_next+0xfa>
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	e075      	b.n	800d3a6 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f7ff fab7 	bl	800c834 <sync_window>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d001      	beq.n	800d2d0 <dir_next+0x110>
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	e06a      	b.n	800d3a6 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d2d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d2da:	2100      	movs	r1, #0
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f7ff f89e 	bl	800c41e <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 800d2ee:	6979      	ldr	r1, [r7, #20]
 800d2f0:	4610      	mov	r0, r2
 800d2f2:	f7ff fbc3 	bl	800ca7c <clust2sect>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	613b      	str	r3, [r7, #16]
 800d300:	e01b      	b.n	800d33a <dir_next+0x17a>
						dp->fs->wflag = 1;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d308:	2201      	movs	r2, #1
 800d30a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d314:	4618      	mov	r0, r3
 800d316:	f7ff fa8d 	bl	800c834 <sync_window>
 800d31a:	4603      	mov	r3, r0
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d001      	beq.n	800d324 <dir_next+0x164>
 800d320:	2301      	movs	r3, #1
 800d322:	e040      	b.n	800d3a6 <dir_next+0x1e6>
						dp->fs->winsect++;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d32a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800d32e:	3201      	adds	r2, #1
 800d330:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	3301      	adds	r3, #1
 800d338:	613b      	str	r3, [r7, #16]
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d340:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800d344:	461a      	mov	r2, r3
 800d346:	693b      	ldr	r3, [r7, #16]
 800d348:	4293      	cmp	r3, r2
 800d34a:	d3da      	bcc.n	800d302 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d352:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d35c:	693a      	ldr	r2, [r7, #16]
 800d35e:	1a8a      	subs	r2, r1, r2
 800d360:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	697a      	ldr	r2, [r7, #20]
 800d368:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d372:	6979      	ldr	r1, [r7, #20]
 800d374:	4618      	mov	r0, r3
 800d376:	f7ff fb81 	bl	800ca7c <clust2sect>
 800d37a:	4602      	mov	r2, r0
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	b29a      	uxth	r2, r3
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d392:	461a      	mov	r2, r3
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	f003 030f 	and.w	r3, r3, #15
 800d39a:	015b      	lsls	r3, r3, #5
 800d39c:	441a      	add	r2, r3
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800d3a4:	2300      	movs	r3, #0
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	371c      	adds	r7, #28
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd90      	pop	{r4, r7, pc}

0800d3ae <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800d3ae:	b580      	push	{r7, lr}
 800d3b0:	b084      	sub	sp, #16
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	6078      	str	r0, [r7, #4]
 800d3b6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800d3b8:	2100      	movs	r1, #0
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f7ff fe6c 	bl	800d098 <dir_sdi>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d3c4:	7bfb      	ldrb	r3, [r7, #15]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d131      	bne.n	800d42e <dir_alloc+0x80>
		n = 0;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d3da:	4619      	mov	r1, r3
 800d3dc:	4610      	mov	r0, r2
 800d3de:	f7ff fa72 	bl	800c8c6 <move_window>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800d3e6:	7bfb      	ldrb	r3, [r7, #15]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d11f      	bne.n	800d42c <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d3f2:	781b      	ldrb	r3, [r3, #0]
 800d3f4:	2be5      	cmp	r3, #229	; 0xe5
 800d3f6:	d005      	beq.n	800d404 <dir_alloc+0x56>
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d3fe:	781b      	ldrb	r3, [r3, #0]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d107      	bne.n	800d414 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	3301      	adds	r3, #1
 800d408:	60bb      	str	r3, [r7, #8]
 800d40a:	68ba      	ldr	r2, [r7, #8]
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	429a      	cmp	r2, r3
 800d410:	d102      	bne.n	800d418 <dir_alloc+0x6a>
 800d412:	e00c      	b.n	800d42e <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d414:	2300      	movs	r3, #0
 800d416:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800d418:	2101      	movs	r1, #1
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	f7ff fed0 	bl	800d1c0 <dir_next>
 800d420:	4603      	mov	r3, r0
 800d422:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800d424:	7bfb      	ldrb	r3, [r7, #15]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d0d1      	beq.n	800d3ce <dir_alloc+0x20>
 800d42a:	e000      	b.n	800d42e <dir_alloc+0x80>
			if (res != FR_OK) break;
 800d42c:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d42e:	7bfb      	ldrb	r3, [r7, #15]
 800d430:	2b04      	cmp	r3, #4
 800d432:	d101      	bne.n	800d438 <dir_alloc+0x8a>
 800d434:	2307      	movs	r3, #7
 800d436:	73fb      	strb	r3, [r7, #15]
	return res;
 800d438:	7bfb      	ldrb	r3, [r7, #15]
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	3710      	adds	r7, #16
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}

0800d442 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800d442:	b480      	push	{r7}
 800d444:	b085      	sub	sp, #20
 800d446:	af00      	add	r7, sp, #0
 800d448:	6078      	str	r0, [r7, #4]
 800d44a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	331b      	adds	r3, #27
 800d450:	781b      	ldrb	r3, [r3, #0]
 800d452:	021b      	lsls	r3, r3, #8
 800d454:	b21a      	sxth	r2, r3
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	331a      	adds	r3, #26
 800d45a:	781b      	ldrb	r3, [r3, #0]
 800d45c:	b21b      	sxth	r3, r3
 800d45e:	4313      	orrs	r3, r2
 800d460:	b21b      	sxth	r3, r3
 800d462:	b29b      	uxth	r3, r3
 800d464:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d46c:	2b03      	cmp	r3, #3
 800d46e:	d10f      	bne.n	800d490 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	3315      	adds	r3, #21
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	021b      	lsls	r3, r3, #8
 800d478:	b21a      	sxth	r2, r3
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	3314      	adds	r3, #20
 800d47e:	781b      	ldrb	r3, [r3, #0]
 800d480:	b21b      	sxth	r3, r3
 800d482:	4313      	orrs	r3, r2
 800d484:	b21b      	sxth	r3, r3
 800d486:	b29b      	uxth	r3, r3
 800d488:	041b      	lsls	r3, r3, #16
 800d48a:	68fa      	ldr	r2, [r7, #12]
 800d48c:	4313      	orrs	r3, r2
 800d48e:	60fb      	str	r3, [r7, #12]

	return cl;
 800d490:	68fb      	ldr	r3, [r7, #12]
}
 800d492:	4618      	mov	r0, r3
 800d494:	3714      	adds	r7, #20
 800d496:	46bd      	mov	sp, r7
 800d498:	bc80      	pop	{r7}
 800d49a:	4770      	bx	lr

0800d49c <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800d49c:	b480      	push	{r7}
 800d49e:	b083      	sub	sp, #12
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
 800d4a4:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	331a      	adds	r3, #26
 800d4aa:	683a      	ldr	r2, [r7, #0]
 800d4ac:	b2d2      	uxtb	r2, r2
 800d4ae:	701a      	strb	r2, [r3, #0]
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	b29b      	uxth	r3, r3
 800d4b4:	0a1b      	lsrs	r3, r3, #8
 800d4b6:	b29a      	uxth	r2, r3
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	331b      	adds	r3, #27
 800d4bc:	b2d2      	uxtb	r2, r2
 800d4be:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	0c1a      	lsrs	r2, r3, #16
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	3314      	adds	r3, #20
 800d4c8:	b2d2      	uxtb	r2, r2
 800d4ca:	701a      	strb	r2, [r3, #0]
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	0c1b      	lsrs	r3, r3, #16
 800d4d0:	b29b      	uxth	r3, r3
 800d4d2:	0a1b      	lsrs	r3, r3, #8
 800d4d4:	b29a      	uxth	r2, r3
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	3315      	adds	r3, #21
 800d4da:	b2d2      	uxtb	r2, r2
 800d4dc:	701a      	strb	r2, [r3, #0]
}
 800d4de:	bf00      	nop
 800d4e0:	370c      	adds	r7, #12
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bc80      	pop	{r7}
 800d4e6:	4770      	bx	lr

0800d4e8 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b086      	sub	sp, #24
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d4f0:	2100      	movs	r1, #0
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f7ff fdd0 	bl	800d098 <dir_sdi>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d4fc:	7dfb      	ldrb	r3, [r7, #23]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d001      	beq.n	800d506 <dir_find+0x1e>
 800d502:	7dfb      	ldrb	r3, [r7, #23]
 800d504:	e03b      	b.n	800d57e <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d512:	4619      	mov	r1, r3
 800d514:	4610      	mov	r0, r2
 800d516:	f7ff f9d6 	bl	800c8c6 <move_window>
 800d51a:	4603      	mov	r3, r0
 800d51c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d51e:	7dfb      	ldrb	r3, [r7, #23]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d128      	bne.n	800d576 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d52a:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800d52c:	693b      	ldr	r3, [r7, #16]
 800d52e:	781b      	ldrb	r3, [r3, #0]
 800d530:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d532:	7bfb      	ldrb	r3, [r7, #15]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d102      	bne.n	800d53e <dir_find+0x56>
 800d538:	2304      	movs	r3, #4
 800d53a:	75fb      	strb	r3, [r7, #23]
 800d53c:	e01e      	b.n	800d57c <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	330b      	adds	r3, #11
 800d542:	781b      	ldrb	r3, [r3, #0]
 800d544:	f003 0308 	and.w	r3, r3, #8
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d10a      	bne.n	800d562 <dir_find+0x7a>
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d552:	220b      	movs	r2, #11
 800d554:	4619      	mov	r1, r3
 800d556:	6938      	ldr	r0, [r7, #16]
 800d558:	f7fe ff7a 	bl	800c450 <mem_cmp>
 800d55c:	4603      	mov	r3, r0
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d00b      	beq.n	800d57a <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800d562:	2100      	movs	r1, #0
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f7ff fe2b 	bl	800d1c0 <dir_next>
 800d56a:	4603      	mov	r3, r0
 800d56c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d56e:	7dfb      	ldrb	r3, [r7, #23]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d0c8      	beq.n	800d506 <dir_find+0x1e>
 800d574:	e002      	b.n	800d57c <dir_find+0x94>
		if (res != FR_OK) break;
 800d576:	bf00      	nop
 800d578:	e000      	b.n	800d57c <dir_find+0x94>
			break;
 800d57a:	bf00      	nop

	return res;
 800d57c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d57e:	4618      	mov	r0, r3
 800d580:	3718      	adds	r7, #24
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}

0800d586 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d586:	b580      	push	{r7, lr}
 800d588:	b084      	sub	sp, #16
 800d58a:	af00      	add	r7, sp, #0
 800d58c:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d58e:	2101      	movs	r1, #1
 800d590:	6878      	ldr	r0, [r7, #4]
 800d592:	f7ff ff0c 	bl	800d3ae <dir_alloc>
 800d596:	4603      	mov	r3, r0
 800d598:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800d59a:	7bfb      	ldrb	r3, [r7, #15]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d126      	bne.n	800d5ee <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d5ac:	4619      	mov	r1, r3
 800d5ae:	4610      	mov	r0, r2
 800d5b0:	f7ff f989 	bl	800c8c6 <move_window>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d5b8:	7bfb      	ldrb	r3, [r7, #15]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d117      	bne.n	800d5ee <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d5c4:	2220      	movs	r2, #32
 800d5c6:	2100      	movs	r1, #0
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	f7fe ff28 	bl	800c41e <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d5da:	220b      	movs	r2, #11
 800d5dc:	4619      	mov	r1, r3
 800d5de:	f7fe ff01 	bl	800c3e4 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d5e8:	2201      	movs	r2, #1
 800d5ea:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 800d5ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3710      	adds	r7, #16
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}

0800d5f8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800d5f8:	b480      	push	{r7}
 800d5fa:	b087      	sub	sp, #28
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
 800d600:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	3309      	adds	r3, #9
 800d606:	613b      	str	r3, [r7, #16]
	if (dp->sect) {		/* Get SFN */
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d05a      	beq.n	800d6c8 <get_fileinfo+0xd0>
		dir = dp->dir;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d618:	60bb      	str	r3, [r7, #8]
		i = 0;
 800d61a:	2300      	movs	r3, #0
 800d61c:	617b      	str	r3, [r7, #20]
		while (i < 11) {		/* Copy name body and extension */
 800d61e:	e01c      	b.n	800d65a <get_fileinfo+0x62>
			c = (TCHAR)dir[i++];
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	1c5a      	adds	r2, r3, #1
 800d624:	617a      	str	r2, [r7, #20]
 800d626:	68ba      	ldr	r2, [r7, #8]
 800d628:	4413      	add	r3, r2
 800d62a:	781b      	ldrb	r3, [r3, #0]
 800d62c:	73fb      	strb	r3, [r7, #15]
			if (c == ' ') continue;				/* Skip padding spaces */
 800d62e:	7bfb      	ldrb	r3, [r7, #15]
 800d630:	2b20      	cmp	r3, #32
 800d632:	d100      	bne.n	800d636 <get_fileinfo+0x3e>
 800d634:	e011      	b.n	800d65a <get_fileinfo+0x62>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800d636:	7bfb      	ldrb	r3, [r7, #15]
 800d638:	2b05      	cmp	r3, #5
 800d63a:	d101      	bne.n	800d640 <get_fileinfo+0x48>
 800d63c:	23e5      	movs	r3, #229	; 0xe5
 800d63e:	73fb      	strb	r3, [r7, #15]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	2b09      	cmp	r3, #9
 800d644:	d104      	bne.n	800d650 <get_fileinfo+0x58>
 800d646:	693b      	ldr	r3, [r7, #16]
 800d648:	1c5a      	adds	r2, r3, #1
 800d64a:	613a      	str	r2, [r7, #16]
 800d64c:	222e      	movs	r2, #46	; 0x2e
 800d64e:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	1c5a      	adds	r2, r3, #1
 800d654:	613a      	str	r2, [r7, #16]
 800d656:	7bfa      	ldrb	r2, [r7, #15]
 800d658:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	2b0a      	cmp	r3, #10
 800d65e:	d9df      	bls.n	800d620 <get_fileinfo+0x28>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	7ada      	ldrb	r2, [r3, #11]
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	331f      	adds	r3, #31
 800d66c:	781b      	ldrb	r3, [r3, #0]
 800d66e:	061a      	lsls	r2, r3, #24
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	331e      	adds	r3, #30
 800d674:	781b      	ldrb	r3, [r3, #0]
 800d676:	041b      	lsls	r3, r3, #16
 800d678:	4313      	orrs	r3, r2
 800d67a:	68ba      	ldr	r2, [r7, #8]
 800d67c:	321d      	adds	r2, #29
 800d67e:	7812      	ldrb	r2, [r2, #0]
 800d680:	0212      	lsls	r2, r2, #8
 800d682:	4313      	orrs	r3, r2
 800d684:	68ba      	ldr	r2, [r7, #8]
 800d686:	321c      	adds	r2, #28
 800d688:	7812      	ldrb	r2, [r2, #0]
 800d68a:	431a      	orrs	r2, r3
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	3319      	adds	r3, #25
 800d694:	781b      	ldrb	r3, [r3, #0]
 800d696:	021b      	lsls	r3, r3, #8
 800d698:	b21a      	sxth	r2, r3
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	3318      	adds	r3, #24
 800d69e:	781b      	ldrb	r3, [r3, #0]
 800d6a0:	b21b      	sxth	r3, r3
 800d6a2:	4313      	orrs	r3, r2
 800d6a4:	b21b      	sxth	r3, r3
 800d6a6:	b29a      	uxth	r2, r3
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	3317      	adds	r3, #23
 800d6b0:	781b      	ldrb	r3, [r3, #0]
 800d6b2:	021b      	lsls	r3, r3, #8
 800d6b4:	b21a      	sxth	r2, r3
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	3316      	adds	r3, #22
 800d6ba:	781b      	ldrb	r3, [r3, #0]
 800d6bc:	b21b      	sxth	r3, r3
 800d6be:	4313      	orrs	r3, r2
 800d6c0:	b21b      	sxth	r3, r3
 800d6c2:	b29a      	uxth	r2, r3
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 800d6c8:	693b      	ldr	r3, [r7, #16]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 800d6ce:	bf00      	nop
 800d6d0:	371c      	adds	r7, #28
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bc80      	pop	{r7}
 800d6d6:	4770      	bx	lr

0800d6d8 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b088      	sub	sp, #32
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
 800d6e0:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	60fb      	str	r3, [r7, #12]
 800d6e8:	e002      	b.n	800d6f0 <create_name+0x18>
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	3301      	adds	r3, #1
 800d6ee:	60fb      	str	r3, [r7, #12]
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	781b      	ldrb	r3, [r3, #0]
 800d6f4:	2b2f      	cmp	r3, #47	; 0x2f
 800d6f6:	d0f8      	beq.n	800d6ea <create_name+0x12>
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	781b      	ldrb	r3, [r3, #0]
 800d6fc:	2b5c      	cmp	r3, #92	; 0x5c
 800d6fe:	d0f4      	beq.n	800d6ea <create_name+0x12>
	sfn = dp->fn;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d706:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d708:	220b      	movs	r2, #11
 800d70a:	2120      	movs	r1, #32
 800d70c:	68b8      	ldr	r0, [r7, #8]
 800d70e:	f7fe fe86 	bl	800c41e <mem_set>
	si = i = b = 0; ni = 8;
 800d712:	2300      	movs	r3, #0
 800d714:	77fb      	strb	r3, [r7, #31]
 800d716:	2300      	movs	r3, #0
 800d718:	613b      	str	r3, [r7, #16]
 800d71a:	693b      	ldr	r3, [r7, #16]
 800d71c:	617b      	str	r3, [r7, #20]
 800d71e:	2308      	movs	r3, #8
 800d720:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	1c5a      	adds	r2, r3, #1
 800d726:	617a      	str	r2, [r7, #20]
 800d728:	68fa      	ldr	r2, [r7, #12]
 800d72a:	4413      	add	r3, r2
 800d72c:	781b      	ldrb	r3, [r3, #0]
 800d72e:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800d730:	7fbb      	ldrb	r3, [r7, #30]
 800d732:	2b20      	cmp	r3, #32
 800d734:	d953      	bls.n	800d7de <create_name+0x106>
 800d736:	7fbb      	ldrb	r3, [r7, #30]
 800d738:	2b2f      	cmp	r3, #47	; 0x2f
 800d73a:	d050      	beq.n	800d7de <create_name+0x106>
 800d73c:	7fbb      	ldrb	r3, [r7, #30]
 800d73e:	2b5c      	cmp	r3, #92	; 0x5c
 800d740:	d04d      	beq.n	800d7de <create_name+0x106>
		if (c == '.' || i >= ni) {
 800d742:	7fbb      	ldrb	r3, [r7, #30]
 800d744:	2b2e      	cmp	r3, #46	; 0x2e
 800d746:	d003      	beq.n	800d750 <create_name+0x78>
 800d748:	693a      	ldr	r2, [r7, #16]
 800d74a:	69bb      	ldr	r3, [r7, #24]
 800d74c:	429a      	cmp	r2, r3
 800d74e:	d30f      	bcc.n	800d770 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800d750:	69bb      	ldr	r3, [r7, #24]
 800d752:	2b08      	cmp	r3, #8
 800d754:	d102      	bne.n	800d75c <create_name+0x84>
 800d756:	7fbb      	ldrb	r3, [r7, #30]
 800d758:	2b2e      	cmp	r3, #46	; 0x2e
 800d75a:	d001      	beq.n	800d760 <create_name+0x88>
 800d75c:	2306      	movs	r3, #6
 800d75e:	e073      	b.n	800d848 <create_name+0x170>
			i = 8; ni = 11;
 800d760:	2308      	movs	r3, #8
 800d762:	613b      	str	r3, [r7, #16]
 800d764:	230b      	movs	r3, #11
 800d766:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800d768:	7ffb      	ldrb	r3, [r7, #31]
 800d76a:	009b      	lsls	r3, r3, #2
 800d76c:	77fb      	strb	r3, [r7, #31]
 800d76e:	e035      	b.n	800d7dc <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d770:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800d774:	2b00      	cmp	r3, #0
 800d776:	da08      	bge.n	800d78a <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 800d778:	7ffb      	ldrb	r3, [r7, #31]
 800d77a:	f043 0303 	orr.w	r3, r3, #3
 800d77e:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d780:	7fbb      	ldrb	r3, [r7, #30]
 800d782:	3b80      	subs	r3, #128	; 0x80
 800d784:	4a32      	ldr	r2, [pc, #200]	; (800d850 <create_name+0x178>)
 800d786:	5cd3      	ldrb	r3, [r2, r3]
 800d788:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800d78a:	7fbb      	ldrb	r3, [r7, #30]
 800d78c:	4619      	mov	r1, r3
 800d78e:	4831      	ldr	r0, [pc, #196]	; (800d854 <create_name+0x17c>)
 800d790:	f7fe fe84 	bl	800c49c <chk_chr>
 800d794:	4603      	mov	r3, r0
 800d796:	2b00      	cmp	r3, #0
 800d798:	d001      	beq.n	800d79e <create_name+0xc6>
				return FR_INVALID_NAME;
 800d79a:	2306      	movs	r3, #6
 800d79c:	e054      	b.n	800d848 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800d79e:	7fbb      	ldrb	r3, [r7, #30]
 800d7a0:	2b40      	cmp	r3, #64	; 0x40
 800d7a2:	d907      	bls.n	800d7b4 <create_name+0xdc>
 800d7a4:	7fbb      	ldrb	r3, [r7, #30]
 800d7a6:	2b5a      	cmp	r3, #90	; 0x5a
 800d7a8:	d804      	bhi.n	800d7b4 <create_name+0xdc>
				b |= 2;
 800d7aa:	7ffb      	ldrb	r3, [r7, #31]
 800d7ac:	f043 0302 	orr.w	r3, r3, #2
 800d7b0:	77fb      	strb	r3, [r7, #31]
 800d7b2:	e00c      	b.n	800d7ce <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800d7b4:	7fbb      	ldrb	r3, [r7, #30]
 800d7b6:	2b60      	cmp	r3, #96	; 0x60
 800d7b8:	d909      	bls.n	800d7ce <create_name+0xf6>
 800d7ba:	7fbb      	ldrb	r3, [r7, #30]
 800d7bc:	2b7a      	cmp	r3, #122	; 0x7a
 800d7be:	d806      	bhi.n	800d7ce <create_name+0xf6>
					b |= 1; c -= 0x20;
 800d7c0:	7ffb      	ldrb	r3, [r7, #31]
 800d7c2:	f043 0301 	orr.w	r3, r3, #1
 800d7c6:	77fb      	strb	r3, [r7, #31]
 800d7c8:	7fbb      	ldrb	r3, [r7, #30]
 800d7ca:	3b20      	subs	r3, #32
 800d7cc:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 800d7ce:	693b      	ldr	r3, [r7, #16]
 800d7d0:	1c5a      	adds	r2, r3, #1
 800d7d2:	613a      	str	r2, [r7, #16]
 800d7d4:	68ba      	ldr	r2, [r7, #8]
 800d7d6:	4413      	add	r3, r2
 800d7d8:	7fba      	ldrb	r2, [r7, #30]
 800d7da:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d7dc:	e7a1      	b.n	800d722 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d7de:	68fa      	ldr	r2, [r7, #12]
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	441a      	add	r2, r3
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800d7e8:	7fbb      	ldrb	r3, [r7, #30]
 800d7ea:	2b20      	cmp	r3, #32
 800d7ec:	d801      	bhi.n	800d7f2 <create_name+0x11a>
 800d7ee:	2304      	movs	r3, #4
 800d7f0:	e000      	b.n	800d7f4 <create_name+0x11c>
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800d7f6:	693b      	ldr	r3, [r7, #16]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d101      	bne.n	800d800 <create_name+0x128>
 800d7fc:	2306      	movs	r3, #6
 800d7fe:	e023      	b.n	800d848 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	781b      	ldrb	r3, [r3, #0]
 800d804:	2be5      	cmp	r3, #229	; 0xe5
 800d806:	d102      	bne.n	800d80e <create_name+0x136>
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	2205      	movs	r2, #5
 800d80c:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800d80e:	69bb      	ldr	r3, [r7, #24]
 800d810:	2b08      	cmp	r3, #8
 800d812:	d102      	bne.n	800d81a <create_name+0x142>
 800d814:	7ffb      	ldrb	r3, [r7, #31]
 800d816:	009b      	lsls	r3, r3, #2
 800d818:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800d81a:	7ffb      	ldrb	r3, [r7, #31]
 800d81c:	f003 0303 	and.w	r3, r3, #3
 800d820:	2b01      	cmp	r3, #1
 800d822:	d103      	bne.n	800d82c <create_name+0x154>
 800d824:	7fbb      	ldrb	r3, [r7, #30]
 800d826:	f043 0310 	orr.w	r3, r3, #16
 800d82a:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800d82c:	7ffb      	ldrb	r3, [r7, #31]
 800d82e:	f003 030c 	and.w	r3, r3, #12
 800d832:	2b04      	cmp	r3, #4
 800d834:	d103      	bne.n	800d83e <create_name+0x166>
 800d836:	7fbb      	ldrb	r3, [r7, #30]
 800d838:	f043 0308 	orr.w	r3, r3, #8
 800d83c:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	330b      	adds	r3, #11
 800d842:	7fba      	ldrb	r2, [r7, #30]
 800d844:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d846:	2300      	movs	r3, #0
#endif
}
 800d848:	4618      	mov	r0, r3
 800d84a:	3720      	adds	r7, #32
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}
 800d850:	08010a8c 	.word	0x08010a8c
 800d854:	08010934 	.word	0x08010934

0800d858 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b084      	sub	sp, #16
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	2b2f      	cmp	r3, #47	; 0x2f
 800d868:	d003      	beq.n	800d872 <follow_path+0x1a>
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	781b      	ldrb	r3, [r3, #0]
 800d86e:	2b5c      	cmp	r3, #92	; 0x5c
 800d870:	d102      	bne.n	800d878 <follow_path+0x20>
		path++;
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	3301      	adds	r3, #1
 800d876:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2200      	movs	r2, #0
 800d87c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	781b      	ldrb	r3, [r3, #0]
 800d884:	2b1f      	cmp	r3, #31
 800d886:	d80a      	bhi.n	800d89e <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800d888:	2100      	movs	r1, #0
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f7ff fc04 	bl	800d098 <dir_sdi>
 800d890:	4603      	mov	r3, r0
 800d892:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2200      	movs	r2, #0
 800d898:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800d89c:	e045      	b.n	800d92a <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d89e:	463b      	mov	r3, r7
 800d8a0:	4619      	mov	r1, r3
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f7ff ff18 	bl	800d6d8 <create_name>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800d8ac:	7bfb      	ldrb	r3, [r7, #15]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d136      	bne.n	800d920 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f7ff fe18 	bl	800d4e8 <dir_find>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d8c2:	7adb      	ldrb	r3, [r3, #11]
 800d8c4:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800d8c6:	7bfb      	ldrb	r3, [r7, #15]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d00a      	beq.n	800d8e2 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d8cc:	7bfb      	ldrb	r3, [r7, #15]
 800d8ce:	2b04      	cmp	r3, #4
 800d8d0:	d128      	bne.n	800d924 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d8d2:	7bbb      	ldrb	r3, [r7, #14]
 800d8d4:	f003 0304 	and.w	r3, r3, #4
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d123      	bne.n	800d924 <follow_path+0xcc>
 800d8dc:	2305      	movs	r3, #5
 800d8de:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800d8e0:	e020      	b.n	800d924 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d8e2:	7bbb      	ldrb	r3, [r7, #14]
 800d8e4:	f003 0304 	and.w	r3, r3, #4
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d11d      	bne.n	800d928 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d8f2:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	330b      	adds	r3, #11
 800d8f8:	781b      	ldrb	r3, [r3, #0]
 800d8fa:	f003 0310 	and.w	r3, r3, #16
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d102      	bne.n	800d908 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800d902:	2305      	movs	r3, #5
 800d904:	73fb      	strb	r3, [r7, #15]
 800d906:	e010      	b.n	800d92a <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d90e:	68b9      	ldr	r1, [r7, #8]
 800d910:	4618      	mov	r0, r3
 800d912:	f7ff fd96 	bl	800d442 <ld_clust>
 800d916:	4602      	mov	r2, r0
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d91e:	e7be      	b.n	800d89e <follow_path+0x46>
			if (res != FR_OK) break;
 800d920:	bf00      	nop
 800d922:	e002      	b.n	800d92a <follow_path+0xd2>
				break;
 800d924:	bf00      	nop
 800d926:	e000      	b.n	800d92a <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d928:	bf00      	nop
		}
	}

	return res;
 800d92a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d92c:	4618      	mov	r0, r3
 800d92e:	3710      	adds	r7, #16
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}

0800d934 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d934:	b480      	push	{r7}
 800d936:	b087      	sub	sp, #28
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d93c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d940:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d031      	beq.n	800d9ae <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	617b      	str	r3, [r7, #20]
 800d950:	e002      	b.n	800d958 <get_ldnumber+0x24>
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	3301      	adds	r3, #1
 800d956:	617b      	str	r3, [r7, #20]
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	781b      	ldrb	r3, [r3, #0]
 800d95c:	2b20      	cmp	r3, #32
 800d95e:	d903      	bls.n	800d968 <get_ldnumber+0x34>
 800d960:	697b      	ldr	r3, [r7, #20]
 800d962:	781b      	ldrb	r3, [r3, #0]
 800d964:	2b3a      	cmp	r3, #58	; 0x3a
 800d966:	d1f4      	bne.n	800d952 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	781b      	ldrb	r3, [r3, #0]
 800d96c:	2b3a      	cmp	r3, #58	; 0x3a
 800d96e:	d11c      	bne.n	800d9aa <get_ldnumber+0x76>
			tp = *path;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	1c5a      	adds	r2, r3, #1
 800d97a:	60fa      	str	r2, [r7, #12]
 800d97c:	781b      	ldrb	r3, [r3, #0]
 800d97e:	3b30      	subs	r3, #48	; 0x30
 800d980:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	2b09      	cmp	r3, #9
 800d986:	d80e      	bhi.n	800d9a6 <get_ldnumber+0x72>
 800d988:	68fa      	ldr	r2, [r7, #12]
 800d98a:	697b      	ldr	r3, [r7, #20]
 800d98c:	429a      	cmp	r2, r3
 800d98e:	d10a      	bne.n	800d9a6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d107      	bne.n	800d9a6 <get_ldnumber+0x72>
					vol = (int)i;
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d99a:	697b      	ldr	r3, [r7, #20]
 800d99c:	3301      	adds	r3, #1
 800d99e:	617b      	str	r3, [r7, #20]
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	697a      	ldr	r2, [r7, #20]
 800d9a4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d9a6:	693b      	ldr	r3, [r7, #16]
 800d9a8:	e002      	b.n	800d9b0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d9ae:	693b      	ldr	r3, [r7, #16]
}
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	371c      	adds	r7, #28
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bc80      	pop	{r7}
 800d9b8:	4770      	bx	lr
	...

0800d9bc <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b082      	sub	sp, #8
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
 800d9c4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d9d4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800d9d8:	6839      	ldr	r1, [r7, #0]
 800d9da:	6878      	ldr	r0, [r7, #4]
 800d9dc:	f7fe ff73 	bl	800c8c6 <move_window>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d001      	beq.n	800d9ea <check_fs+0x2e>
		return 3;
 800d9e6:	2303      	movs	r3, #3
 800d9e8:	e04a      	b.n	800da80 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d9f0:	3301      	adds	r3, #1
 800d9f2:	781b      	ldrb	r3, [r3, #0]
 800d9f4:	021b      	lsls	r3, r3, #8
 800d9f6:	b21a      	sxth	r2, r3
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800d9fe:	b21b      	sxth	r3, r3
 800da00:	4313      	orrs	r3, r2
 800da02:	b21b      	sxth	r3, r3
 800da04:	4a20      	ldr	r2, [pc, #128]	; (800da88 <check_fs+0xcc>)
 800da06:	4293      	cmp	r3, r2
 800da08:	d001      	beq.n	800da0e <check_fs+0x52>
		return 2;
 800da0a:	2302      	movs	r3, #2
 800da0c:	e038      	b.n	800da80 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	3336      	adds	r3, #54	; 0x36
 800da12:	3303      	adds	r3, #3
 800da14:	781b      	ldrb	r3, [r3, #0]
 800da16:	061a      	lsls	r2, r3, #24
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	3336      	adds	r3, #54	; 0x36
 800da1c:	3302      	adds	r3, #2
 800da1e:	781b      	ldrb	r3, [r3, #0]
 800da20:	041b      	lsls	r3, r3, #16
 800da22:	4313      	orrs	r3, r2
 800da24:	687a      	ldr	r2, [r7, #4]
 800da26:	3236      	adds	r2, #54	; 0x36
 800da28:	3201      	adds	r2, #1
 800da2a:	7812      	ldrb	r2, [r2, #0]
 800da2c:	0212      	lsls	r2, r2, #8
 800da2e:	4313      	orrs	r3, r2
 800da30:	687a      	ldr	r2, [r7, #4]
 800da32:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800da36:	4313      	orrs	r3, r2
 800da38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800da3c:	4a13      	ldr	r2, [pc, #76]	; (800da8c <check_fs+0xd0>)
 800da3e:	4293      	cmp	r3, r2
 800da40:	d101      	bne.n	800da46 <check_fs+0x8a>
		return 0;
 800da42:	2300      	movs	r3, #0
 800da44:	e01c      	b.n	800da80 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	3352      	adds	r3, #82	; 0x52
 800da4a:	3303      	adds	r3, #3
 800da4c:	781b      	ldrb	r3, [r3, #0]
 800da4e:	061a      	lsls	r2, r3, #24
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	3352      	adds	r3, #82	; 0x52
 800da54:	3302      	adds	r3, #2
 800da56:	781b      	ldrb	r3, [r3, #0]
 800da58:	041b      	lsls	r3, r3, #16
 800da5a:	4313      	orrs	r3, r2
 800da5c:	687a      	ldr	r2, [r7, #4]
 800da5e:	3252      	adds	r2, #82	; 0x52
 800da60:	3201      	adds	r2, #1
 800da62:	7812      	ldrb	r2, [r2, #0]
 800da64:	0212      	lsls	r2, r2, #8
 800da66:	4313      	orrs	r3, r2
 800da68:	687a      	ldr	r2, [r7, #4]
 800da6a:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800da6e:	4313      	orrs	r3, r2
 800da70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800da74:	4a05      	ldr	r2, [pc, #20]	; (800da8c <check_fs+0xd0>)
 800da76:	4293      	cmp	r3, r2
 800da78:	d101      	bne.n	800da7e <check_fs+0xc2>
		return 0;
 800da7a:	2300      	movs	r3, #0
 800da7c:	e000      	b.n	800da80 <check_fs+0xc4>

	return 1;
 800da7e:	2301      	movs	r3, #1
}
 800da80:	4618      	mov	r0, r3
 800da82:	3708      	adds	r7, #8
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}
 800da88:	ffffaa55 	.word	0xffffaa55
 800da8c:	00544146 	.word	0x00544146

0800da90 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b096      	sub	sp, #88	; 0x58
 800da94:	af00      	add	r7, sp, #0
 800da96:	60f8      	str	r0, [r7, #12]
 800da98:	60b9      	str	r1, [r7, #8]
 800da9a:	4613      	mov	r3, r2
 800da9c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	2200      	movs	r2, #0
 800daa2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800daa4:	68b8      	ldr	r0, [r7, #8]
 800daa6:	f7ff ff45 	bl	800d934 <get_ldnumber>
 800daaa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800daac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daae:	2b00      	cmp	r3, #0
 800dab0:	da01      	bge.n	800dab6 <find_volume+0x26>
 800dab2:	230b      	movs	r3, #11
 800dab4:	e2aa      	b.n	800e00c <find_volume+0x57c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800dab6:	4a9e      	ldr	r2, [pc, #632]	; (800dd30 <find_volume+0x2a0>)
 800dab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dabe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800dac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d101      	bne.n	800daca <find_volume+0x3a>
 800dac6:	230c      	movs	r3, #12
 800dac8:	e2a0      	b.n	800e00c <find_volume+0x57c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dace:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800dad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dad2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d01b      	beq.n	800db12 <find_volume+0x82>
		stat = disk_status(fs->drv);
 800dada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dadc:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800dae0:	4618      	mov	r0, r3
 800dae2:	f7fe fbe1 	bl	800c2a8 <disk_status>
 800dae6:	4603      	mov	r3, r0
 800dae8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800daec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800daf0:	f003 0301 	and.w	r3, r3, #1
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d10c      	bne.n	800db12 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800daf8:	79fb      	ldrb	r3, [r7, #7]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d007      	beq.n	800db0e <find_volume+0x7e>
 800dafe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800db02:	f003 0304 	and.w	r3, r3, #4
 800db06:	2b00      	cmp	r3, #0
 800db08:	d001      	beq.n	800db0e <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 800db0a:	230a      	movs	r3, #10
 800db0c:	e27e      	b.n	800e00c <find_volume+0x57c>
			return FR_OK;				/* The file system object is valid */
 800db0e:	2300      	movs	r3, #0
 800db10:	e27c      	b.n	800e00c <find_volume+0x57c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800db12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db14:	2200      	movs	r2, #0
 800db16:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800db1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db1c:	b2da      	uxtb	r2, r3
 800db1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db20:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800db24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db26:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800db2a:	4618      	mov	r0, r3
 800db2c:	f7fe fbd6 	bl	800c2dc <disk_initialize>
 800db30:	4603      	mov	r3, r0
 800db32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800db36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800db3a:	f003 0301 	and.w	r3, r3, #1
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d001      	beq.n	800db46 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800db42:	2303      	movs	r3, #3
 800db44:	e262      	b.n	800e00c <find_volume+0x57c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800db46:	79fb      	ldrb	r3, [r7, #7]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d007      	beq.n	800db5c <find_volume+0xcc>
 800db4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800db50:	f003 0304 	and.w	r3, r3, #4
 800db54:	2b00      	cmp	r3, #0
 800db56:	d001      	beq.n	800db5c <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800db58:	230a      	movs	r3, #10
 800db5a:	e257      	b.n	800e00c <find_volume+0x57c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800db5c:	2300      	movs	r3, #0
 800db5e:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800db60:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800db62:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800db64:	f7ff ff2a 	bl	800d9bc <check_fs>
 800db68:	4603      	mov	r3, r0
 800db6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800db6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800db72:	2b01      	cmp	r3, #1
 800db74:	d155      	bne.n	800dc22 <find_volume+0x192>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800db76:	2300      	movs	r3, #0
 800db78:	643b      	str	r3, [r7, #64]	; 0x40
 800db7a:	e029      	b.n	800dbd0 <find_volume+0x140>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800db7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db80:	011b      	lsls	r3, r3, #4
 800db82:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800db86:	4413      	add	r3, r2
 800db88:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800db8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db8c:	3304      	adds	r3, #4
 800db8e:	781b      	ldrb	r3, [r3, #0]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d012      	beq.n	800dbba <find_volume+0x12a>
 800db94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db96:	330b      	adds	r3, #11
 800db98:	781b      	ldrb	r3, [r3, #0]
 800db9a:	061a      	lsls	r2, r3, #24
 800db9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db9e:	330a      	adds	r3, #10
 800dba0:	781b      	ldrb	r3, [r3, #0]
 800dba2:	041b      	lsls	r3, r3, #16
 800dba4:	4313      	orrs	r3, r2
 800dba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dba8:	3209      	adds	r2, #9
 800dbaa:	7812      	ldrb	r2, [r2, #0]
 800dbac:	0212      	lsls	r2, r2, #8
 800dbae:	4313      	orrs	r3, r2
 800dbb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbb2:	3208      	adds	r2, #8
 800dbb4:	7812      	ldrb	r2, [r2, #0]
 800dbb6:	431a      	orrs	r2, r3
 800dbb8:	e000      	b.n	800dbbc <find_volume+0x12c>
 800dbba:	2200      	movs	r2, #0
 800dbbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbbe:	009b      	lsls	r3, r3, #2
 800dbc0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800dbc4:	440b      	add	r3, r1
 800dbc6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800dbca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbcc:	3301      	adds	r3, #1
 800dbce:	643b      	str	r3, [r7, #64]	; 0x40
 800dbd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbd2:	2b03      	cmp	r3, #3
 800dbd4:	d9d2      	bls.n	800db7c <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800dbda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d002      	beq.n	800dbe6 <find_volume+0x156>
 800dbe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbe2:	3b01      	subs	r3, #1
 800dbe4:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800dbe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbe8:	009b      	lsls	r3, r3, #2
 800dbea:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800dbee:	4413      	add	r3, r2
 800dbf0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800dbf4:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800dbf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d005      	beq.n	800dc08 <find_volume+0x178>
 800dbfc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dbfe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dc00:	f7ff fedc 	bl	800d9bc <check_fs>
 800dc04:	4603      	mov	r3, r0
 800dc06:	e000      	b.n	800dc0a <find_volume+0x17a>
 800dc08:	2302      	movs	r3, #2
 800dc0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800dc0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d005      	beq.n	800dc22 <find_volume+0x192>
 800dc16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc18:	3301      	adds	r3, #1
 800dc1a:	643b      	str	r3, [r7, #64]	; 0x40
 800dc1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc1e:	2b03      	cmp	r3, #3
 800dc20:	d9e1      	bls.n	800dbe6 <find_volume+0x156>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800dc22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dc26:	2b03      	cmp	r3, #3
 800dc28:	d101      	bne.n	800dc2e <find_volume+0x19e>
 800dc2a:	2301      	movs	r3, #1
 800dc2c:	e1ee      	b.n	800e00c <find_volume+0x57c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800dc2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d001      	beq.n	800dc3a <find_volume+0x1aa>
 800dc36:	230d      	movs	r3, #13
 800dc38:	e1e8      	b.n	800e00c <find_volume+0x57c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800dc3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc3c:	7b1b      	ldrb	r3, [r3, #12]
 800dc3e:	021b      	lsls	r3, r3, #8
 800dc40:	b21a      	sxth	r2, r3
 800dc42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc44:	7adb      	ldrb	r3, [r3, #11]
 800dc46:	b21b      	sxth	r3, r3
 800dc48:	4313      	orrs	r3, r2
 800dc4a:	b21b      	sxth	r3, r3
 800dc4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc50:	d001      	beq.n	800dc56 <find_volume+0x1c6>
		return FR_NO_FILESYSTEM;
 800dc52:	230d      	movs	r3, #13
 800dc54:	e1da      	b.n	800e00c <find_volume+0x57c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800dc56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc58:	7ddb      	ldrb	r3, [r3, #23]
 800dc5a:	021b      	lsls	r3, r3, #8
 800dc5c:	b21a      	sxth	r2, r3
 800dc5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc60:	7d9b      	ldrb	r3, [r3, #22]
 800dc62:	b21b      	sxth	r3, r3
 800dc64:	4313      	orrs	r3, r2
 800dc66:	b21b      	sxth	r3, r3
 800dc68:	b29b      	uxth	r3, r3
 800dc6a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800dc6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d112      	bne.n	800dc98 <find_volume+0x208>
 800dc72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc74:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800dc78:	061a      	lsls	r2, r3, #24
 800dc7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc7c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800dc80:	041b      	lsls	r3, r3, #16
 800dc82:	4313      	orrs	r3, r2
 800dc84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc86:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800dc8a:	0212      	lsls	r2, r2, #8
 800dc8c:	4313      	orrs	r3, r2
 800dc8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc90:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800dc94:	4313      	orrs	r3, r2
 800dc96:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800dc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dc9c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800dca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dca2:	7c1a      	ldrb	r2, [r3, #16]
 800dca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dca6:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800dcaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcac:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800dcb0:	2b01      	cmp	r3, #1
 800dcb2:	d006      	beq.n	800dcc2 <find_volume+0x232>
 800dcb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcb6:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800dcba:	2b02      	cmp	r3, #2
 800dcbc:	d001      	beq.n	800dcc2 <find_volume+0x232>
		return FR_NO_FILESYSTEM;
 800dcbe:	230d      	movs	r3, #13
 800dcc0:	e1a4      	b.n	800e00c <find_volume+0x57c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800dcc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcc4:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800dcc8:	461a      	mov	r2, r3
 800dcca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dccc:	fb02 f303 	mul.w	r3, r2, r3
 800dcd0:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800dcd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcd4:	7b5a      	ldrb	r2, [r3, #13]
 800dcd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcd8:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800dcdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcde:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d00a      	beq.n	800dcfc <find_volume+0x26c>
 800dce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dce8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800dcec:	461a      	mov	r2, r3
 800dcee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcf0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800dcf4:	3b01      	subs	r3, #1
 800dcf6:	4013      	ands	r3, r2
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d001      	beq.n	800dd00 <find_volume+0x270>
		return FR_NO_FILESYSTEM;
 800dcfc:	230d      	movs	r3, #13
 800dcfe:	e185      	b.n	800e00c <find_volume+0x57c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800dd00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd02:	7c9b      	ldrb	r3, [r3, #18]
 800dd04:	021b      	lsls	r3, r3, #8
 800dd06:	b21a      	sxth	r2, r3
 800dd08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd0a:	7c5b      	ldrb	r3, [r3, #17]
 800dd0c:	b21b      	sxth	r3, r3
 800dd0e:	4313      	orrs	r3, r2
 800dd10:	b21b      	sxth	r3, r3
 800dd12:	b29a      	uxth	r2, r3
 800dd14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd16:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800dd1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd1c:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800dd20:	f003 030f 	and.w	r3, r3, #15
 800dd24:	b29b      	uxth	r3, r3
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d004      	beq.n	800dd34 <find_volume+0x2a4>
		return FR_NO_FILESYSTEM;
 800dd2a:	230d      	movs	r3, #13
 800dd2c:	e16e      	b.n	800e00c <find_volume+0x57c>
 800dd2e:	bf00      	nop
 800dd30:	20000224 	.word	0x20000224

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800dd34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd36:	7d1b      	ldrb	r3, [r3, #20]
 800dd38:	021b      	lsls	r3, r3, #8
 800dd3a:	b21a      	sxth	r2, r3
 800dd3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd3e:	7cdb      	ldrb	r3, [r3, #19]
 800dd40:	b21b      	sxth	r3, r3
 800dd42:	4313      	orrs	r3, r2
 800dd44:	b21b      	sxth	r3, r3
 800dd46:	b29b      	uxth	r3, r3
 800dd48:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800dd4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d112      	bne.n	800dd76 <find_volume+0x2e6>
 800dd50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd52:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800dd56:	061a      	lsls	r2, r3, #24
 800dd58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd5a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800dd5e:	041b      	lsls	r3, r3, #16
 800dd60:	4313      	orrs	r3, r2
 800dd62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd64:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800dd68:	0212      	lsls	r2, r2, #8
 800dd6a:	4313      	orrs	r3, r2
 800dd6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd6e:	f892 2020 	ldrb.w	r2, [r2, #32]
 800dd72:	4313      	orrs	r3, r2
 800dd74:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800dd76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd78:	7bdb      	ldrb	r3, [r3, #15]
 800dd7a:	021b      	lsls	r3, r3, #8
 800dd7c:	b21a      	sxth	r2, r3
 800dd7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd80:	7b9b      	ldrb	r3, [r3, #14]
 800dd82:	b21b      	sxth	r3, r3
 800dd84:	4313      	orrs	r3, r2
 800dd86:	b21b      	sxth	r3, r3
 800dd88:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800dd8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d101      	bne.n	800dd94 <find_volume+0x304>
 800dd90:	230d      	movs	r3, #13
 800dd92:	e13b      	b.n	800e00c <find_volume+0x57c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800dd94:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dd96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd98:	4413      	add	r3, r2
 800dd9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd9c:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 800dda0:	0912      	lsrs	r2, r2, #4
 800dda2:	b292      	uxth	r2, r2
 800dda4:	4413      	add	r3, r2
 800dda6:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800dda8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ddaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddac:	429a      	cmp	r2, r3
 800ddae:	d201      	bcs.n	800ddb4 <find_volume+0x324>
 800ddb0:	230d      	movs	r3, #13
 800ddb2:	e12b      	b.n	800e00c <find_volume+0x57c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800ddb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ddb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb8:	1ad3      	subs	r3, r2, r3
 800ddba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ddbc:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800ddc0:	fbb3 f3f2 	udiv	r3, r3, r2
 800ddc4:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800ddc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d101      	bne.n	800ddd0 <find_volume+0x340>
 800ddcc:	230d      	movs	r3, #13
 800ddce:	e11d      	b.n	800e00c <find_volume+0x57c>
	fmt = FS_FAT12;
 800ddd0:	2301      	movs	r3, #1
 800ddd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800ddd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800dddc:	4293      	cmp	r3, r2
 800ddde:	d902      	bls.n	800dde6 <find_volume+0x356>
 800dde0:	2302      	movs	r3, #2
 800dde2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800dde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ddec:	4293      	cmp	r3, r2
 800ddee:	d902      	bls.n	800ddf6 <find_volume+0x366>
 800ddf0:	2303      	movs	r3, #3
 800ddf2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800ddf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf8:	1c9a      	adds	r2, r3, #2
 800ddfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddfc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 800de00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800de04:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800de08:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800de0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de0c:	441a      	add	r2, r3
 800de0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de10:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 800de14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800de16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de18:	441a      	add	r2, r3
 800de1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de1c:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 800de20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800de24:	2b03      	cmp	r3, #3
 800de26:	d121      	bne.n	800de6c <find_volume+0x3dc>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800de28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de2a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d001      	beq.n	800de36 <find_volume+0x3a6>
 800de32:	230d      	movs	r3, #13
 800de34:	e0ea      	b.n	800e00c <find_volume+0x57c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800de36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de38:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800de3c:	061a      	lsls	r2, r3, #24
 800de3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de40:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800de44:	041b      	lsls	r3, r3, #16
 800de46:	4313      	orrs	r3, r2
 800de48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de4a:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800de4e:	0212      	lsls	r2, r2, #8
 800de50:	4313      	orrs	r3, r2
 800de52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de54:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800de58:	431a      	orrs	r2, r3
 800de5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de5c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800de60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de62:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800de66:	009b      	lsls	r3, r3, #2
 800de68:	647b      	str	r3, [r7, #68]	; 0x44
 800de6a:	e025      	b.n	800deb8 <find_volume+0x428>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800de6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de6e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800de72:	2b00      	cmp	r3, #0
 800de74:	d101      	bne.n	800de7a <find_volume+0x3ea>
 800de76:	230d      	movs	r3, #13
 800de78:	e0c8      	b.n	800e00c <find_volume+0x57c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800de7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de7c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800de80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de82:	441a      	add	r2, r3
 800de84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de86:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800de8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800de8e:	2b02      	cmp	r3, #2
 800de90:	d104      	bne.n	800de9c <find_volume+0x40c>
 800de92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de94:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800de98:	005b      	lsls	r3, r3, #1
 800de9a:	e00c      	b.n	800deb6 <find_volume+0x426>
 800de9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de9e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800dea2:	4613      	mov	r3, r2
 800dea4:	005b      	lsls	r3, r3, #1
 800dea6:	4413      	add	r3, r2
 800dea8:	085a      	lsrs	r2, r3, #1
 800deaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800deb0:	f003 0301 	and.w	r3, r3, #1
 800deb4:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800deb6:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800deb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deba:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800debe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dec0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800dec4:	0a5b      	lsrs	r3, r3, #9
 800dec6:	429a      	cmp	r2, r3
 800dec8:	d201      	bcs.n	800dece <find_volume+0x43e>
		return FR_NO_FILESYSTEM;
 800deca:	230d      	movs	r3, #13
 800decc:	e09e      	b.n	800e00c <find_volume+0x57c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800dece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ded0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ded4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 800ded8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deda:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800dede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dee0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800dee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dee6:	2280      	movs	r2, #128	; 0x80
 800dee8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800deec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800def0:	2b03      	cmp	r3, #3
 800def2:	d177      	bne.n	800dfe4 <find_volume+0x554>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800def4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800def6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800defa:	021b      	lsls	r3, r3, #8
 800defc:	b21a      	sxth	r2, r3
 800defe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800df04:	b21b      	sxth	r3, r3
 800df06:	4313      	orrs	r3, r2
 800df08:	b21b      	sxth	r3, r3
 800df0a:	2b01      	cmp	r3, #1
 800df0c:	d16a      	bne.n	800dfe4 <find_volume+0x554>
		&& move_window(fs, bsect + 1) == FR_OK)
 800df0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df10:	3301      	adds	r3, #1
 800df12:	4619      	mov	r1, r3
 800df14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800df16:	f7fe fcd6 	bl	800c8c6 <move_window>
 800df1a:	4603      	mov	r3, r0
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d161      	bne.n	800dfe4 <find_volume+0x554>
	{
		fs->fsi_flag = 0;
 800df20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df22:	2200      	movs	r2, #0
 800df24:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800df28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df2a:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800df2e:	021b      	lsls	r3, r3, #8
 800df30:	b21a      	sxth	r2, r3
 800df32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df34:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800df38:	b21b      	sxth	r3, r3
 800df3a:	4313      	orrs	r3, r2
 800df3c:	b21b      	sxth	r3, r3
 800df3e:	4a35      	ldr	r2, [pc, #212]	; (800e014 <find_volume+0x584>)
 800df40:	4293      	cmp	r3, r2
 800df42:	d14f      	bne.n	800dfe4 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800df44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df46:	78db      	ldrb	r3, [r3, #3]
 800df48:	061a      	lsls	r2, r3, #24
 800df4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df4c:	789b      	ldrb	r3, [r3, #2]
 800df4e:	041b      	lsls	r3, r3, #16
 800df50:	4313      	orrs	r3, r2
 800df52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df54:	7852      	ldrb	r2, [r2, #1]
 800df56:	0212      	lsls	r2, r2, #8
 800df58:	4313      	orrs	r3, r2
 800df5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df5c:	7812      	ldrb	r2, [r2, #0]
 800df5e:	4313      	orrs	r3, r2
 800df60:	4a2d      	ldr	r2, [pc, #180]	; (800e018 <find_volume+0x588>)
 800df62:	4293      	cmp	r3, r2
 800df64:	d13e      	bne.n	800dfe4 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800df66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df68:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800df6c:	061a      	lsls	r2, r3, #24
 800df6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df70:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800df74:	041b      	lsls	r3, r3, #16
 800df76:	4313      	orrs	r3, r2
 800df78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df7a:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800df7e:	0212      	lsls	r2, r2, #8
 800df80:	4313      	orrs	r3, r2
 800df82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df84:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800df88:	4313      	orrs	r3, r2
 800df8a:	4a24      	ldr	r2, [pc, #144]	; (800e01c <find_volume+0x58c>)
 800df8c:	4293      	cmp	r3, r2
 800df8e:	d129      	bne.n	800dfe4 <find_volume+0x554>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800df90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df92:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800df96:	061a      	lsls	r2, r3, #24
 800df98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df9a:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800df9e:	041b      	lsls	r3, r3, #16
 800dfa0:	4313      	orrs	r3, r2
 800dfa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dfa4:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800dfa8:	0212      	lsls	r2, r2, #8
 800dfaa:	4313      	orrs	r3, r2
 800dfac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dfae:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800dfb2:	431a      	orrs	r2, r3
 800dfb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800dfba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfbc:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800dfc0:	061a      	lsls	r2, r3, #24
 800dfc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc4:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800dfc8:	041b      	lsls	r3, r3, #16
 800dfca:	4313      	orrs	r3, r2
 800dfcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dfce:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800dfd2:	0212      	lsls	r2, r2, #8
 800dfd4:	4313      	orrs	r3, r2
 800dfd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dfd8:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800dfdc:	431a      	orrs	r2, r3
 800dfde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfe0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800dfe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfe6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800dfea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800dfee:	4b0c      	ldr	r3, [pc, #48]	; (800e020 <find_volume+0x590>)
 800dff0:	881b      	ldrh	r3, [r3, #0]
 800dff2:	3301      	adds	r3, #1
 800dff4:	b29a      	uxth	r2, r3
 800dff6:	4b0a      	ldr	r3, [pc, #40]	; (800e020 <find_volume+0x590>)
 800dff8:	801a      	strh	r2, [r3, #0]
 800dffa:	4b09      	ldr	r3, [pc, #36]	; (800e020 <find_volume+0x590>)
 800dffc:	881a      	ldrh	r2, [r3, #0]
 800dffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e000:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800e004:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e006:	f7fe fbed 	bl	800c7e4 <clear_lock>
#endif

	return FR_OK;
 800e00a:	2300      	movs	r3, #0
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	3758      	adds	r7, #88	; 0x58
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}
 800e014:	ffffaa55 	.word	0xffffaa55
 800e018:	41615252 	.word	0x41615252
 800e01c:	61417272 	.word	0x61417272
 800e020:	20000228 	.word	0x20000228

0800e024 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b084      	sub	sp, #16
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d022      	beq.n	800e07c <validate+0x58>
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d01d      	beq.n	800e07c <validate+0x58>
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e046:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d016      	beq.n	800e07c <validate+0x58>
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e054:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800e05e:	429a      	cmp	r2, r3
 800e060:	d10c      	bne.n	800e07c <validate+0x58>
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e068:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800e06c:	4618      	mov	r0, r3
 800e06e:	f7fe f91b 	bl	800c2a8 <disk_status>
 800e072:	4603      	mov	r3, r0
 800e074:	f003 0301 	and.w	r3, r3, #1
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d001      	beq.n	800e080 <validate+0x5c>
		return FR_INVALID_OBJECT;
 800e07c:	2309      	movs	r3, #9
 800e07e:	e000      	b.n	800e082 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800e080:	2300      	movs	r3, #0
}
 800e082:	4618      	mov	r0, r3
 800e084:	3710      	adds	r7, #16
 800e086:	46bd      	mov	sp, r7
 800e088:	bd80      	pop	{r7, pc}
	...

0800e08c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b088      	sub	sp, #32
 800e090:	af00      	add	r7, sp, #0
 800e092:	60f8      	str	r0, [r7, #12]
 800e094:	60b9      	str	r1, [r7, #8]
 800e096:	4613      	mov	r3, r2
 800e098:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800e09e:	f107 0310 	add.w	r3, r7, #16
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7ff fc46 	bl	800d934 <get_ldnumber>
 800e0a8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e0aa:	69fb      	ldr	r3, [r7, #28]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	da01      	bge.n	800e0b4 <f_mount+0x28>
 800e0b0:	230b      	movs	r3, #11
 800e0b2:	e02d      	b.n	800e110 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e0b4:	4a18      	ldr	r2, [pc, #96]	; (800e118 <f_mount+0x8c>)
 800e0b6:	69fb      	ldr	r3, [r7, #28]
 800e0b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0bc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e0be:	69bb      	ldr	r3, [r7, #24]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d006      	beq.n	800e0d2 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 800e0c4:	69b8      	ldr	r0, [r7, #24]
 800e0c6:	f7fe fb8d 	bl	800c7e4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e0ca:	69bb      	ldr	r3, [r7, #24]
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d003      	beq.n	800e0e0 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	2200      	movs	r2, #0
 800e0dc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e0e0:	68fa      	ldr	r2, [r7, #12]
 800e0e2:	490d      	ldr	r1, [pc, #52]	; (800e118 <f_mount+0x8c>)
 800e0e4:	69fb      	ldr	r3, [r7, #28]
 800e0e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d002      	beq.n	800e0f6 <f_mount+0x6a>
 800e0f0:	79fb      	ldrb	r3, [r7, #7]
 800e0f2:	2b01      	cmp	r3, #1
 800e0f4:	d001      	beq.n	800e0fa <f_mount+0x6e>
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	e00a      	b.n	800e110 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800e0fa:	f107 0108 	add.w	r1, r7, #8
 800e0fe:	f107 030c 	add.w	r3, r7, #12
 800e102:	2200      	movs	r2, #0
 800e104:	4618      	mov	r0, r3
 800e106:	f7ff fcc3 	bl	800da90 <find_volume>
 800e10a:	4603      	mov	r3, r0
 800e10c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e10e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e110:	4618      	mov	r0, r3
 800e112:	3720      	adds	r7, #32
 800e114:	46bd      	mov	sp, r7
 800e116:	bd80      	pop	{r7, pc}
 800e118:	20000224 	.word	0x20000224

0800e11c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800e122:	af00      	add	r7, sp, #0
 800e124:	f107 030c 	add.w	r3, r7, #12
 800e128:	6018      	str	r0, [r3, #0]
 800e12a:	f107 0308 	add.w	r3, r7, #8
 800e12e:	6019      	str	r1, [r3, #0]
 800e130:	1dfb      	adds	r3, r7, #7
 800e132:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800e134:	f107 030c 	add.w	r3, r7, #12
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d101      	bne.n	800e142 <f_open+0x26>
 800e13e:	2309      	movs	r3, #9
 800e140:	e1f2      	b.n	800e528 <f_open+0x40c>
	fp->fs = 0;			/* Clear file object */
 800e142:	f107 030c 	add.w	r3, r7, #12
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	2200      	movs	r2, #0
 800e14a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800e14e:	1dfb      	adds	r3, r7, #7
 800e150:	1dfa      	adds	r2, r7, #7
 800e152:	7812      	ldrb	r2, [r2, #0]
 800e154:	f002 021f 	and.w	r2, r2, #31
 800e158:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800e15a:	1dfb      	adds	r3, r7, #7
 800e15c:	781b      	ldrb	r3, [r3, #0]
 800e15e:	f023 0301 	bic.w	r3, r3, #1
 800e162:	b2da      	uxtb	r2, r3
 800e164:	f107 0108 	add.w	r1, r7, #8
 800e168:	f107 0320 	add.w	r3, r7, #32
 800e16c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800e170:	4618      	mov	r0, r3
 800e172:	f7ff fc8d 	bl	800da90 <find_volume>
 800e176:	4603      	mov	r3, r0
 800e178:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800e17c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800e180:	2b00      	cmp	r3, #0
 800e182:	f040 81cf 	bne.w	800e524 <f_open+0x408>
		INIT_BUF(dj);
 800e186:	f107 0320 	add.w	r3, r7, #32
 800e18a:	f107 0214 	add.w	r2, r7, #20
 800e18e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 800e192:	f107 0308 	add.w	r3, r7, #8
 800e196:	681a      	ldr	r2, [r3, #0]
 800e198:	f107 0320 	add.w	r3, r7, #32
 800e19c:	4611      	mov	r1, r2
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f7ff fb5a 	bl	800d858 <follow_path>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 800e1aa:	f107 0320 	add.w	r3, r7, #32
 800e1ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e1b2:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e1b6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d11a      	bne.n	800e1f4 <f_open+0xd8>
			if (!dir)	/* Default directory itself */
 800e1be:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d103      	bne.n	800e1ce <f_open+0xb2>
				res = FR_INVALID_NAME;
 800e1c6:	2306      	movs	r3, #6
 800e1c8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800e1cc:	e012      	b.n	800e1f4 <f_open+0xd8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e1ce:	1dfb      	adds	r3, r7, #7
 800e1d0:	781b      	ldrb	r3, [r3, #0]
 800e1d2:	f023 0301 	bic.w	r3, r3, #1
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	bf14      	ite	ne
 800e1da:	2301      	movne	r3, #1
 800e1dc:	2300      	moveq	r3, #0
 800e1de:	b2db      	uxtb	r3, r3
 800e1e0:	461a      	mov	r2, r3
 800e1e2:	f107 0320 	add.w	r3, r7, #32
 800e1e6:	4611      	mov	r1, r2
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	f7fe f971 	bl	800c4d0 <chk_lock>
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e1f4:	1dfb      	adds	r3, r7, #7
 800e1f6:	781b      	ldrb	r3, [r3, #0]
 800e1f8:	f003 031c 	and.w	r3, r3, #28
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	f000 80cc 	beq.w	800e39a <f_open+0x27e>
			if (res != FR_OK) {					/* No file, create new */
 800e202:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800e206:	2b00      	cmp	r3, #0
 800e208:	d01f      	beq.n	800e24a <f_open+0x12e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800e20a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800e20e:	2b04      	cmp	r3, #4
 800e210:	d10e      	bne.n	800e230 <f_open+0x114>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e212:	f7fe f9c9 	bl	800c5a8 <enq_lock>
 800e216:	4603      	mov	r3, r0
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d006      	beq.n	800e22a <f_open+0x10e>
 800e21c:	f107 0320 	add.w	r3, r7, #32
 800e220:	4618      	mov	r0, r3
 800e222:	f7ff f9b0 	bl	800d586 <dir_register>
 800e226:	4603      	mov	r3, r0
 800e228:	e000      	b.n	800e22c <f_open+0x110>
 800e22a:	2312      	movs	r3, #18
 800e22c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e230:	1dfb      	adds	r3, r7, #7
 800e232:	1dfa      	adds	r2, r7, #7
 800e234:	7812      	ldrb	r2, [r2, #0]
 800e236:	f042 0208 	orr.w	r2, r2, #8
 800e23a:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800e23c:	f107 0320 	add.w	r3, r7, #32
 800e240:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e244:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800e248:	e014      	b.n	800e274 <f_open+0x158>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e24a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800e24e:	330b      	adds	r3, #11
 800e250:	781b      	ldrb	r3, [r3, #0]
 800e252:	f003 0311 	and.w	r3, r3, #17
 800e256:	2b00      	cmp	r3, #0
 800e258:	d003      	beq.n	800e262 <f_open+0x146>
					res = FR_DENIED;
 800e25a:	2307      	movs	r3, #7
 800e25c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800e260:	e008      	b.n	800e274 <f_open+0x158>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800e262:	1dfb      	adds	r3, r7, #7
 800e264:	781b      	ldrb	r3, [r3, #0]
 800e266:	f003 0304 	and.w	r3, r3, #4
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d002      	beq.n	800e274 <f_open+0x158>
						res = FR_EXIST;
 800e26e:	2308      	movs	r3, #8
 800e270:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e274:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800e278:	2b00      	cmp	r3, #0
 800e27a:	f040 80af 	bne.w	800e3dc <f_open+0x2c0>
 800e27e:	1dfb      	adds	r3, r7, #7
 800e280:	781b      	ldrb	r3, [r3, #0]
 800e282:	f003 0308 	and.w	r3, r3, #8
 800e286:	2b00      	cmp	r3, #0
 800e288:	f000 80a8 	beq.w	800e3dc <f_open+0x2c0>
				dw = GET_FATTIME();				/* Created time */
 800e28c:	f7fc fc0a 	bl	800aaa4 <get_fattime>
 800e290:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 800e294:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800e298:	330e      	adds	r3, #14
 800e29a:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800e29e:	b2d2      	uxtb	r2, r2
 800e2a0:	701a      	strb	r2, [r3, #0]
 800e2a2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800e2a6:	b29b      	uxth	r3, r3
 800e2a8:	0a1b      	lsrs	r3, r3, #8
 800e2aa:	b29a      	uxth	r2, r3
 800e2ac:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800e2b0:	330f      	adds	r3, #15
 800e2b2:	b2d2      	uxtb	r2, r2
 800e2b4:	701a      	strb	r2, [r3, #0]
 800e2b6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800e2ba:	0c1a      	lsrs	r2, r3, #16
 800e2bc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800e2c0:	3310      	adds	r3, #16
 800e2c2:	b2d2      	uxtb	r2, r2
 800e2c4:	701a      	strb	r2, [r3, #0]
 800e2c6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800e2ca:	0e1a      	lsrs	r2, r3, #24
 800e2cc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800e2d0:	3311      	adds	r3, #17
 800e2d2:	b2d2      	uxtb	r2, r2
 800e2d4:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800e2d6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800e2da:	330b      	adds	r3, #11
 800e2dc:	2200      	movs	r2, #0
 800e2de:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800e2e0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800e2e4:	331c      	adds	r3, #28
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	701a      	strb	r2, [r3, #0]
 800e2ea:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800e2ee:	331d      	adds	r3, #29
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	701a      	strb	r2, [r3, #0]
 800e2f4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800e2f8:	331e      	adds	r3, #30
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	701a      	strb	r2, [r3, #0]
 800e2fe:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800e302:	331f      	adds	r3, #31
 800e304:	2200      	movs	r2, #0
 800e306:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800e308:	f107 0320 	add.w	r3, r7, #32
 800e30c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e310:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800e314:	4618      	mov	r0, r3
 800e316:	f7ff f894 	bl	800d442 <ld_clust>
 800e31a:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 800e31e:	2100      	movs	r1, #0
 800e320:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 800e324:	f7ff f8ba 	bl	800d49c <st_clust>
				dj.fs->wflag = 1;
 800e328:	f107 0320 	add.w	r3, r7, #32
 800e32c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e330:	2201      	movs	r2, #1
 800e332:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800e336:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d04e      	beq.n	800e3dc <f_open+0x2c0>
					dw = dj.fs->winsect;
 800e33e:	f107 0320 	add.w	r3, r7, #32
 800e342:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e346:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800e34a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 800e34e:	f107 0320 	add.w	r3, r7, #32
 800e352:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e356:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 800e35a:	4618      	mov	r0, r3
 800e35c:	f7fe fd71 	bl	800ce42 <remove_chain>
 800e360:	4603      	mov	r3, r0
 800e362:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 800e366:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d136      	bne.n	800e3dc <f_open+0x2c0>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800e36e:	f107 0320 	add.w	r3, r7, #32
 800e372:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e376:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 800e37a:	3a01      	subs	r2, #1
 800e37c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 800e380:	f107 0320 	add.w	r3, r7, #32
 800e384:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e388:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800e38c:	4618      	mov	r0, r3
 800e38e:	f7fe fa9a 	bl	800c8c6 <move_window>
 800e392:	4603      	mov	r3, r0
 800e394:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800e398:	e020      	b.n	800e3dc <f_open+0x2c0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800e39a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d11c      	bne.n	800e3dc <f_open+0x2c0>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800e3a2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800e3a6:	330b      	adds	r3, #11
 800e3a8:	781b      	ldrb	r3, [r3, #0]
 800e3aa:	f003 0310 	and.w	r3, r3, #16
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d003      	beq.n	800e3ba <f_open+0x29e>
					res = FR_NO_FILE;
 800e3b2:	2304      	movs	r3, #4
 800e3b4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800e3b8:	e010      	b.n	800e3dc <f_open+0x2c0>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800e3ba:	1dfb      	adds	r3, r7, #7
 800e3bc:	781b      	ldrb	r3, [r3, #0]
 800e3be:	f003 0302 	and.w	r3, r3, #2
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d00a      	beq.n	800e3dc <f_open+0x2c0>
 800e3c6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800e3ca:	330b      	adds	r3, #11
 800e3cc:	781b      	ldrb	r3, [r3, #0]
 800e3ce:	f003 0301 	and.w	r3, r3, #1
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d002      	beq.n	800e3dc <f_open+0x2c0>
						res = FR_DENIED;
 800e3d6:	2307      	movs	r3, #7
 800e3d8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 800e3dc:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d13d      	bne.n	800e460 <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e3e4:	1dfb      	adds	r3, r7, #7
 800e3e6:	781b      	ldrb	r3, [r3, #0]
 800e3e8:	f003 0308 	and.w	r3, r3, #8
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d005      	beq.n	800e3fc <f_open+0x2e0>
				mode |= FA__WRITTEN;
 800e3f0:	1dfb      	adds	r3, r7, #7
 800e3f2:	1dfa      	adds	r2, r7, #7
 800e3f4:	7812      	ldrb	r2, [r2, #0]
 800e3f6:	f042 0220 	orr.w	r2, r2, #32
 800e3fa:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800e3fc:	f107 0320 	add.w	r3, r7, #32
 800e400:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e404:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800e408:	f107 030c 	add.w	r3, r7, #12
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 800e412:	f107 030c 	add.w	r3, r7, #12
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800e41c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e420:	1dfb      	adds	r3, r7, #7
 800e422:	781b      	ldrb	r3, [r3, #0]
 800e424:	f023 0301 	bic.w	r3, r3, #1
 800e428:	2b00      	cmp	r3, #0
 800e42a:	bf14      	ite	ne
 800e42c:	2301      	movne	r3, #1
 800e42e:	2300      	moveq	r3, #0
 800e430:	b2db      	uxtb	r3, r3
 800e432:	461a      	mov	r2, r3
 800e434:	f107 0320 	add.w	r3, r7, #32
 800e438:	4611      	mov	r1, r2
 800e43a:	4618      	mov	r0, r3
 800e43c:	f7fe f8d8 	bl	800c5f0 <inc_lock>
 800e440:	4602      	mov	r2, r0
 800e442:	f107 030c 	add.w	r3, r7, #12
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800e44c:	f107 030c 	add.w	r3, r7, #12
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800e456:	2b00      	cmp	r3, #0
 800e458:	d102      	bne.n	800e460 <f_open+0x344>
 800e45a:	2302      	movs	r3, #2
 800e45c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800e460:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800e464:	2b00      	cmp	r3, #0
 800e466:	d15d      	bne.n	800e524 <f_open+0x408>
			fp->flag = mode;					/* File access mode */
 800e468:	f107 030c 	add.w	r3, r7, #12
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	1dfa      	adds	r2, r7, #7
 800e470:	7812      	ldrb	r2, [r2, #0]
 800e472:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 800e476:	f107 030c 	add.w	r3, r7, #12
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	2200      	movs	r2, #0
 800e47e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800e482:	f107 0320 	add.w	r3, r7, #32
 800e486:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e48a:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800e48e:	4618      	mov	r0, r3
 800e490:	f7fe ffd7 	bl	800d442 <ld_clust>
 800e494:	4602      	mov	r2, r0
 800e496:	f107 030c 	add.w	r3, r7, #12
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800e4a0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800e4a4:	331f      	adds	r3, #31
 800e4a6:	781b      	ldrb	r3, [r3, #0]
 800e4a8:	061a      	lsls	r2, r3, #24
 800e4aa:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800e4ae:	331e      	adds	r3, #30
 800e4b0:	781b      	ldrb	r3, [r3, #0]
 800e4b2:	041b      	lsls	r3, r3, #16
 800e4b4:	4313      	orrs	r3, r2
 800e4b6:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800e4ba:	321d      	adds	r2, #29
 800e4bc:	7812      	ldrb	r2, [r2, #0]
 800e4be:	0212      	lsls	r2, r2, #8
 800e4c0:	4313      	orrs	r3, r2
 800e4c2:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800e4c6:	321c      	adds	r2, #28
 800e4c8:	7812      	ldrb	r2, [r2, #0]
 800e4ca:	431a      	orrs	r2, r3
 800e4cc:	f107 030c 	add.w	r3, r7, #12
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 800e4d6:	f107 030c 	add.w	r3, r7, #12
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	2200      	movs	r2, #0
 800e4de:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 800e4e2:	f107 030c 	add.w	r3, r7, #12
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800e4ee:	f107 030c 	add.w	r3, r7, #12
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800e4fa:	f107 0320 	add.w	r3, r7, #32
 800e4fe:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800e502:	f107 030c 	add.w	r3, r7, #12
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 800e50c:	f107 030c 	add.w	r3, r7, #12
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e516:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800e51a:	f107 030c 	add.w	r3, r7, #12
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 800e524:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 800e528:	4618      	mov	r0, r3
 800e52a:	f507 7714 	add.w	r7, r7, #592	; 0x250
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd80      	pop	{r7, pc}

0800e532 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e532:	b580      	push	{r7, lr}
 800e534:	b08a      	sub	sp, #40	; 0x28
 800e536:	af00      	add	r7, sp, #0
 800e538:	60f8      	str	r0, [r7, #12]
 800e53a:	60b9      	str	r1, [r7, #8]
 800e53c:	607a      	str	r2, [r7, #4]
 800e53e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	2200      	movs	r2, #0
 800e548:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800e54a:	68f8      	ldr	r0, [r7, #12]
 800e54c:	f7ff fd6a 	bl	800e024 <validate>
 800e550:	4603      	mov	r3, r0
 800e552:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800e554:	7dfb      	ldrb	r3, [r7, #23]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d001      	beq.n	800e55e <f_write+0x2c>
 800e55a:	7dfb      	ldrb	r3, [r7, #23]
 800e55c:	e192      	b.n	800e884 <f_write+0x352>
	if (fp->err)							/* Check error */
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800e564:	2b00      	cmp	r3, #0
 800e566:	d003      	beq.n	800e570 <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800e56e:	e189      	b.n	800e884 <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800e576:	f003 0302 	and.w	r3, r3, #2
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d101      	bne.n	800e582 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 800e57e:	2307      	movs	r3, #7
 800e580:	e180      	b.n	800e884 <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	441a      	add	r2, r3
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800e592:	429a      	cmp	r2, r3
 800e594:	f080 8158 	bcs.w	800e848 <f_write+0x316>
 800e598:	2300      	movs	r3, #0
 800e59a:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800e59c:	e154      	b.n	800e848 <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800e5a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	f040 8114 	bne.w	800e7d6 <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800e5b4:	0a5b      	lsrs	r3, r3, #9
 800e5b6:	b2da      	uxtb	r2, r3
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e5be:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800e5c2:	3b01      	subs	r3, #1
 800e5c4:	b2db      	uxtb	r3, r3
 800e5c6:	4013      	ands	r3, r2
 800e5c8:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800e5ca:	7dbb      	ldrb	r3, [r7, #22]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d151      	bne.n	800e674 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d10f      	bne.n	800e5fa <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e5e0:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800e5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d121      	bne.n	800e62c <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e5ee:	2100      	movs	r1, #0
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	f7fe fc80 	bl	800cef6 <create_chain>
 800e5f6:	6278      	str	r0, [r7, #36]	; 0x24
 800e5f8:	e018      	b.n	800e62c <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800e600:	2b00      	cmp	r3, #0
 800e602:	d008      	beq.n	800e616 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800e60a:	4619      	mov	r1, r3
 800e60c:	68f8      	ldr	r0, [r7, #12]
 800e60e:	f7fe fd0f 	bl	800d030 <clmt_clust>
 800e612:	6278      	str	r0, [r7, #36]	; 0x24
 800e614:	e00a      	b.n	800e62c <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e622:	4619      	mov	r1, r3
 800e624:	4610      	mov	r0, r2
 800e626:	f7fe fc66 	bl	800cef6 <create_chain>
 800e62a:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e62e:	2b00      	cmp	r3, #0
 800e630:	f000 810f 	beq.w	800e852 <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800e634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e636:	2b01      	cmp	r3, #1
 800e638:	d105      	bne.n	800e646 <f_write+0x114>
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	2202      	movs	r2, #2
 800e63e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800e642:	2302      	movs	r3, #2
 800e644:	e11e      	b.n	800e884 <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800e646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e648:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e64c:	d105      	bne.n	800e65a <f_write+0x128>
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	2201      	movs	r2, #1
 800e652:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800e656:	2301      	movs	r3, #1
 800e658:	e114      	b.n	800e884 <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e65e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d103      	bne.n	800e674 <f_write+0x142>
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e670:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800e67a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d01d      	beq.n	800e6be <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e688:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800e68c:	68f9      	ldr	r1, [r7, #12]
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800e694:	2301      	movs	r3, #1
 800e696:	f7fd fe67 	bl	800c368 <disk_write>
 800e69a:	4603      	mov	r3, r0
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d005      	beq.n	800e6ac <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	2201      	movs	r2, #1
 800e6a4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800e6a8:	2301      	movs	r3, #1
 800e6aa:	e0eb      	b.n	800e884 <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800e6b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e6b6:	b2da      	uxtb	r2, r3
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e6ca:	4619      	mov	r1, r3
 800e6cc:	4610      	mov	r0, r2
 800e6ce:	f7fe f9d5 	bl	800ca7c <clust2sect>
 800e6d2:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d105      	bne.n	800e6e6 <f_write+0x1b4>
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	2202      	movs	r2, #2
 800e6de:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800e6e2:	2302      	movs	r3, #2
 800e6e4:	e0ce      	b.n	800e884 <f_write+0x352>
			sect += csect;
 800e6e6:	7dbb      	ldrb	r3, [r7, #22]
 800e6e8:	693a      	ldr	r2, [r7, #16]
 800e6ea:	4413      	add	r3, r2
 800e6ec:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	0a5b      	lsrs	r3, r3, #9
 800e6f2:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e6f4:	69fb      	ldr	r3, [r7, #28]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d048      	beq.n	800e78c <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800e6fa:	7dba      	ldrb	r2, [r7, #22]
 800e6fc:	69fb      	ldr	r3, [r7, #28]
 800e6fe:	4413      	add	r3, r2
 800e700:	68fa      	ldr	r2, [r7, #12]
 800e702:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800e706:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800e70a:	4293      	cmp	r3, r2
 800e70c:	d908      	bls.n	800e720 <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e714:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800e718:	461a      	mov	r2, r3
 800e71a:	7dbb      	ldrb	r3, [r7, #22]
 800e71c:	1ad3      	subs	r3, r2, r3
 800e71e:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e726:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800e72a:	69fb      	ldr	r3, [r7, #28]
 800e72c:	693a      	ldr	r2, [r7, #16]
 800e72e:	69b9      	ldr	r1, [r7, #24]
 800e730:	f7fd fe1a 	bl	800c368 <disk_write>
 800e734:	4603      	mov	r3, r0
 800e736:	2b00      	cmp	r3, #0
 800e738:	d005      	beq.n	800e746 <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	2201      	movs	r2, #1
 800e73e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800e742:	2301      	movs	r3, #1
 800e744:	e09e      	b.n	800e884 <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800e74c:	693b      	ldr	r3, [r7, #16]
 800e74e:	1ad3      	subs	r3, r2, r3
 800e750:	69fa      	ldr	r2, [r7, #28]
 800e752:	429a      	cmp	r2, r3
 800e754:	d916      	bls.n	800e784 <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800e756:	68f8      	ldr	r0, [r7, #12]
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800e75e:	693b      	ldr	r3, [r7, #16]
 800e760:	1ad3      	subs	r3, r2, r3
 800e762:	025b      	lsls	r3, r3, #9
 800e764:	69ba      	ldr	r2, [r7, #24]
 800e766:	4413      	add	r3, r2
 800e768:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e76c:	4619      	mov	r1, r3
 800e76e:	f7fd fe39 	bl	800c3e4 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800e778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e77c:	b2da      	uxtb	r2, r3
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800e784:	69fb      	ldr	r3, [r7, #28]
 800e786:	025b      	lsls	r3, r3, #9
 800e788:	623b      	str	r3, [r7, #32]
				continue;
 800e78a:	e047      	b.n	800e81c <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e792:	693a      	ldr	r2, [r7, #16]
 800e794:	429a      	cmp	r2, r3
 800e796:	d01a      	beq.n	800e7ce <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	d212      	bcs.n	800e7ce <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e7ae:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800e7b2:	68f9      	ldr	r1, [r7, #12]
 800e7b4:	2301      	movs	r3, #1
 800e7b6:	693a      	ldr	r2, [r7, #16]
 800e7b8:	f7fd fdb6 	bl	800c328 <disk_read>
 800e7bc:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d005      	beq.n	800e7ce <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	2201      	movs	r2, #1
 800e7c6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	e05a      	b.n	800e884 <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	693a      	ldr	r2, [r7, #16]
 800e7d2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800e7dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7e0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e7e4:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800e7e6:	6a3a      	ldr	r2, [r7, #32]
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	429a      	cmp	r2, r3
 800e7ec:	d901      	bls.n	800e7f2 <f_write+0x2c0>
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800e7f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7fc:	68fa      	ldr	r2, [r7, #12]
 800e7fe:	4413      	add	r3, r2
 800e800:	6a3a      	ldr	r2, [r7, #32]
 800e802:	69b9      	ldr	r1, [r7, #24]
 800e804:	4618      	mov	r0, r3
 800e806:	f7fd fded 	bl	800c3e4 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800e810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e814:	b2da      	uxtb	r2, r3
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800e81c:	69ba      	ldr	r2, [r7, #24]
 800e81e:	6a3b      	ldr	r3, [r7, #32]
 800e820:	4413      	add	r3, r2
 800e822:	61bb      	str	r3, [r7, #24]
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800e82a:	6a3b      	ldr	r3, [r7, #32]
 800e82c:	441a      	add	r2, r3
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	681a      	ldr	r2, [r3, #0]
 800e838:	6a3b      	ldr	r3, [r7, #32]
 800e83a:	441a      	add	r2, r3
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	601a      	str	r2, [r3, #0]
 800e840:	687a      	ldr	r2, [r7, #4]
 800e842:	6a3b      	ldr	r3, [r7, #32]
 800e844:	1ad3      	subs	r3, r2, r3
 800e846:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	f47f aea7 	bne.w	800e59e <f_write+0x6c>
 800e850:	e000      	b.n	800e854 <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e852:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800e860:	429a      	cmp	r2, r3
 800e862:	d905      	bls.n	800e870 <f_write+0x33e>
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800e876:	f043 0320 	orr.w	r3, r3, #32
 800e87a:	b2da      	uxtb	r2, r3
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 800e882:	2300      	movs	r3, #0
}
 800e884:	4618      	mov	r0, r3
 800e886:	3728      	adds	r7, #40	; 0x28
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}

0800e88c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b086      	sub	sp, #24
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f7ff fbc5 	bl	800e024 <validate>
 800e89a:	4603      	mov	r3, r0
 800e89c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e89e:	7dfb      	ldrb	r3, [r7, #23]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	f040 80a8 	bne.w	800e9f6 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800e8ac:	f003 0320 	and.w	r3, r3, #32
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	f000 80a0 	beq.w	800e9f6 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800e8bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d019      	beq.n	800e8f8 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e8ca:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800e8ce:	6879      	ldr	r1, [r7, #4]
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800e8d6:	2301      	movs	r3, #1
 800e8d8:	f7fd fd46 	bl	800c368 <disk_write>
 800e8dc:	4603      	mov	r3, r0
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d001      	beq.n	800e8e6 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800e8e2:	2301      	movs	r3, #1
 800e8e4:	e088      	b.n	800e9f8 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800e8ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e8f0:	b2da      	uxtb	r2, r3
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800e904:	4619      	mov	r1, r3
 800e906:	4610      	mov	r0, r2
 800e908:	f7fd ffdd 	bl	800c8c6 <move_window>
 800e90c:	4603      	mov	r3, r0
 800e90e:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800e910:	7dfb      	ldrb	r3, [r7, #23]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d16f      	bne.n	800e9f6 <f_sync+0x16a>
				dir = fp->dir_ptr;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800e91c:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800e91e:	693b      	ldr	r3, [r7, #16]
 800e920:	330b      	adds	r3, #11
 800e922:	781a      	ldrb	r2, [r3, #0]
 800e924:	693b      	ldr	r3, [r7, #16]
 800e926:	330b      	adds	r3, #11
 800e928:	f042 0220 	orr.w	r2, r2, #32
 800e92c:	b2d2      	uxtb	r2, r2
 800e92e:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800e936:	693b      	ldr	r3, [r7, #16]
 800e938:	331c      	adds	r3, #28
 800e93a:	b2d2      	uxtb	r2, r2
 800e93c:	701a      	strb	r2, [r3, #0]
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800e944:	b29b      	uxth	r3, r3
 800e946:	0a1b      	lsrs	r3, r3, #8
 800e948:	b29a      	uxth	r2, r3
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	331d      	adds	r3, #29
 800e94e:	b2d2      	uxtb	r2, r2
 800e950:	701a      	strb	r2, [r3, #0]
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800e958:	0c1a      	lsrs	r2, r3, #16
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	331e      	adds	r3, #30
 800e95e:	b2d2      	uxtb	r2, r2
 800e960:	701a      	strb	r2, [r3, #0]
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800e968:	0e1a      	lsrs	r2, r3, #24
 800e96a:	693b      	ldr	r3, [r7, #16]
 800e96c:	331f      	adds	r3, #31
 800e96e:	b2d2      	uxtb	r2, r2
 800e970:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e978:	4619      	mov	r1, r3
 800e97a:	6938      	ldr	r0, [r7, #16]
 800e97c:	f7fe fd8e 	bl	800d49c <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800e980:	f7fc f890 	bl	800aaa4 <get_fattime>
 800e984:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800e986:	693b      	ldr	r3, [r7, #16]
 800e988:	3316      	adds	r3, #22
 800e98a:	68fa      	ldr	r2, [r7, #12]
 800e98c:	b2d2      	uxtb	r2, r2
 800e98e:	701a      	strb	r2, [r3, #0]
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	b29b      	uxth	r3, r3
 800e994:	0a1b      	lsrs	r3, r3, #8
 800e996:	b29a      	uxth	r2, r3
 800e998:	693b      	ldr	r3, [r7, #16]
 800e99a:	3317      	adds	r3, #23
 800e99c:	b2d2      	uxtb	r2, r2
 800e99e:	701a      	strb	r2, [r3, #0]
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	0c1a      	lsrs	r2, r3, #16
 800e9a4:	693b      	ldr	r3, [r7, #16]
 800e9a6:	3318      	adds	r3, #24
 800e9a8:	b2d2      	uxtb	r2, r2
 800e9aa:	701a      	strb	r2, [r3, #0]
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	0e1a      	lsrs	r2, r3, #24
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	3319      	adds	r3, #25
 800e9b4:	b2d2      	uxtb	r2, r2
 800e9b6:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800e9b8:	693b      	ldr	r3, [r7, #16]
 800e9ba:	3312      	adds	r3, #18
 800e9bc:	2200      	movs	r2, #0
 800e9be:	701a      	strb	r2, [r3, #0]
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	3313      	adds	r3, #19
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800e9ce:	f023 0320 	bic.w	r3, r3, #32
 800e9d2:	b2da      	uxtb	r2, r3
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e9e0:	2201      	movs	r2, #1
 800e9e2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f7fd ff98 	bl	800c922 <sync_fs>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800e9f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	3718      	adds	r7, #24
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd80      	pop	{r7, pc}

0800ea00 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b084      	sub	sp, #16
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f7ff ff3f 	bl	800e88c <f_sync>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ea12:	7bfb      	ldrb	r3, [r7, #15]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d116      	bne.n	800ea46 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800ea18:	6878      	ldr	r0, [r7, #4]
 800ea1a:	f7ff fb03 	bl	800e024 <validate>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ea22:	7bfb      	ldrb	r3, [r7, #15]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d10e      	bne.n	800ea46 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f7fd fe94 	bl	800c75c <dec_lock>
 800ea34:	4603      	mov	r3, r0
 800ea36:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ea38:	7bfb      	ldrb	r3, [r7, #15]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d103      	bne.n	800ea46 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	2200      	movs	r2, #0
 800ea42:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ea46:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea48:	4618      	mov	r0, r3
 800ea4a:	3710      	adds	r7, #16
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bd80      	pop	{r7, pc}

0800ea50 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b090      	sub	sp, #64	; 0x40
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
 800ea58:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800ea5a:	6878      	ldr	r0, [r7, #4]
 800ea5c:	f7ff fae2 	bl	800e024 <validate>
 800ea60:	4603      	mov	r3, r0
 800ea62:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800ea66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d002      	beq.n	800ea74 <f_lseek+0x24>
 800ea6e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ea72:	e247      	b.n	800ef04 <f_lseek+0x4b4>
	if (fp->err)						/* Check error */
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d003      	beq.n	800ea86 <f_lseek+0x36>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800ea84:	e23e      	b.n	800ef04 <f_lseek+0x4b4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	f000 80f2 	beq.w	800ec76 <f_lseek+0x226>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea98:	d164      	bne.n	800eb64 <f_lseek+0x114>
			tbl = fp->cltbl;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800eaa0:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800eaa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa4:	1d1a      	adds	r2, r3, #4
 800eaa6:	627a      	str	r2, [r7, #36]	; 0x24
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	617b      	str	r3, [r7, #20]
 800eaac:	2302      	movs	r3, #2
 800eaae:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800eab6:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800eab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d041      	beq.n	800eb42 <f_lseek+0xf2>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800eabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eac0:	613b      	str	r3, [r7, #16]
 800eac2:	2300      	movs	r3, #0
 800eac4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eac8:	3302      	adds	r3, #2
 800eaca:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800eacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eace:	60fb      	str	r3, [r7, #12]
 800ead0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead2:	3301      	adds	r3, #1
 800ead4:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800eadc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eade:	4618      	mov	r0, r3
 800eae0:	f7fd ffed 	bl	800cabe <get_fat>
 800eae4:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800eae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae8:	2b01      	cmp	r3, #1
 800eaea:	d805      	bhi.n	800eaf8 <f_lseek+0xa8>
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2202      	movs	r2, #2
 800eaf0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800eaf4:	2302      	movs	r3, #2
 800eaf6:	e205      	b.n	800ef04 <f_lseek+0x4b4>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800eaf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eafa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eafe:	d105      	bne.n	800eb0c <f_lseek+0xbc>
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2201      	movs	r2, #1
 800eb04:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800eb08:	2301      	movs	r3, #1
 800eb0a:	e1fb      	b.n	800ef04 <f_lseek+0x4b4>
					} while (cl == pcl + 1);
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	3301      	adds	r3, #1
 800eb10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb12:	429a      	cmp	r2, r3
 800eb14:	d0da      	beq.n	800eacc <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800eb16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	429a      	cmp	r2, r3
 800eb1c:	d809      	bhi.n	800eb32 <f_lseek+0xe2>
						*tbl++ = ncl; *tbl++ = tcl;
 800eb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb20:	1d1a      	adds	r2, r3, #4
 800eb22:	627a      	str	r2, [r7, #36]	; 0x24
 800eb24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb26:	601a      	str	r2, [r3, #0]
 800eb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb2a:	1d1a      	adds	r2, r3, #4
 800eb2c:	627a      	str	r2, [r7, #36]	; 0x24
 800eb2e:	693a      	ldr	r2, [r7, #16]
 800eb30:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800eb38:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800eb3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb3e:	429a      	cmp	r2, r3
 800eb40:	d3bd      	bcc.n	800eabe <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800eb48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb4a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800eb4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb4e:	697b      	ldr	r3, [r7, #20]
 800eb50:	429a      	cmp	r2, r3
 800eb52:	d803      	bhi.n	800eb5c <f_lseek+0x10c>
				*tbl = 0;		/* Terminate table */
 800eb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb56:	2200      	movs	r2, #0
 800eb58:	601a      	str	r2, [r3, #0]
 800eb5a:	e1d1      	b.n	800ef00 <f_lseek+0x4b0>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800eb5c:	2311      	movs	r3, #17
 800eb5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800eb62:	e1cd      	b.n	800ef00 <f_lseek+0x4b0>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800eb6a:	683a      	ldr	r2, [r7, #0]
 800eb6c:	429a      	cmp	r2, r3
 800eb6e:	d903      	bls.n	800eb78 <f_lseek+0x128>
				ofs = fp->fsize;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800eb76:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	683a      	ldr	r2, [r7, #0]
 800eb7c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			if (ofs) {
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	f000 81bc 	beq.w	800ef00 <f_lseek+0x4b0>
				fp->clust = clmt_clust(fp, ofs - 1);
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	3b01      	subs	r3, #1
 800eb8c:	4619      	mov	r1, r3
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	f7fe fa4e 	bl	800d030 <clmt_clust>
 800eb94:	4602      	mov	r2, r0
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				dsc = clust2sect(fp->fs, fp->clust);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800eba8:	4619      	mov	r1, r3
 800ebaa:	4610      	mov	r0, r2
 800ebac:	f7fd ff66 	bl	800ca7c <clust2sect>
 800ebb0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800ebb2:	69bb      	ldr	r3, [r7, #24]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d105      	bne.n	800ebc4 <f_lseek+0x174>
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2202      	movs	r2, #2
 800ebbc:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800ebc0:	2302      	movs	r3, #2
 800ebc2:	e19f      	b.n	800ef04 <f_lseek+0x4b4>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	3b01      	subs	r3, #1
 800ebc8:	0a5b      	lsrs	r3, r3, #9
 800ebca:	687a      	ldr	r2, [r7, #4]
 800ebcc:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800ebd0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800ebd4:	3a01      	subs	r2, #1
 800ebd6:	4013      	ands	r3, r2
 800ebd8:	69ba      	ldr	r2, [r7, #24]
 800ebda:	4413      	add	r3, r2
 800ebdc:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800ebe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	f000 8189 	beq.w	800ef00 <f_lseek+0x4b0>
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ebf4:	69ba      	ldr	r2, [r7, #24]
 800ebf6:	429a      	cmp	r2, r3
 800ebf8:	f000 8182 	beq.w	800ef00 <f_lseek+0x4b0>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800ec02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d01d      	beq.n	800ec46 <f_lseek+0x1f6>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ec10:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800ec14:	6879      	ldr	r1, [r7, #4]
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	f7fd fba3 	bl	800c368 <disk_write>
 800ec22:	4603      	mov	r3, r0
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d005      	beq.n	800ec34 <f_lseek+0x1e4>
							ABORT(fp->fs, FR_DISK_ERR);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2201      	movs	r2, #1
 800ec2c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800ec30:	2301      	movs	r3, #1
 800ec32:	e167      	b.n	800ef04 <f_lseek+0x4b4>
						fp->flag &= ~FA__DIRTY;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800ec3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec3e:	b2da      	uxtb	r2, r3
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ec4c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800ec50:	6879      	ldr	r1, [r7, #4]
 800ec52:	2301      	movs	r3, #1
 800ec54:	69ba      	ldr	r2, [r7, #24]
 800ec56:	f7fd fb67 	bl	800c328 <disk_read>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d005      	beq.n	800ec6c <f_lseek+0x21c>
						ABORT(fp->fs, FR_DISK_ERR);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2201      	movs	r2, #1
 800ec64:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800ec68:	2301      	movs	r3, #1
 800ec6a:	e14b      	b.n	800ef04 <f_lseek+0x4b4>
#endif
					fp->dsect = dsc;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	69ba      	ldr	r2, [r7, #24]
 800ec70:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 800ec74:	e144      	b.n	800ef00 <f_lseek+0x4b0>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800ec7c:	683a      	ldr	r2, [r7, #0]
 800ec7e:	429a      	cmp	r2, r3
 800ec80:	d90a      	bls.n	800ec98 <f_lseek+0x248>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800ec88:	f003 0302 	and.w	r3, r3, #2
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d103      	bne.n	800ec98 <f_lseek+0x248>
#endif
			) ofs = fp->fsize;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800ec96:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800ec9e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800eca0:	2300      	movs	r3, #0
 800eca2:	637b      	str	r3, [r7, #52]	; 0x34
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eca8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		if (ofs) {
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	f000 80c6 	beq.w	800ee40 <f_lseek+0x3f0>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ecba:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800ecbe:	025b      	lsls	r3, r3, #9
 800ecc0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800ecc2:	6a3b      	ldr	r3, [r7, #32]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d01e      	beq.n	800ed06 <f_lseek+0x2b6>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800ecc8:	683b      	ldr	r3, [r7, #0]
 800ecca:	1e5a      	subs	r2, r3, #1
 800eccc:	69fb      	ldr	r3, [r7, #28]
 800ecce:	fbb2 f2f3 	udiv	r2, r2, r3
 800ecd2:	6a3b      	ldr	r3, [r7, #32]
 800ecd4:	1e59      	subs	r1, r3, #1
 800ecd6:	69fb      	ldr	r3, [r7, #28]
 800ecd8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800ecdc:	429a      	cmp	r2, r3
 800ecde:	d312      	bcc.n	800ed06 <f_lseek+0x2b6>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800ece0:	6a3b      	ldr	r3, [r7, #32]
 800ece2:	1e5a      	subs	r2, r3, #1
 800ece4:	69fb      	ldr	r3, [r7, #28]
 800ece6:	425b      	negs	r3, r3
 800ece8:	401a      	ands	r2, r3
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				ofs -= fp->fptr;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800ecf6:	683a      	ldr	r2, [r7, #0]
 800ecf8:	1ad3      	subs	r3, r2, r3
 800ecfa:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ed02:	63bb      	str	r3, [r7, #56]	; 0x38
 800ed04:	e029      	b.n	800ed5a <f_lseek+0x30a>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ed0c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800ed0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d11e      	bne.n	800ed52 <f_lseek+0x302>
					clst = create_chain(fp->fs, 0);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ed1a:	2100      	movs	r1, #0
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f7fe f8ea 	bl	800cef6 <create_chain>
 800ed22:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800ed24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed26:	2b01      	cmp	r3, #1
 800ed28:	d105      	bne.n	800ed36 <f_lseek+0x2e6>
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2202      	movs	r2, #2
 800ed2e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800ed32:	2302      	movs	r3, #2
 800ed34:	e0e6      	b.n	800ef04 <f_lseek+0x4b4>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800ed36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed3c:	d105      	bne.n	800ed4a <f_lseek+0x2fa>
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2201      	movs	r2, #1
 800ed42:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800ed46:	2301      	movs	r3, #1
 800ed48:	e0dc      	b.n	800ef04 <f_lseek+0x4b4>
					fp->sclust = clst;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed4e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				}
#endif
				fp->clust = clst;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			if (clst != 0) {
 800ed5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d06f      	beq.n	800ee40 <f_lseek+0x3f0>
				while (ofs > bcs) {						/* Cluster following loop */
 800ed60:	e047      	b.n	800edf2 <f_lseek+0x3a2>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800ed68:	f003 0302 	and.w	r3, r3, #2
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d00d      	beq.n	800ed8c <f_lseek+0x33c>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ed76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ed78:	4618      	mov	r0, r3
 800ed7a:	f7fe f8bc 	bl	800cef6 <create_chain>
 800ed7e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800ed80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d10a      	bne.n	800ed9c <f_lseek+0x34c>
							ofs = bcs; break;
 800ed86:	69fb      	ldr	r3, [r7, #28]
 800ed88:	603b      	str	r3, [r7, #0]
 800ed8a:	e036      	b.n	800edfa <f_lseek+0x3aa>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ed92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ed94:	4618      	mov	r0, r3
 800ed96:	f7fd fe92 	bl	800cabe <get_fat>
 800ed9a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800ed9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eda2:	d105      	bne.n	800edb0 <f_lseek+0x360>
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2201      	movs	r2, #1
 800eda8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800edac:	2301      	movs	r3, #1
 800edae:	e0a9      	b.n	800ef04 <f_lseek+0x4b4>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800edb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edb2:	2b01      	cmp	r3, #1
 800edb4:	d907      	bls.n	800edc6 <f_lseek+0x376>
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800edbc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800edc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800edc2:	429a      	cmp	r2, r3
 800edc4:	d305      	bcc.n	800edd2 <f_lseek+0x382>
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2202      	movs	r2, #2
 800edca:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800edce:	2302      	movs	r3, #2
 800edd0:	e098      	b.n	800ef04 <f_lseek+0x4b4>
					fp->clust = clst;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800edd6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
					fp->fptr += bcs;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ede0:	69fb      	ldr	r3, [r7, #28]
 800ede2:	441a      	add	r2, r3
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
					ofs -= bcs;
 800edea:	683a      	ldr	r2, [r7, #0]
 800edec:	69fb      	ldr	r3, [r7, #28]
 800edee:	1ad3      	subs	r3, r2, r3
 800edf0:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800edf2:	683a      	ldr	r2, [r7, #0]
 800edf4:	69fb      	ldr	r3, [r7, #28]
 800edf6:	429a      	cmp	r2, r3
 800edf8:	d8b3      	bhi.n	800ed62 <f_lseek+0x312>
				}
				fp->fptr += ofs;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	441a      	add	r2, r3
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d015      	beq.n	800ee40 <f_lseek+0x3f0>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ee1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	f7fd fe2d 	bl	800ca7c <clust2sect>
 800ee22:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800ee24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d105      	bne.n	800ee36 <f_lseek+0x3e6>
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	2202      	movs	r2, #2
 800ee2e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800ee32:	2302      	movs	r3, #2
 800ee34:	e066      	b.n	800ef04 <f_lseek+0x4b4>
					nsect += ofs / SS(fp->fs);
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	0a5b      	lsrs	r3, r3, #9
 800ee3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee3c:	4413      	add	r3, r2
 800ee3e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800ee46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d041      	beq.n	800eed2 <f_lseek+0x482>
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ee54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee56:	429a      	cmp	r2, r3
 800ee58:	d03b      	beq.n	800eed2 <f_lseek+0x482>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800ee60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d01d      	beq.n	800eea4 <f_lseek+0x454>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ee6e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800ee72:	6879      	ldr	r1, [r7, #4]
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800ee7a:	2301      	movs	r3, #1
 800ee7c:	f7fd fa74 	bl	800c368 <disk_write>
 800ee80:	4603      	mov	r3, r0
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d005      	beq.n	800ee92 <f_lseek+0x442>
					ABORT(fp->fs, FR_DISK_ERR);
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	2201      	movs	r2, #1
 800ee8a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800ee8e:	2301      	movs	r3, #1
 800ee90:	e038      	b.n	800ef04 <f_lseek+0x4b4>
				fp->flag &= ~FA__DIRTY;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800ee98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ee9c:	b2da      	uxtb	r2, r3
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800eeaa:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800eeae:	6879      	ldr	r1, [r7, #4]
 800eeb0:	2301      	movs	r3, #1
 800eeb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eeb4:	f7fd fa38 	bl	800c328 <disk_read>
 800eeb8:	4603      	mov	r3, r0
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d005      	beq.n	800eeca <f_lseek+0x47a>
				ABORT(fp->fs, FR_DISK_ERR);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	2201      	movs	r2, #1
 800eec2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800eec6:	2301      	movs	r3, #1
 800eec8:	e01c      	b.n	800ef04 <f_lseek+0x4b4>
#endif
			fp->dsect = nsect;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eece:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800eede:	429a      	cmp	r2, r3
 800eee0:	d90e      	bls.n	800ef00 <f_lseek+0x4b0>
			fp->fsize = fp->fptr;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800eef4:	f043 0320 	orr.w	r3, r3, #32
 800eef8:	b2da      	uxtb	r2, r3
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800ef00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800ef04:	4618      	mov	r0, r3
 800ef06:	3740      	adds	r7, #64	; 0x40
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	bd80      	pop	{r7, pc}

0800ef0c <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 800ef12:	af00      	add	r7, sp, #0
 800ef14:	1d3b      	adds	r3, r7, #4
 800ef16:	6018      	str	r0, [r3, #0]
 800ef18:	463b      	mov	r3, r7
 800ef1a:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 0);
 800ef1c:	1d39      	adds	r1, r7, #4
 800ef1e:	f107 0314 	add.w	r3, r7, #20
 800ef22:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ef26:	2200      	movs	r2, #0
 800ef28:	4618      	mov	r0, r3
 800ef2a:	f7fe fdb1 	bl	800da90 <find_volume>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
	if (res == FR_OK) {
 800ef34:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d129      	bne.n	800ef90 <f_stat+0x84>
		INIT_BUF(dj);
 800ef3c:	f107 0314 	add.w	r3, r7, #20
 800ef40:	f107 0208 	add.w	r2, r7, #8
 800ef44:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 800ef48:	1d3b      	adds	r3, r7, #4
 800ef4a:	681a      	ldr	r2, [r3, #0]
 800ef4c:	f107 0314 	add.w	r3, r7, #20
 800ef50:	4611      	mov	r1, r2
 800ef52:	4618      	mov	r0, r3
 800ef54:	f7fe fc80 	bl	800d858 <follow_path>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
		if (res == FR_OK) {				/* Follow completed */
 800ef5e:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d114      	bne.n	800ef90 <f_stat+0x84>
			if (dj.dir) {		/* Found an object */
 800ef66:	f107 0314 	add.w	r3, r7, #20
 800ef6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d00b      	beq.n	800ef8a <f_stat+0x7e>
				if (fno) get_fileinfo(&dj, fno);
 800ef72:	463b      	mov	r3, r7
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d00a      	beq.n	800ef90 <f_stat+0x84>
 800ef7a:	463b      	mov	r3, r7
 800ef7c:	f107 0214 	add.w	r2, r7, #20
 800ef80:	6819      	ldr	r1, [r3, #0]
 800ef82:	4610      	mov	r0, r2
 800ef84:	f7fe fb38 	bl	800d5f8 <get_fileinfo>
 800ef88:	e002      	b.n	800ef90 <f_stat+0x84>
			} else {			/* It is root directory */
				res = FR_INVALID_NAME;
 800ef8a:	2306      	movs	r3, #6
 800ef8c:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
			}
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
 800ef90:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
}
 800ef94:	4618      	mov	r0, r3
 800ef96:	f507 770e 	add.w	r7, r7, #568	; 0x238
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	bd80      	pop	{r7, pc}

0800ef9e <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800ef9e:	b580      	push	{r7, lr}
 800efa0:	b084      	sub	sp, #16
 800efa2:	af00      	add	r7, sp, #0
 800efa4:	6078      	str	r0, [r7, #4]
 800efa6:	460b      	mov	r3, r1
 800efa8:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800efaa:	78fb      	ldrb	r3, [r7, #3]
 800efac:	2b0a      	cmp	r3, #10
 800efae:	d103      	bne.n	800efb8 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800efb0:	210d      	movs	r1, #13
 800efb2:	6878      	ldr	r0, [r7, #4]
 800efb4:	f7ff fff3 	bl	800ef9e <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	685b      	ldr	r3, [r3, #4]
 800efbc:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	db25      	blt.n	800f010 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	1c5a      	adds	r2, r3, #1
 800efc8:	60fa      	str	r2, [r7, #12]
 800efca:	687a      	ldr	r2, [r7, #4]
 800efcc:	4413      	add	r3, r2
 800efce:	78fa      	ldrb	r2, [r7, #3]
 800efd0:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	2b3c      	cmp	r3, #60	; 0x3c
 800efd6:	dd12      	ble.n	800effe <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	6818      	ldr	r0, [r3, #0]
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f103 010c 	add.w	r1, r3, #12
 800efe2:	68fa      	ldr	r2, [r7, #12]
 800efe4:	f107 0308 	add.w	r3, r7, #8
 800efe8:	f7ff faa3 	bl	800e532 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800efec:	68ba      	ldr	r2, [r7, #8]
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	429a      	cmp	r2, r3
 800eff2:	d101      	bne.n	800eff8 <putc_bfd+0x5a>
 800eff4:	2300      	movs	r3, #0
 800eff6:	e001      	b.n	800effc <putc_bfd+0x5e>
 800eff8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800effc:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	68fa      	ldr	r2, [r7, #12]
 800f002:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	689b      	ldr	r3, [r3, #8]
 800f008:	1c5a      	adds	r2, r3, #1
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	609a      	str	r2, [r3, #8]
 800f00e:	e000      	b.n	800f012 <putc_bfd+0x74>
	if (i < 0) return;
 800f010:	bf00      	nop
}
 800f012:	3710      	adds	r7, #16
 800f014:	46bd      	mov	sp, r7
 800f016:	bd80      	pop	{r7, pc}

0800f018 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800f018:	b590      	push	{r4, r7, lr}
 800f01a:	b097      	sub	sp, #92	; 0x5c
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
 800f020:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800f022:	683b      	ldr	r3, [r7, #0]
 800f024:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800f026:	2300      	movs	r3, #0
 800f028:	613b      	str	r3, [r7, #16]
 800f02a:	693b      	ldr	r3, [r7, #16]
 800f02c:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800f02e:	e009      	b.n	800f044 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	1c5a      	adds	r2, r3, #1
 800f034:	607a      	str	r2, [r7, #4]
 800f036:	781a      	ldrb	r2, [r3, #0]
 800f038:	f107 030c 	add.w	r3, r7, #12
 800f03c:	4611      	mov	r1, r2
 800f03e:	4618      	mov	r0, r3
 800f040:	f7ff ffad 	bl	800ef9e <putc_bfd>
	while (*str)			/* Put the string */
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	781b      	ldrb	r3, [r3, #0]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d1f1      	bne.n	800f030 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800f04c:	693b      	ldr	r3, [r7, #16]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	db16      	blt.n	800f080 <f_puts+0x68>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800f052:	68f8      	ldr	r0, [r7, #12]
 800f054:	693b      	ldr	r3, [r7, #16]
 800f056:	461c      	mov	r4, r3
 800f058:	f107 0208 	add.w	r2, r7, #8
 800f05c:	f107 030c 	add.w	r3, r7, #12
 800f060:	f103 010c 	add.w	r1, r3, #12
 800f064:	4613      	mov	r3, r2
 800f066:	4622      	mov	r2, r4
 800f068:	f7ff fa63 	bl	800e532 <f_write>
 800f06c:	4603      	mov	r3, r0
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d106      	bne.n	800f080 <f_puts+0x68>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800f072:	693b      	ldr	r3, [r7, #16]
 800f074:	461a      	mov	r2, r3
 800f076:	68bb      	ldr	r3, [r7, #8]
 800f078:	429a      	cmp	r2, r3
 800f07a:	d101      	bne.n	800f080 <f_puts+0x68>
 800f07c:	697b      	ldr	r3, [r7, #20]
 800f07e:	e001      	b.n	800f084 <f_puts+0x6c>
	return EOF;
 800f080:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800f084:	4618      	mov	r0, r3
 800f086:	375c      	adds	r7, #92	; 0x5c
 800f088:	46bd      	mov	sp, r7
 800f08a:	bd90      	pop	{r4, r7, pc}

0800f08c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f08c:	b480      	push	{r7}
 800f08e:	b087      	sub	sp, #28
 800f090:	af00      	add	r7, sp, #0
 800f092:	60f8      	str	r0, [r7, #12]
 800f094:	60b9      	str	r1, [r7, #8]
 800f096:	4613      	mov	r3, r2
 800f098:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f09a:	2301      	movs	r3, #1
 800f09c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f09e:	2300      	movs	r3, #0
 800f0a0:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800f0a2:	4b1e      	ldr	r3, [pc, #120]	; (800f11c <FATFS_LinkDriverEx+0x90>)
 800f0a4:	7a5b      	ldrb	r3, [r3, #9]
 800f0a6:	b2db      	uxtb	r3, r3
 800f0a8:	2b01      	cmp	r3, #1
 800f0aa:	d831      	bhi.n	800f110 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f0ac:	4b1b      	ldr	r3, [pc, #108]	; (800f11c <FATFS_LinkDriverEx+0x90>)
 800f0ae:	7a5b      	ldrb	r3, [r3, #9]
 800f0b0:	b2db      	uxtb	r3, r3
 800f0b2:	461a      	mov	r2, r3
 800f0b4:	4b19      	ldr	r3, [pc, #100]	; (800f11c <FATFS_LinkDriverEx+0x90>)
 800f0b6:	2100      	movs	r1, #0
 800f0b8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800f0ba:	4b18      	ldr	r3, [pc, #96]	; (800f11c <FATFS_LinkDriverEx+0x90>)
 800f0bc:	7a5b      	ldrb	r3, [r3, #9]
 800f0be:	b2db      	uxtb	r3, r3
 800f0c0:	4a16      	ldr	r2, [pc, #88]	; (800f11c <FATFS_LinkDriverEx+0x90>)
 800f0c2:	009b      	lsls	r3, r3, #2
 800f0c4:	4413      	add	r3, r2
 800f0c6:	68fa      	ldr	r2, [r7, #12]
 800f0c8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800f0ca:	4b14      	ldr	r3, [pc, #80]	; (800f11c <FATFS_LinkDriverEx+0x90>)
 800f0cc:	7a5b      	ldrb	r3, [r3, #9]
 800f0ce:	b2db      	uxtb	r3, r3
 800f0d0:	461a      	mov	r2, r3
 800f0d2:	4b12      	ldr	r3, [pc, #72]	; (800f11c <FATFS_LinkDriverEx+0x90>)
 800f0d4:	4413      	add	r3, r2
 800f0d6:	79fa      	ldrb	r2, [r7, #7]
 800f0d8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f0da:	4b10      	ldr	r3, [pc, #64]	; (800f11c <FATFS_LinkDriverEx+0x90>)
 800f0dc:	7a5b      	ldrb	r3, [r3, #9]
 800f0de:	b2db      	uxtb	r3, r3
 800f0e0:	1c5a      	adds	r2, r3, #1
 800f0e2:	b2d1      	uxtb	r1, r2
 800f0e4:	4a0d      	ldr	r2, [pc, #52]	; (800f11c <FATFS_LinkDriverEx+0x90>)
 800f0e6:	7251      	strb	r1, [r2, #9]
 800f0e8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f0ea:	7dbb      	ldrb	r3, [r7, #22]
 800f0ec:	3330      	adds	r3, #48	; 0x30
 800f0ee:	b2da      	uxtb	r2, r3
 800f0f0:	68bb      	ldr	r3, [r7, #8]
 800f0f2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f0f4:	68bb      	ldr	r3, [r7, #8]
 800f0f6:	3301      	adds	r3, #1
 800f0f8:	223a      	movs	r2, #58	; 0x3a
 800f0fa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f0fc:	68bb      	ldr	r3, [r7, #8]
 800f0fe:	3302      	adds	r3, #2
 800f100:	222f      	movs	r2, #47	; 0x2f
 800f102:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f104:	68bb      	ldr	r3, [r7, #8]
 800f106:	3303      	adds	r3, #3
 800f108:	2200      	movs	r2, #0
 800f10a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f10c:	2300      	movs	r3, #0
 800f10e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800f110:	7dfb      	ldrb	r3, [r7, #23]
}
 800f112:	4618      	mov	r0, r3
 800f114:	371c      	adds	r7, #28
 800f116:	46bd      	mov	sp, r7
 800f118:	bc80      	pop	{r7}
 800f11a:	4770      	bx	lr
 800f11c:	20000244 	.word	0x20000244

0800f120 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b082      	sub	sp, #8
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
 800f128:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f12a:	2200      	movs	r2, #0
 800f12c:	6839      	ldr	r1, [r7, #0]
 800f12e:	6878      	ldr	r0, [r7, #4]
 800f130:	f7ff ffac 	bl	800f08c <FATFS_LinkDriverEx>
 800f134:	4603      	mov	r3, r0
}
 800f136:	4618      	mov	r0, r3
 800f138:	3708      	adds	r7, #8
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}
	...

0800f140 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b082      	sub	sp, #8
 800f144:	af00      	add	r7, sp, #0
 800f146:	4603      	mov	r3, r0
 800f148:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f14a:	4b0b      	ldr	r3, [pc, #44]	; (800f178 <SD_initialize+0x38>)
 800f14c:	2201      	movs	r2, #1
 800f14e:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 800f150:	f7fb fcb0 	bl	800aab4 <BSP_SD_Init>
 800f154:	4603      	mov	r3, r0
 800f156:	2b00      	cmp	r3, #0
 800f158:	d107      	bne.n	800f16a <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f15a:	4b07      	ldr	r3, [pc, #28]	; (800f178 <SD_initialize+0x38>)
 800f15c:	781b      	ldrb	r3, [r3, #0]
 800f15e:	b2db      	uxtb	r3, r3
 800f160:	f023 0301 	bic.w	r3, r3, #1
 800f164:	b2da      	uxtb	r2, r3
 800f166:	4b04      	ldr	r3, [pc, #16]	; (800f178 <SD_initialize+0x38>)
 800f168:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f16a:	4b03      	ldr	r3, [pc, #12]	; (800f178 <SD_initialize+0x38>)
 800f16c:	781b      	ldrb	r3, [r3, #0]
 800f16e:	b2db      	uxtb	r3, r3
}
 800f170:	4618      	mov	r0, r3
 800f172:	3708      	adds	r7, #8
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}
 800f178:	2000011b 	.word	0x2000011b

0800f17c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b082      	sub	sp, #8
 800f180:	af00      	add	r7, sp, #0
 800f182:	4603      	mov	r3, r0
 800f184:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f186:	4b0b      	ldr	r3, [pc, #44]	; (800f1b4 <SD_status+0x38>)
 800f188:	2201      	movs	r2, #1
 800f18a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800f18c:	f7fb fce6 	bl	800ab5c <BSP_SD_GetCardState>
 800f190:	4603      	mov	r3, r0
 800f192:	2b00      	cmp	r3, #0
 800f194:	d107      	bne.n	800f1a6 <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f196:	4b07      	ldr	r3, [pc, #28]	; (800f1b4 <SD_status+0x38>)
 800f198:	781b      	ldrb	r3, [r3, #0]
 800f19a:	b2db      	uxtb	r3, r3
 800f19c:	f023 0301 	bic.w	r3, r3, #1
 800f1a0:	b2da      	uxtb	r2, r3
 800f1a2:	4b04      	ldr	r3, [pc, #16]	; (800f1b4 <SD_status+0x38>)
 800f1a4:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 800f1a6:	4b03      	ldr	r3, [pc, #12]	; (800f1b4 <SD_status+0x38>)
 800f1a8:	781b      	ldrb	r3, [r3, #0]
 800f1aa:	b2db      	uxtb	r3, r3
}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	3708      	adds	r7, #8
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}
 800f1b4:	2000011b 	.word	0x2000011b

0800f1b8 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b086      	sub	sp, #24
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	60b9      	str	r1, [r7, #8]
 800f1c0:	607a      	str	r2, [r7, #4]
 800f1c2:	603b      	str	r3, [r7, #0]
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f1c8:	2301      	movs	r3, #1
 800f1ca:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800f1cc:	4b0f      	ldr	r3, [pc, #60]	; (800f20c <SD_read+0x54>)
 800f1ce:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 800f1d0:	4b0f      	ldr	r3, [pc, #60]	; (800f210 <SD_read+0x58>)
 800f1d2:	683a      	ldr	r2, [r7, #0]
 800f1d4:	6879      	ldr	r1, [r7, #4]
 800f1d6:	68b8      	ldr	r0, [r7, #8]
 800f1d8:	f7fb fc84 	bl	800aae4 <BSP_SD_ReadBlocks>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d10e      	bne.n	800f200 <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800f1e2:	e006      	b.n	800f1f2 <SD_read+0x3a>
    {
      if (timeout-- == 0)
 800f1e4:	693b      	ldr	r3, [r7, #16]
 800f1e6:	1e5a      	subs	r2, r3, #1
 800f1e8:	613a      	str	r2, [r7, #16]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d101      	bne.n	800f1f2 <SD_read+0x3a>
      {
        return RES_ERROR;
 800f1ee:	2301      	movs	r3, #1
 800f1f0:	e007      	b.n	800f202 <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800f1f2:	f7fb fcb3 	bl	800ab5c <BSP_SD_GetCardState>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d1f3      	bne.n	800f1e4 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800f200:	7dfb      	ldrb	r3, [r7, #23]
}
 800f202:	4618      	mov	r0, r3
 800f204:	3718      	adds	r7, #24
 800f206:	46bd      	mov	sp, r7
 800f208:	bd80      	pop	{r7, pc}
 800f20a:	bf00      	nop
 800f20c:	000186a0 	.word	0x000186a0
 800f210:	05f5e100 	.word	0x05f5e100

0800f214 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b086      	sub	sp, #24
 800f218:	af00      	add	r7, sp, #0
 800f21a:	60b9      	str	r1, [r7, #8]
 800f21c:	607a      	str	r2, [r7, #4]
 800f21e:	603b      	str	r3, [r7, #0]
 800f220:	4603      	mov	r3, r0
 800f222:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f224:	2301      	movs	r3, #1
 800f226:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800f228:	4b0f      	ldr	r3, [pc, #60]	; (800f268 <SD_write+0x54>)
 800f22a:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 800f22c:	4b0f      	ldr	r3, [pc, #60]	; (800f26c <SD_write+0x58>)
 800f22e:	683a      	ldr	r2, [r7, #0]
 800f230:	6879      	ldr	r1, [r7, #4]
 800f232:	68b8      	ldr	r0, [r7, #8]
 800f234:	f7fb fc74 	bl	800ab20 <BSP_SD_WriteBlocks>
 800f238:	4603      	mov	r3, r0
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d10e      	bne.n	800f25c <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800f23e:	e006      	b.n	800f24e <SD_write+0x3a>
    {
      if (timeout-- == 0)
 800f240:	693b      	ldr	r3, [r7, #16]
 800f242:	1e5a      	subs	r2, r3, #1
 800f244:	613a      	str	r2, [r7, #16]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d101      	bne.n	800f24e <SD_write+0x3a>
      {
        return RES_ERROR;
 800f24a:	2301      	movs	r3, #1
 800f24c:	e007      	b.n	800f25e <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800f24e:	f7fb fc85 	bl	800ab5c <BSP_SD_GetCardState>
 800f252:	4603      	mov	r3, r0
 800f254:	2b00      	cmp	r3, #0
 800f256:	d1f3      	bne.n	800f240 <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 800f258:	2300      	movs	r3, #0
 800f25a:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800f25c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f25e:	4618      	mov	r0, r3
 800f260:	3718      	adds	r7, #24
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}
 800f266:	bf00      	nop
 800f268:	000186a0 	.word	0x000186a0
 800f26c:	05f5e100 	.word	0x05f5e100

0800f270 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b08c      	sub	sp, #48	; 0x30
 800f274:	af00      	add	r7, sp, #0
 800f276:	4603      	mov	r3, r0
 800f278:	603a      	str	r2, [r7, #0]
 800f27a:	71fb      	strb	r3, [r7, #7]
 800f27c:	460b      	mov	r3, r1
 800f27e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f280:	2301      	movs	r3, #1
 800f282:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f286:	4b24      	ldr	r3, [pc, #144]	; (800f318 <SD_ioctl+0xa8>)
 800f288:	781b      	ldrb	r3, [r3, #0]
 800f28a:	b2db      	uxtb	r3, r3
 800f28c:	f003 0301 	and.w	r3, r3, #1
 800f290:	2b00      	cmp	r3, #0
 800f292:	d001      	beq.n	800f298 <SD_ioctl+0x28>
 800f294:	2303      	movs	r3, #3
 800f296:	e03b      	b.n	800f310 <SD_ioctl+0xa0>
  
  switch (cmd)
 800f298:	79bb      	ldrb	r3, [r7, #6]
 800f29a:	2b03      	cmp	r3, #3
 800f29c:	d833      	bhi.n	800f306 <SD_ioctl+0x96>
 800f29e:	a201      	add	r2, pc, #4	; (adr r2, 800f2a4 <SD_ioctl+0x34>)
 800f2a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2a4:	0800f2b5 	.word	0x0800f2b5
 800f2a8:	0800f2bd 	.word	0x0800f2bd
 800f2ac:	0800f2d5 	.word	0x0800f2d5
 800f2b0:	0800f2ef 	.word	0x0800f2ef
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f2ba:	e027      	b.n	800f30c <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f2bc:	f107 030c 	add.w	r3, r7, #12
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f7fb fc5b 	bl	800ab7c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f2c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2c8:	683b      	ldr	r3, [r7, #0]
 800f2ca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f2d2:	e01b      	b.n	800f30c <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f2d4:	f107 030c 	add.w	r3, r7, #12
 800f2d8:	4618      	mov	r0, r3
 800f2da:	f7fb fc4f 	bl	800ab7c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2e0:	b29a      	uxth	r2, r3
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f2ec:	e00e      	b.n	800f30c <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f2ee:	f107 030c 	add.w	r3, r7, #12
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f7fb fc42 	bl	800ab7c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 800f2f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f2fe:	2300      	movs	r3, #0
 800f300:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f304:	e002      	b.n	800f30c <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 800f306:	2304      	movs	r3, #4
 800f308:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 800f30c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f310:	4618      	mov	r0, r3
 800f312:	3730      	adds	r7, #48	; 0x30
 800f314:	46bd      	mov	sp, r7
 800f316:	bd80      	pop	{r7, pc}
 800f318:	2000011b 	.word	0x2000011b

0800f31c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f320:	2200      	movs	r2, #0
 800f322:	4912      	ldr	r1, [pc, #72]	; (800f36c <MX_USB_DEVICE_Init+0x50>)
 800f324:	4812      	ldr	r0, [pc, #72]	; (800f370 <MX_USB_DEVICE_Init+0x54>)
 800f326:	f7fb ff32 	bl	800b18e <USBD_Init>
 800f32a:	4603      	mov	r3, r0
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d001      	beq.n	800f334 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f330:	f7f1 ffb0 	bl	8001294 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f334:	490f      	ldr	r1, [pc, #60]	; (800f374 <MX_USB_DEVICE_Init+0x58>)
 800f336:	480e      	ldr	r0, [pc, #56]	; (800f370 <MX_USB_DEVICE_Init+0x54>)
 800f338:	f7fb ff54 	bl	800b1e4 <USBD_RegisterClass>
 800f33c:	4603      	mov	r3, r0
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d001      	beq.n	800f346 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f342:	f7f1 ffa7 	bl	8001294 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f346:	490c      	ldr	r1, [pc, #48]	; (800f378 <MX_USB_DEVICE_Init+0x5c>)
 800f348:	4809      	ldr	r0, [pc, #36]	; (800f370 <MX_USB_DEVICE_Init+0x54>)
 800f34a:	f7fb fe85 	bl	800b058 <USBD_CDC_RegisterInterface>
 800f34e:	4603      	mov	r3, r0
 800f350:	2b00      	cmp	r3, #0
 800f352:	d001      	beq.n	800f358 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f354:	f7f1 ff9e 	bl	8001294 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f358:	4805      	ldr	r0, [pc, #20]	; (800f370 <MX_USB_DEVICE_Init+0x54>)
 800f35a:	f7fb ff5c 	bl	800b216 <USBD_Start>
 800f35e:	4603      	mov	r3, r0
 800f360:	2b00      	cmp	r3, #0
 800f362:	d001      	beq.n	800f368 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f364:	f7f1 ff96 	bl	8001294 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f368:	bf00      	nop
 800f36a:	bd80      	pop	{r7, pc}
 800f36c:	2000012c 	.word	0x2000012c
 800f370:	20000ba4 	.word	0x20000ba4
 800f374:	20000018 	.word	0x20000018
 800f378:	2000011c 	.word	0x2000011c

0800f37c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f380:	2200      	movs	r2, #0
 800f382:	4905      	ldr	r1, [pc, #20]	; (800f398 <CDC_Init_FS+0x1c>)
 800f384:	4805      	ldr	r0, [pc, #20]	; (800f39c <CDC_Init_FS+0x20>)
 800f386:	f7fb fe7d 	bl	800b084 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f38a:	4905      	ldr	r1, [pc, #20]	; (800f3a0 <CDC_Init_FS+0x24>)
 800f38c:	4803      	ldr	r0, [pc, #12]	; (800f39c <CDC_Init_FS+0x20>)
 800f38e:	f7fb fe92 	bl	800b0b6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f392:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f394:	4618      	mov	r0, r3
 800f396:	bd80      	pop	{r7, pc}
 800f398:	20001250 	.word	0x20001250
 800f39c:	20000ba4 	.word	0x20000ba4
 800f3a0:	20000e68 	.word	0x20000e68

0800f3a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f3a4:	b480      	push	{r7}
 800f3a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f3a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bc80      	pop	{r7}
 800f3b0:	4770      	bx	lr
	...

0800f3b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f3b4:	b480      	push	{r7}
 800f3b6:	b083      	sub	sp, #12
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	4603      	mov	r3, r0
 800f3bc:	6039      	str	r1, [r7, #0]
 800f3be:	71fb      	strb	r3, [r7, #7]
 800f3c0:	4613      	mov	r3, r2
 800f3c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f3c4:	79fb      	ldrb	r3, [r7, #7]
 800f3c6:	2b23      	cmp	r3, #35	; 0x23
 800f3c8:	d84a      	bhi.n	800f460 <CDC_Control_FS+0xac>
 800f3ca:	a201      	add	r2, pc, #4	; (adr r2, 800f3d0 <CDC_Control_FS+0x1c>)
 800f3cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3d0:	0800f461 	.word	0x0800f461
 800f3d4:	0800f461 	.word	0x0800f461
 800f3d8:	0800f461 	.word	0x0800f461
 800f3dc:	0800f461 	.word	0x0800f461
 800f3e0:	0800f461 	.word	0x0800f461
 800f3e4:	0800f461 	.word	0x0800f461
 800f3e8:	0800f461 	.word	0x0800f461
 800f3ec:	0800f461 	.word	0x0800f461
 800f3f0:	0800f461 	.word	0x0800f461
 800f3f4:	0800f461 	.word	0x0800f461
 800f3f8:	0800f461 	.word	0x0800f461
 800f3fc:	0800f461 	.word	0x0800f461
 800f400:	0800f461 	.word	0x0800f461
 800f404:	0800f461 	.word	0x0800f461
 800f408:	0800f461 	.word	0x0800f461
 800f40c:	0800f461 	.word	0x0800f461
 800f410:	0800f461 	.word	0x0800f461
 800f414:	0800f461 	.word	0x0800f461
 800f418:	0800f461 	.word	0x0800f461
 800f41c:	0800f461 	.word	0x0800f461
 800f420:	0800f461 	.word	0x0800f461
 800f424:	0800f461 	.word	0x0800f461
 800f428:	0800f461 	.word	0x0800f461
 800f42c:	0800f461 	.word	0x0800f461
 800f430:	0800f461 	.word	0x0800f461
 800f434:	0800f461 	.word	0x0800f461
 800f438:	0800f461 	.word	0x0800f461
 800f43c:	0800f461 	.word	0x0800f461
 800f440:	0800f461 	.word	0x0800f461
 800f444:	0800f461 	.word	0x0800f461
 800f448:	0800f461 	.word	0x0800f461
 800f44c:	0800f461 	.word	0x0800f461
 800f450:	0800f461 	.word	0x0800f461
 800f454:	0800f461 	.word	0x0800f461
 800f458:	0800f461 	.word	0x0800f461
 800f45c:	0800f461 	.word	0x0800f461
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f460:	bf00      	nop
  }

  return (USBD_OK);
 800f462:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f464:	4618      	mov	r0, r3
 800f466:	370c      	adds	r7, #12
 800f468:	46bd      	mov	sp, r7
 800f46a:	bc80      	pop	{r7}
 800f46c:	4770      	bx	lr
 800f46e:	bf00      	nop

0800f470 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b084      	sub	sp, #16
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
 800f478:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Buf);
 800f47a:	6879      	ldr	r1, [r7, #4]
 800f47c:	4811      	ldr	r0, [pc, #68]	; (800f4c4 <CDC_Receive_FS+0x54>)
 800f47e:	f7fb fe1a 	bl	800b0b6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f482:	4810      	ldr	r0, [pc, #64]	; (800f4c4 <CDC_Receive_FS+0x54>)
 800f484:	f7fb fe59 	bl	800b13a <USBD_CDC_ReceivePacket>
  //dopisane z forbot
  // Zmienne zadeklarowane w pliku main.c
  extern uint8_t ReceivedData[40]; // Tablica przechowujaca odebrane dane
  extern uint8_t ReceivedDataFlag; // Flaga informujaca o odebraniu danych
  // Wyczyszczenie tablicy odebranych danych
  for(uint8_t i = 0; i < 40; ++i)
 800f488:	2300      	movs	r3, #0
 800f48a:	73fb      	strb	r3, [r7, #15]
 800f48c:	e006      	b.n	800f49c <CDC_Receive_FS+0x2c>
  {
	  ReceivedData[i] = 0;
 800f48e:	7bfb      	ldrb	r3, [r7, #15]
 800f490:	4a0d      	ldr	r2, [pc, #52]	; (800f4c8 <CDC_Receive_FS+0x58>)
 800f492:	2100      	movs	r1, #0
 800f494:	54d1      	strb	r1, [r2, r3]
  for(uint8_t i = 0; i < 40; ++i)
 800f496:	7bfb      	ldrb	r3, [r7, #15]
 800f498:	3301      	adds	r3, #1
 800f49a:	73fb      	strb	r3, [r7, #15]
 800f49c:	7bfb      	ldrb	r3, [r7, #15]
 800f49e:	2b27      	cmp	r3, #39	; 0x27
 800f4a0:	d9f5      	bls.n	800f48e <CDC_Receive_FS+0x1e>
  }
  strlcpy((char*)ReceivedData, (char*)Buf, (*Len) + 1); // Przekopiowanie danych do naszej tablicy
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	3301      	adds	r3, #1
 800f4a8:	461a      	mov	r2, r3
 800f4aa:	6879      	ldr	r1, [r7, #4]
 800f4ac:	4806      	ldr	r0, [pc, #24]	; (800f4c8 <CDC_Receive_FS+0x58>)
 800f4ae:	f000 fd39 	bl	800ff24 <strlcpy>
  ReceivedDataFlag = 1; // Ustawienie flagi odebrania danych
 800f4b2:	4b06      	ldr	r3, [pc, #24]	; (800f4cc <CDC_Receive_FS+0x5c>)
 800f4b4:	2201      	movs	r2, #1
 800f4b6:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 800f4b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	3710      	adds	r7, #16
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}
 800f4c2:	bf00      	nop
 800f4c4:	20000ba4 	.word	0x20000ba4
 800f4c8:	200005cc 	.word	0x200005cc
 800f4cc:	200001fc 	.word	0x200001fc

0800f4d0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b084      	sub	sp, #16
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
 800f4d8:	460b      	mov	r3, r1
 800f4da:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f4dc:	2300      	movs	r3, #0
 800f4de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f4e0:	4b0d      	ldr	r3, [pc, #52]	; (800f518 <CDC_Transmit_FS+0x48>)
 800f4e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4e6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d001      	beq.n	800f4f6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f4f2:	2301      	movs	r3, #1
 800f4f4:	e00b      	b.n	800f50e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f4f6:	887b      	ldrh	r3, [r7, #2]
 800f4f8:	461a      	mov	r2, r3
 800f4fa:	6879      	ldr	r1, [r7, #4]
 800f4fc:	4806      	ldr	r0, [pc, #24]	; (800f518 <CDC_Transmit_FS+0x48>)
 800f4fe:	f7fb fdc1 	bl	800b084 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f502:	4805      	ldr	r0, [pc, #20]	; (800f518 <CDC_Transmit_FS+0x48>)
 800f504:	f7fb fdea 	bl	800b0dc <USBD_CDC_TransmitPacket>
 800f508:	4603      	mov	r3, r0
 800f50a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f50c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f50e:	4618      	mov	r0, r3
 800f510:	3710      	adds	r7, #16
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}
 800f516:	bf00      	nop
 800f518:	20000ba4 	.word	0x20000ba4

0800f51c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f51c:	b480      	push	{r7}
 800f51e:	b083      	sub	sp, #12
 800f520:	af00      	add	r7, sp, #0
 800f522:	4603      	mov	r3, r0
 800f524:	6039      	str	r1, [r7, #0]
 800f526:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f528:	683b      	ldr	r3, [r7, #0]
 800f52a:	2212      	movs	r2, #18
 800f52c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f52e:	4b03      	ldr	r3, [pc, #12]	; (800f53c <USBD_FS_DeviceDescriptor+0x20>)
}
 800f530:	4618      	mov	r0, r3
 800f532:	370c      	adds	r7, #12
 800f534:	46bd      	mov	sp, r7
 800f536:	bc80      	pop	{r7}
 800f538:	4770      	bx	lr
 800f53a:	bf00      	nop
 800f53c:	20000148 	.word	0x20000148

0800f540 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f540:	b480      	push	{r7}
 800f542:	b083      	sub	sp, #12
 800f544:	af00      	add	r7, sp, #0
 800f546:	4603      	mov	r3, r0
 800f548:	6039      	str	r1, [r7, #0]
 800f54a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	2204      	movs	r2, #4
 800f550:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f552:	4b03      	ldr	r3, [pc, #12]	; (800f560 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f554:	4618      	mov	r0, r3
 800f556:	370c      	adds	r7, #12
 800f558:	46bd      	mov	sp, r7
 800f55a:	bc80      	pop	{r7}
 800f55c:	4770      	bx	lr
 800f55e:	bf00      	nop
 800f560:	2000015c 	.word	0x2000015c

0800f564 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b082      	sub	sp, #8
 800f568:	af00      	add	r7, sp, #0
 800f56a:	4603      	mov	r3, r0
 800f56c:	6039      	str	r1, [r7, #0]
 800f56e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f570:	79fb      	ldrb	r3, [r7, #7]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d105      	bne.n	800f582 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f576:	683a      	ldr	r2, [r7, #0]
 800f578:	4907      	ldr	r1, [pc, #28]	; (800f598 <USBD_FS_ProductStrDescriptor+0x34>)
 800f57a:	4808      	ldr	r0, [pc, #32]	; (800f59c <USBD_FS_ProductStrDescriptor+0x38>)
 800f57c:	f7fc fdb7 	bl	800c0ee <USBD_GetString>
 800f580:	e004      	b.n	800f58c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f582:	683a      	ldr	r2, [r7, #0]
 800f584:	4904      	ldr	r1, [pc, #16]	; (800f598 <USBD_FS_ProductStrDescriptor+0x34>)
 800f586:	4805      	ldr	r0, [pc, #20]	; (800f59c <USBD_FS_ProductStrDescriptor+0x38>)
 800f588:	f7fc fdb1 	bl	800c0ee <USBD_GetString>
  }
  return USBD_StrDesc;
 800f58c:	4b02      	ldr	r3, [pc, #8]	; (800f598 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f58e:	4618      	mov	r0, r3
 800f590:	3708      	adds	r7, #8
 800f592:	46bd      	mov	sp, r7
 800f594:	bd80      	pop	{r7, pc}
 800f596:	bf00      	nop
 800f598:	20001638 	.word	0x20001638
 800f59c:	08010978 	.word	0x08010978

0800f5a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b082      	sub	sp, #8
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	6039      	str	r1, [r7, #0]
 800f5aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f5ac:	683a      	ldr	r2, [r7, #0]
 800f5ae:	4904      	ldr	r1, [pc, #16]	; (800f5c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f5b0:	4804      	ldr	r0, [pc, #16]	; (800f5c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f5b2:	f7fc fd9c 	bl	800c0ee <USBD_GetString>
  return USBD_StrDesc;
 800f5b6:	4b02      	ldr	r3, [pc, #8]	; (800f5c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	3708      	adds	r7, #8
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bd80      	pop	{r7, pc}
 800f5c0:	20001638 	.word	0x20001638
 800f5c4:	08010990 	.word	0x08010990

0800f5c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b082      	sub	sp, #8
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	6039      	str	r1, [r7, #0]
 800f5d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	221a      	movs	r2, #26
 800f5d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f5da:	f000 f843 	bl	800f664 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f5de:	4b02      	ldr	r3, [pc, #8]	; (800f5e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	3708      	adds	r7, #8
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}
 800f5e8:	20000160 	.word	0x20000160

0800f5ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b082      	sub	sp, #8
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	6039      	str	r1, [r7, #0]
 800f5f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f5f8:	79fb      	ldrb	r3, [r7, #7]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d105      	bne.n	800f60a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f5fe:	683a      	ldr	r2, [r7, #0]
 800f600:	4907      	ldr	r1, [pc, #28]	; (800f620 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f602:	4808      	ldr	r0, [pc, #32]	; (800f624 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f604:	f7fc fd73 	bl	800c0ee <USBD_GetString>
 800f608:	e004      	b.n	800f614 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f60a:	683a      	ldr	r2, [r7, #0]
 800f60c:	4904      	ldr	r1, [pc, #16]	; (800f620 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f60e:	4805      	ldr	r0, [pc, #20]	; (800f624 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f610:	f7fc fd6d 	bl	800c0ee <USBD_GetString>
  }
  return USBD_StrDesc;
 800f614:	4b02      	ldr	r3, [pc, #8]	; (800f620 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f616:	4618      	mov	r0, r3
 800f618:	3708      	adds	r7, #8
 800f61a:	46bd      	mov	sp, r7
 800f61c:	bd80      	pop	{r7, pc}
 800f61e:	bf00      	nop
 800f620:	20001638 	.word	0x20001638
 800f624:	080109a4 	.word	0x080109a4

0800f628 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b082      	sub	sp, #8
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	4603      	mov	r3, r0
 800f630:	6039      	str	r1, [r7, #0]
 800f632:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f634:	79fb      	ldrb	r3, [r7, #7]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d105      	bne.n	800f646 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f63a:	683a      	ldr	r2, [r7, #0]
 800f63c:	4907      	ldr	r1, [pc, #28]	; (800f65c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f63e:	4808      	ldr	r0, [pc, #32]	; (800f660 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f640:	f7fc fd55 	bl	800c0ee <USBD_GetString>
 800f644:	e004      	b.n	800f650 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f646:	683a      	ldr	r2, [r7, #0]
 800f648:	4904      	ldr	r1, [pc, #16]	; (800f65c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f64a:	4805      	ldr	r0, [pc, #20]	; (800f660 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f64c:	f7fc fd4f 	bl	800c0ee <USBD_GetString>
  }
  return USBD_StrDesc;
 800f650:	4b02      	ldr	r3, [pc, #8]	; (800f65c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f652:	4618      	mov	r0, r3
 800f654:	3708      	adds	r7, #8
 800f656:	46bd      	mov	sp, r7
 800f658:	bd80      	pop	{r7, pc}
 800f65a:	bf00      	nop
 800f65c:	20001638 	.word	0x20001638
 800f660:	080109b0 	.word	0x080109b0

0800f664 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b084      	sub	sp, #16
 800f668:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f66a:	4b0f      	ldr	r3, [pc, #60]	; (800f6a8 <Get_SerialNum+0x44>)
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f670:	4b0e      	ldr	r3, [pc, #56]	; (800f6ac <Get_SerialNum+0x48>)
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f676:	4b0e      	ldr	r3, [pc, #56]	; (800f6b0 <Get_SerialNum+0x4c>)
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f67c:	68fa      	ldr	r2, [r7, #12]
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	4413      	add	r3, r2
 800f682:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d009      	beq.n	800f69e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f68a:	2208      	movs	r2, #8
 800f68c:	4909      	ldr	r1, [pc, #36]	; (800f6b4 <Get_SerialNum+0x50>)
 800f68e:	68f8      	ldr	r0, [r7, #12]
 800f690:	f000 f814 	bl	800f6bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f694:	2204      	movs	r2, #4
 800f696:	4908      	ldr	r1, [pc, #32]	; (800f6b8 <Get_SerialNum+0x54>)
 800f698:	68b8      	ldr	r0, [r7, #8]
 800f69a:	f000 f80f 	bl	800f6bc <IntToUnicode>
  }
}
 800f69e:	bf00      	nop
 800f6a0:	3710      	adds	r7, #16
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	bd80      	pop	{r7, pc}
 800f6a6:	bf00      	nop
 800f6a8:	1ffff7e8 	.word	0x1ffff7e8
 800f6ac:	1ffff7ec 	.word	0x1ffff7ec
 800f6b0:	1ffff7f0 	.word	0x1ffff7f0
 800f6b4:	20000162 	.word	0x20000162
 800f6b8:	20000172 	.word	0x20000172

0800f6bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f6bc:	b480      	push	{r7}
 800f6be:	b087      	sub	sp, #28
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	60f8      	str	r0, [r7, #12]
 800f6c4:	60b9      	str	r1, [r7, #8]
 800f6c6:	4613      	mov	r3, r2
 800f6c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	75fb      	strb	r3, [r7, #23]
 800f6d2:	e027      	b.n	800f724 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	0f1b      	lsrs	r3, r3, #28
 800f6d8:	2b09      	cmp	r3, #9
 800f6da:	d80b      	bhi.n	800f6f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	0f1b      	lsrs	r3, r3, #28
 800f6e0:	b2da      	uxtb	r2, r3
 800f6e2:	7dfb      	ldrb	r3, [r7, #23]
 800f6e4:	005b      	lsls	r3, r3, #1
 800f6e6:	4619      	mov	r1, r3
 800f6e8:	68bb      	ldr	r3, [r7, #8]
 800f6ea:	440b      	add	r3, r1
 800f6ec:	3230      	adds	r2, #48	; 0x30
 800f6ee:	b2d2      	uxtb	r2, r2
 800f6f0:	701a      	strb	r2, [r3, #0]
 800f6f2:	e00a      	b.n	800f70a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	0f1b      	lsrs	r3, r3, #28
 800f6f8:	b2da      	uxtb	r2, r3
 800f6fa:	7dfb      	ldrb	r3, [r7, #23]
 800f6fc:	005b      	lsls	r3, r3, #1
 800f6fe:	4619      	mov	r1, r3
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	440b      	add	r3, r1
 800f704:	3237      	adds	r2, #55	; 0x37
 800f706:	b2d2      	uxtb	r2, r2
 800f708:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	011b      	lsls	r3, r3, #4
 800f70e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f710:	7dfb      	ldrb	r3, [r7, #23]
 800f712:	005b      	lsls	r3, r3, #1
 800f714:	3301      	adds	r3, #1
 800f716:	68ba      	ldr	r2, [r7, #8]
 800f718:	4413      	add	r3, r2
 800f71a:	2200      	movs	r2, #0
 800f71c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f71e:	7dfb      	ldrb	r3, [r7, #23]
 800f720:	3301      	adds	r3, #1
 800f722:	75fb      	strb	r3, [r7, #23]
 800f724:	7dfa      	ldrb	r2, [r7, #23]
 800f726:	79fb      	ldrb	r3, [r7, #7]
 800f728:	429a      	cmp	r2, r3
 800f72a:	d3d3      	bcc.n	800f6d4 <IntToUnicode+0x18>
  }
}
 800f72c:	bf00      	nop
 800f72e:	371c      	adds	r7, #28
 800f730:	46bd      	mov	sp, r7
 800f732:	bc80      	pop	{r7}
 800f734:	4770      	bx	lr
	...

0800f738 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b084      	sub	sp, #16
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	4a0d      	ldr	r2, [pc, #52]	; (800f77c <HAL_PCD_MspInit+0x44>)
 800f746:	4293      	cmp	r3, r2
 800f748:	d113      	bne.n	800f772 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800f74a:	4b0d      	ldr	r3, [pc, #52]	; (800f780 <HAL_PCD_MspInit+0x48>)
 800f74c:	69db      	ldr	r3, [r3, #28]
 800f74e:	4a0c      	ldr	r2, [pc, #48]	; (800f780 <HAL_PCD_MspInit+0x48>)
 800f750:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f754:	61d3      	str	r3, [r2, #28]
 800f756:	4b0a      	ldr	r3, [pc, #40]	; (800f780 <HAL_PCD_MspInit+0x48>)
 800f758:	69db      	ldr	r3, [r3, #28]
 800f75a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f75e:	60fb      	str	r3, [r7, #12]
 800f760:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800f762:	2200      	movs	r2, #0
 800f764:	2100      	movs	r1, #0
 800f766:	2014      	movs	r0, #20
 800f768:	f7f3 fcdd 	bl	8003126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800f76c:	2014      	movs	r0, #20
 800f76e:	f7f3 fcf6 	bl	800315e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800f772:	bf00      	nop
 800f774:	3710      	adds	r7, #16
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}
 800f77a:	bf00      	nop
 800f77c:	40005c00 	.word	0x40005c00
 800f780:	40021000 	.word	0x40021000

0800f784 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b082      	sub	sp, #8
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800f798:	4619      	mov	r1, r3
 800f79a:	4610      	mov	r0, r2
 800f79c:	f7fb fd83 	bl	800b2a6 <USBD_LL_SetupStage>
}
 800f7a0:	bf00      	nop
 800f7a2:	3708      	adds	r7, #8
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	bd80      	pop	{r7, pc}

0800f7a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b082      	sub	sp, #8
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
 800f7b0:	460b      	mov	r3, r1
 800f7b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800f7ba:	78fa      	ldrb	r2, [r7, #3]
 800f7bc:	6879      	ldr	r1, [r7, #4]
 800f7be:	4613      	mov	r3, r2
 800f7c0:	009b      	lsls	r3, r3, #2
 800f7c2:	4413      	add	r3, r2
 800f7c4:	00db      	lsls	r3, r3, #3
 800f7c6:	440b      	add	r3, r1
 800f7c8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800f7cc:	681a      	ldr	r2, [r3, #0]
 800f7ce:	78fb      	ldrb	r3, [r7, #3]
 800f7d0:	4619      	mov	r1, r3
 800f7d2:	f7fb fdb3 	bl	800b33c <USBD_LL_DataOutStage>
}
 800f7d6:	bf00      	nop
 800f7d8:	3708      	adds	r7, #8
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}

0800f7de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7de:	b580      	push	{r7, lr}
 800f7e0:	b082      	sub	sp, #8
 800f7e2:	af00      	add	r7, sp, #0
 800f7e4:	6078      	str	r0, [r7, #4]
 800f7e6:	460b      	mov	r3, r1
 800f7e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800f7f0:	78fa      	ldrb	r2, [r7, #3]
 800f7f2:	6879      	ldr	r1, [r7, #4]
 800f7f4:	4613      	mov	r3, r2
 800f7f6:	009b      	lsls	r3, r3, #2
 800f7f8:	4413      	add	r3, r2
 800f7fa:	00db      	lsls	r3, r3, #3
 800f7fc:	440b      	add	r3, r1
 800f7fe:	333c      	adds	r3, #60	; 0x3c
 800f800:	681a      	ldr	r2, [r3, #0]
 800f802:	78fb      	ldrb	r3, [r7, #3]
 800f804:	4619      	mov	r1, r3
 800f806:	f7fb fe0a 	bl	800b41e <USBD_LL_DataInStage>
}
 800f80a:	bf00      	nop
 800f80c:	3708      	adds	r7, #8
 800f80e:	46bd      	mov	sp, r7
 800f810:	bd80      	pop	{r7, pc}

0800f812 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f812:	b580      	push	{r7, lr}
 800f814:	b082      	sub	sp, #8
 800f816:	af00      	add	r7, sp, #0
 800f818:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800f820:	4618      	mov	r0, r3
 800f822:	f7fb ff1a 	bl	800b65a <USBD_LL_SOF>
}
 800f826:	bf00      	nop
 800f828:	3708      	adds	r7, #8
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bd80      	pop	{r7, pc}

0800f82e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f82e:	b580      	push	{r7, lr}
 800f830:	b084      	sub	sp, #16
 800f832:	af00      	add	r7, sp, #0
 800f834:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f836:	2301      	movs	r3, #1
 800f838:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	689b      	ldr	r3, [r3, #8]
 800f83e:	2b02      	cmp	r3, #2
 800f840:	d001      	beq.n	800f846 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f842:	f7f1 fd27 	bl	8001294 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800f84c:	7bfa      	ldrb	r2, [r7, #15]
 800f84e:	4611      	mov	r1, r2
 800f850:	4618      	mov	r0, r3
 800f852:	f7fb feca 	bl	800b5ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800f85c:	4618      	mov	r0, r3
 800f85e:	f7fb fe83 	bl	800b568 <USBD_LL_Reset>
}
 800f862:	bf00      	nop
 800f864:	3710      	adds	r7, #16
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}
	...

0800f86c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b082      	sub	sp, #8
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800f87a:	4618      	mov	r0, r3
 800f87c:	f7fb fec4 	bl	800b608 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	699b      	ldr	r3, [r3, #24]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d005      	beq.n	800f894 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f888:	4b04      	ldr	r3, [pc, #16]	; (800f89c <HAL_PCD_SuspendCallback+0x30>)
 800f88a:	691b      	ldr	r3, [r3, #16]
 800f88c:	4a03      	ldr	r2, [pc, #12]	; (800f89c <HAL_PCD_SuspendCallback+0x30>)
 800f88e:	f043 0306 	orr.w	r3, r3, #6
 800f892:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f894:	bf00      	nop
 800f896:	3708      	adds	r7, #8
 800f898:	46bd      	mov	sp, r7
 800f89a:	bd80      	pop	{r7, pc}
 800f89c:	e000ed00 	.word	0xe000ed00

0800f8a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b082      	sub	sp, #8
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f7fb febe 	bl	800b630 <USBD_LL_Resume>
}
 800f8b4:	bf00      	nop
 800f8b6:	3708      	adds	r7, #8
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	bd80      	pop	{r7, pc}

0800f8bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b082      	sub	sp, #8
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800f8c4:	4a28      	ldr	r2, [pc, #160]	; (800f968 <USBD_LL_Init+0xac>)
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	4a26      	ldr	r2, [pc, #152]	; (800f968 <USBD_LL_Init+0xac>)
 800f8d0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800f8d4:	4b24      	ldr	r3, [pc, #144]	; (800f968 <USBD_LL_Init+0xac>)
 800f8d6:	4a25      	ldr	r2, [pc, #148]	; (800f96c <USBD_LL_Init+0xb0>)
 800f8d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800f8da:	4b23      	ldr	r3, [pc, #140]	; (800f968 <USBD_LL_Init+0xac>)
 800f8dc:	2208      	movs	r2, #8
 800f8de:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800f8e0:	4b21      	ldr	r3, [pc, #132]	; (800f968 <USBD_LL_Init+0xac>)
 800f8e2:	2202      	movs	r2, #2
 800f8e4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800f8e6:	4b20      	ldr	r3, [pc, #128]	; (800f968 <USBD_LL_Init+0xac>)
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800f8ec:	4b1e      	ldr	r3, [pc, #120]	; (800f968 <USBD_LL_Init+0xac>)
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800f8f2:	4b1d      	ldr	r3, [pc, #116]	; (800f968 <USBD_LL_Init+0xac>)
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800f8f8:	481b      	ldr	r0, [pc, #108]	; (800f968 <USBD_LL_Init+0xac>)
 800f8fa:	f7f3 fee1 	bl	80036c0 <HAL_PCD_Init>
 800f8fe:	4603      	mov	r3, r0
 800f900:	2b00      	cmp	r3, #0
 800f902:	d001      	beq.n	800f908 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800f904:	f7f1 fcc6 	bl	8001294 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800f90e:	2318      	movs	r3, #24
 800f910:	2200      	movs	r2, #0
 800f912:	2100      	movs	r1, #0
 800f914:	f7f5 fa15 	bl	8004d42 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800f91e:	2358      	movs	r3, #88	; 0x58
 800f920:	2200      	movs	r2, #0
 800f922:	2180      	movs	r1, #128	; 0x80
 800f924:	f7f5 fa0d 	bl	8004d42 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800f92e:	23c0      	movs	r3, #192	; 0xc0
 800f930:	2200      	movs	r2, #0
 800f932:	2181      	movs	r1, #129	; 0x81
 800f934:	f7f5 fa05 	bl	8004d42 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800f93e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800f942:	2200      	movs	r2, #0
 800f944:	2101      	movs	r1, #1
 800f946:	f7f5 f9fc 	bl	8004d42 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800f950:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f954:	2200      	movs	r2, #0
 800f956:	2182      	movs	r1, #130	; 0x82
 800f958:	f7f5 f9f3 	bl	8004d42 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800f95c:	2300      	movs	r3, #0
}
 800f95e:	4618      	mov	r0, r3
 800f960:	3708      	adds	r7, #8
 800f962:	46bd      	mov	sp, r7
 800f964:	bd80      	pop	{r7, pc}
 800f966:	bf00      	nop
 800f968:	20001838 	.word	0x20001838
 800f96c:	40005c00 	.word	0x40005c00

0800f970 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b084      	sub	sp, #16
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f978:	2300      	movs	r3, #0
 800f97a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f97c:	2300      	movs	r3, #0
 800f97e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f986:	4618      	mov	r0, r3
 800f988:	f7f3 ffa5 	bl	80038d6 <HAL_PCD_Start>
 800f98c:	4603      	mov	r3, r0
 800f98e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f990:	7bfb      	ldrb	r3, [r7, #15]
 800f992:	4618      	mov	r0, r3
 800f994:	f000 f94e 	bl	800fc34 <USBD_Get_USB_Status>
 800f998:	4603      	mov	r3, r0
 800f99a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f99c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f99e:	4618      	mov	r0, r3
 800f9a0:	3710      	adds	r7, #16
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}

0800f9a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f9a6:	b580      	push	{r7, lr}
 800f9a8:	b084      	sub	sp, #16
 800f9aa:	af00      	add	r7, sp, #0
 800f9ac:	6078      	str	r0, [r7, #4]
 800f9ae:	4608      	mov	r0, r1
 800f9b0:	4611      	mov	r1, r2
 800f9b2:	461a      	mov	r2, r3
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	70fb      	strb	r3, [r7, #3]
 800f9b8:	460b      	mov	r3, r1
 800f9ba:	70bb      	strb	r3, [r7, #2]
 800f9bc:	4613      	mov	r3, r2
 800f9be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800f9ce:	78bb      	ldrb	r3, [r7, #2]
 800f9d0:	883a      	ldrh	r2, [r7, #0]
 800f9d2:	78f9      	ldrb	r1, [r7, #3]
 800f9d4:	f7f4 f91f 	bl	8003c16 <HAL_PCD_EP_Open>
 800f9d8:	4603      	mov	r3, r0
 800f9da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f9dc:	7bfb      	ldrb	r3, [r7, #15]
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f000 f928 	bl	800fc34 <USBD_Get_USB_Status>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f9e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	3710      	adds	r7, #16
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	bd80      	pop	{r7, pc}

0800f9f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f9f2:	b580      	push	{r7, lr}
 800f9f4:	b084      	sub	sp, #16
 800f9f6:	af00      	add	r7, sp, #0
 800f9f8:	6078      	str	r0, [r7, #4]
 800f9fa:	460b      	mov	r3, r1
 800f9fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9fe:	2300      	movs	r3, #0
 800fa00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa02:	2300      	movs	r3, #0
 800fa04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fa0c:	78fa      	ldrb	r2, [r7, #3]
 800fa0e:	4611      	mov	r1, r2
 800fa10:	4618      	mov	r0, r3
 800fa12:	f7f4 f966 	bl	8003ce2 <HAL_PCD_EP_Close>
 800fa16:	4603      	mov	r3, r0
 800fa18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa1a:	7bfb      	ldrb	r3, [r7, #15]
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	f000 f909 	bl	800fc34 <USBD_Get_USB_Status>
 800fa22:	4603      	mov	r3, r0
 800fa24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa26:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa28:	4618      	mov	r0, r3
 800fa2a:	3710      	adds	r7, #16
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	bd80      	pop	{r7, pc}

0800fa30 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b084      	sub	sp, #16
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
 800fa38:	460b      	mov	r3, r1
 800fa3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa40:	2300      	movs	r3, #0
 800fa42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fa4a:	78fa      	ldrb	r2, [r7, #3]
 800fa4c:	4611      	mov	r1, r2
 800fa4e:	4618      	mov	r0, r3
 800fa50:	f7f4 fa26 	bl	8003ea0 <HAL_PCD_EP_SetStall>
 800fa54:	4603      	mov	r3, r0
 800fa56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa58:	7bfb      	ldrb	r3, [r7, #15]
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f000 f8ea 	bl	800fc34 <USBD_Get_USB_Status>
 800fa60:	4603      	mov	r3, r0
 800fa62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa64:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa66:	4618      	mov	r0, r3
 800fa68:	3710      	adds	r7, #16
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}

0800fa6e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa6e:	b580      	push	{r7, lr}
 800fa70:	b084      	sub	sp, #16
 800fa72:	af00      	add	r7, sp, #0
 800fa74:	6078      	str	r0, [r7, #4]
 800fa76:	460b      	mov	r3, r1
 800fa78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa7e:	2300      	movs	r3, #0
 800fa80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fa88:	78fa      	ldrb	r2, [r7, #3]
 800fa8a:	4611      	mov	r1, r2
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	f7f4 fa67 	bl	8003f60 <HAL_PCD_EP_ClrStall>
 800fa92:	4603      	mov	r3, r0
 800fa94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa96:	7bfb      	ldrb	r3, [r7, #15]
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f000 f8cb 	bl	800fc34 <USBD_Get_USB_Status>
 800fa9e:	4603      	mov	r3, r0
 800faa0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800faa2:	7bbb      	ldrb	r3, [r7, #14]
}
 800faa4:	4618      	mov	r0, r3
 800faa6:	3710      	adds	r7, #16
 800faa8:	46bd      	mov	sp, r7
 800faaa:	bd80      	pop	{r7, pc}

0800faac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800faac:	b480      	push	{r7}
 800faae:	b085      	sub	sp, #20
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
 800fab4:	460b      	mov	r3, r1
 800fab6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fabe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fac0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	da0c      	bge.n	800fae2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fac8:	78fb      	ldrb	r3, [r7, #3]
 800faca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800face:	68f9      	ldr	r1, [r7, #12]
 800fad0:	1c5a      	adds	r2, r3, #1
 800fad2:	4613      	mov	r3, r2
 800fad4:	009b      	lsls	r3, r3, #2
 800fad6:	4413      	add	r3, r2
 800fad8:	00db      	lsls	r3, r3, #3
 800fada:	440b      	add	r3, r1
 800fadc:	3302      	adds	r3, #2
 800fade:	781b      	ldrb	r3, [r3, #0]
 800fae0:	e00b      	b.n	800fafa <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fae2:	78fb      	ldrb	r3, [r7, #3]
 800fae4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fae8:	68f9      	ldr	r1, [r7, #12]
 800faea:	4613      	mov	r3, r2
 800faec:	009b      	lsls	r3, r3, #2
 800faee:	4413      	add	r3, r2
 800faf0:	00db      	lsls	r3, r3, #3
 800faf2:	440b      	add	r3, r1
 800faf4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800faf8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fafa:	4618      	mov	r0, r3
 800fafc:	3714      	adds	r7, #20
 800fafe:	46bd      	mov	sp, r7
 800fb00:	bc80      	pop	{r7}
 800fb02:	4770      	bx	lr

0800fb04 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b084      	sub	sp, #16
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
 800fb0c:	460b      	mov	r3, r1
 800fb0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb10:	2300      	movs	r3, #0
 800fb12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb14:	2300      	movs	r3, #0
 800fb16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fb1e:	78fa      	ldrb	r2, [r7, #3]
 800fb20:	4611      	mov	r1, r2
 800fb22:	4618      	mov	r0, r3
 800fb24:	f7f4 f852 	bl	8003bcc <HAL_PCD_SetAddress>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb2c:	7bfb      	ldrb	r3, [r7, #15]
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f000 f880 	bl	800fc34 <USBD_Get_USB_Status>
 800fb34:	4603      	mov	r3, r0
 800fb36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb38:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	3710      	adds	r7, #16
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	bd80      	pop	{r7, pc}

0800fb42 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800fb42:	b580      	push	{r7, lr}
 800fb44:	b086      	sub	sp, #24
 800fb46:	af00      	add	r7, sp, #0
 800fb48:	60f8      	str	r0, [r7, #12]
 800fb4a:	607a      	str	r2, [r7, #4]
 800fb4c:	461a      	mov	r2, r3
 800fb4e:	460b      	mov	r3, r1
 800fb50:	72fb      	strb	r3, [r7, #11]
 800fb52:	4613      	mov	r3, r2
 800fb54:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb56:	2300      	movs	r3, #0
 800fb58:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800fb64:	893b      	ldrh	r3, [r7, #8]
 800fb66:	7af9      	ldrb	r1, [r7, #11]
 800fb68:	687a      	ldr	r2, [r7, #4]
 800fb6a:	f7f4 f956 	bl	8003e1a <HAL_PCD_EP_Transmit>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb72:	7dfb      	ldrb	r3, [r7, #23]
 800fb74:	4618      	mov	r0, r3
 800fb76:	f000 f85d 	bl	800fc34 <USBD_Get_USB_Status>
 800fb7a:	4603      	mov	r3, r0
 800fb7c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fb7e:	7dbb      	ldrb	r3, [r7, #22]
}
 800fb80:	4618      	mov	r0, r3
 800fb82:	3718      	adds	r7, #24
 800fb84:	46bd      	mov	sp, r7
 800fb86:	bd80      	pop	{r7, pc}

0800fb88 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b086      	sub	sp, #24
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	60f8      	str	r0, [r7, #12]
 800fb90:	607a      	str	r2, [r7, #4]
 800fb92:	461a      	mov	r2, r3
 800fb94:	460b      	mov	r3, r1
 800fb96:	72fb      	strb	r3, [r7, #11]
 800fb98:	4613      	mov	r3, r2
 800fb9a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fba0:	2300      	movs	r3, #0
 800fba2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800fbaa:	893b      	ldrh	r3, [r7, #8]
 800fbac:	7af9      	ldrb	r1, [r7, #11]
 800fbae:	687a      	ldr	r2, [r7, #4]
 800fbb0:	f7f4 f8df 	bl	8003d72 <HAL_PCD_EP_Receive>
 800fbb4:	4603      	mov	r3, r0
 800fbb6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fbb8:	7dfb      	ldrb	r3, [r7, #23]
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f000 f83a 	bl	800fc34 <USBD_Get_USB_Status>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fbc4:	7dbb      	ldrb	r3, [r7, #22]
}
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	3718      	adds	r7, #24
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	bd80      	pop	{r7, pc}

0800fbce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fbce:	b580      	push	{r7, lr}
 800fbd0:	b082      	sub	sp, #8
 800fbd2:	af00      	add	r7, sp, #0
 800fbd4:	6078      	str	r0, [r7, #4]
 800fbd6:	460b      	mov	r3, r1
 800fbd8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fbe0:	78fa      	ldrb	r2, [r7, #3]
 800fbe2:	4611      	mov	r1, r2
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	f7f4 f901 	bl	8003dec <HAL_PCD_EP_GetRxCount>
 800fbea:	4603      	mov	r3, r0
}
 800fbec:	4618      	mov	r0, r3
 800fbee:	3708      	adds	r7, #8
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	bd80      	pop	{r7, pc}

0800fbf4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fbf4:	b480      	push	{r7}
 800fbf6:	b083      	sub	sp, #12
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fbfc:	4b02      	ldr	r3, [pc, #8]	; (800fc08 <USBD_static_malloc+0x14>)
}
 800fbfe:	4618      	mov	r0, r3
 800fc00:	370c      	adds	r7, #12
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bc80      	pop	{r7}
 800fc06:	4770      	bx	lr
 800fc08:	20000250 	.word	0x20000250

0800fc0c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fc0c:	b480      	push	{r7}
 800fc0e:	b083      	sub	sp, #12
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]

}
 800fc14:	bf00      	nop
 800fc16:	370c      	adds	r7, #12
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	bc80      	pop	{r7}
 800fc1c:	4770      	bx	lr

0800fc1e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc1e:	b480      	push	{r7}
 800fc20:	b083      	sub	sp, #12
 800fc22:	af00      	add	r7, sp, #0
 800fc24:	6078      	str	r0, [r7, #4]
 800fc26:	460b      	mov	r3, r1
 800fc28:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800fc2a:	bf00      	nop
 800fc2c:	370c      	adds	r7, #12
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bc80      	pop	{r7}
 800fc32:	4770      	bx	lr

0800fc34 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fc34:	b480      	push	{r7}
 800fc36:	b085      	sub	sp, #20
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc3e:	2300      	movs	r3, #0
 800fc40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fc42:	79fb      	ldrb	r3, [r7, #7]
 800fc44:	2b03      	cmp	r3, #3
 800fc46:	d817      	bhi.n	800fc78 <USBD_Get_USB_Status+0x44>
 800fc48:	a201      	add	r2, pc, #4	; (adr r2, 800fc50 <USBD_Get_USB_Status+0x1c>)
 800fc4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc4e:	bf00      	nop
 800fc50:	0800fc61 	.word	0x0800fc61
 800fc54:	0800fc67 	.word	0x0800fc67
 800fc58:	0800fc6d 	.word	0x0800fc6d
 800fc5c:	0800fc73 	.word	0x0800fc73
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fc60:	2300      	movs	r3, #0
 800fc62:	73fb      	strb	r3, [r7, #15]
    break;
 800fc64:	e00b      	b.n	800fc7e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fc66:	2302      	movs	r3, #2
 800fc68:	73fb      	strb	r3, [r7, #15]
    break;
 800fc6a:	e008      	b.n	800fc7e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fc6c:	2301      	movs	r3, #1
 800fc6e:	73fb      	strb	r3, [r7, #15]
    break;
 800fc70:	e005      	b.n	800fc7e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fc72:	2302      	movs	r3, #2
 800fc74:	73fb      	strb	r3, [r7, #15]
    break;
 800fc76:	e002      	b.n	800fc7e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fc78:	2302      	movs	r3, #2
 800fc7a:	73fb      	strb	r3, [r7, #15]
    break;
 800fc7c:	bf00      	nop
  }
  return usb_status;
 800fc7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc80:	4618      	mov	r0, r3
 800fc82:	3714      	adds	r7, #20
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bc80      	pop	{r7}
 800fc88:	4770      	bx	lr
 800fc8a:	bf00      	nop

0800fc8c <__errno>:
 800fc8c:	4b01      	ldr	r3, [pc, #4]	; (800fc94 <__errno+0x8>)
 800fc8e:	6818      	ldr	r0, [r3, #0]
 800fc90:	4770      	bx	lr
 800fc92:	bf00      	nop
 800fc94:	2000017c 	.word	0x2000017c

0800fc98 <__libc_init_array>:
 800fc98:	b570      	push	{r4, r5, r6, lr}
 800fc9a:	2500      	movs	r5, #0
 800fc9c:	4e0c      	ldr	r6, [pc, #48]	; (800fcd0 <__libc_init_array+0x38>)
 800fc9e:	4c0d      	ldr	r4, [pc, #52]	; (800fcd4 <__libc_init_array+0x3c>)
 800fca0:	1ba4      	subs	r4, r4, r6
 800fca2:	10a4      	asrs	r4, r4, #2
 800fca4:	42a5      	cmp	r5, r4
 800fca6:	d109      	bne.n	800fcbc <__libc_init_array+0x24>
 800fca8:	f000 fca0 	bl	80105ec <_init>
 800fcac:	2500      	movs	r5, #0
 800fcae:	4e0a      	ldr	r6, [pc, #40]	; (800fcd8 <__libc_init_array+0x40>)
 800fcb0:	4c0a      	ldr	r4, [pc, #40]	; (800fcdc <__libc_init_array+0x44>)
 800fcb2:	1ba4      	subs	r4, r4, r6
 800fcb4:	10a4      	asrs	r4, r4, #2
 800fcb6:	42a5      	cmp	r5, r4
 800fcb8:	d105      	bne.n	800fcc6 <__libc_init_array+0x2e>
 800fcba:	bd70      	pop	{r4, r5, r6, pc}
 800fcbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fcc0:	4798      	blx	r3
 800fcc2:	3501      	adds	r5, #1
 800fcc4:	e7ee      	b.n	800fca4 <__libc_init_array+0xc>
 800fcc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fcca:	4798      	blx	r3
 800fccc:	3501      	adds	r5, #1
 800fcce:	e7f2      	b.n	800fcb6 <__libc_init_array+0x1e>
 800fcd0:	08010b5c 	.word	0x08010b5c
 800fcd4:	08010b5c 	.word	0x08010b5c
 800fcd8:	08010b5c 	.word	0x08010b5c
 800fcdc:	08010b60 	.word	0x08010b60

0800fce0 <malloc>:
 800fce0:	4b02      	ldr	r3, [pc, #8]	; (800fcec <malloc+0xc>)
 800fce2:	4601      	mov	r1, r0
 800fce4:	6818      	ldr	r0, [r3, #0]
 800fce6:	f000 b85f 	b.w	800fda8 <_malloc_r>
 800fcea:	bf00      	nop
 800fcec:	2000017c 	.word	0x2000017c

0800fcf0 <free>:
 800fcf0:	4b02      	ldr	r3, [pc, #8]	; (800fcfc <free+0xc>)
 800fcf2:	4601      	mov	r1, r0
 800fcf4:	6818      	ldr	r0, [r3, #0]
 800fcf6:	f000 b80b 	b.w	800fd10 <_free_r>
 800fcfa:	bf00      	nop
 800fcfc:	2000017c 	.word	0x2000017c

0800fd00 <memset>:
 800fd00:	4603      	mov	r3, r0
 800fd02:	4402      	add	r2, r0
 800fd04:	4293      	cmp	r3, r2
 800fd06:	d100      	bne.n	800fd0a <memset+0xa>
 800fd08:	4770      	bx	lr
 800fd0a:	f803 1b01 	strb.w	r1, [r3], #1
 800fd0e:	e7f9      	b.n	800fd04 <memset+0x4>

0800fd10 <_free_r>:
 800fd10:	b538      	push	{r3, r4, r5, lr}
 800fd12:	4605      	mov	r5, r0
 800fd14:	2900      	cmp	r1, #0
 800fd16:	d043      	beq.n	800fda0 <_free_r+0x90>
 800fd18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd1c:	1f0c      	subs	r4, r1, #4
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	bfb8      	it	lt
 800fd22:	18e4      	addlt	r4, r4, r3
 800fd24:	f000 f925 	bl	800ff72 <__malloc_lock>
 800fd28:	4a1e      	ldr	r2, [pc, #120]	; (800fda4 <_free_r+0x94>)
 800fd2a:	6813      	ldr	r3, [r2, #0]
 800fd2c:	4610      	mov	r0, r2
 800fd2e:	b933      	cbnz	r3, 800fd3e <_free_r+0x2e>
 800fd30:	6063      	str	r3, [r4, #4]
 800fd32:	6014      	str	r4, [r2, #0]
 800fd34:	4628      	mov	r0, r5
 800fd36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd3a:	f000 b91b 	b.w	800ff74 <__malloc_unlock>
 800fd3e:	42a3      	cmp	r3, r4
 800fd40:	d90b      	bls.n	800fd5a <_free_r+0x4a>
 800fd42:	6821      	ldr	r1, [r4, #0]
 800fd44:	1862      	adds	r2, r4, r1
 800fd46:	4293      	cmp	r3, r2
 800fd48:	bf01      	itttt	eq
 800fd4a:	681a      	ldreq	r2, [r3, #0]
 800fd4c:	685b      	ldreq	r3, [r3, #4]
 800fd4e:	1852      	addeq	r2, r2, r1
 800fd50:	6022      	streq	r2, [r4, #0]
 800fd52:	6063      	str	r3, [r4, #4]
 800fd54:	6004      	str	r4, [r0, #0]
 800fd56:	e7ed      	b.n	800fd34 <_free_r+0x24>
 800fd58:	4613      	mov	r3, r2
 800fd5a:	685a      	ldr	r2, [r3, #4]
 800fd5c:	b10a      	cbz	r2, 800fd62 <_free_r+0x52>
 800fd5e:	42a2      	cmp	r2, r4
 800fd60:	d9fa      	bls.n	800fd58 <_free_r+0x48>
 800fd62:	6819      	ldr	r1, [r3, #0]
 800fd64:	1858      	adds	r0, r3, r1
 800fd66:	42a0      	cmp	r0, r4
 800fd68:	d10b      	bne.n	800fd82 <_free_r+0x72>
 800fd6a:	6820      	ldr	r0, [r4, #0]
 800fd6c:	4401      	add	r1, r0
 800fd6e:	1858      	adds	r0, r3, r1
 800fd70:	4282      	cmp	r2, r0
 800fd72:	6019      	str	r1, [r3, #0]
 800fd74:	d1de      	bne.n	800fd34 <_free_r+0x24>
 800fd76:	6810      	ldr	r0, [r2, #0]
 800fd78:	6852      	ldr	r2, [r2, #4]
 800fd7a:	4401      	add	r1, r0
 800fd7c:	6019      	str	r1, [r3, #0]
 800fd7e:	605a      	str	r2, [r3, #4]
 800fd80:	e7d8      	b.n	800fd34 <_free_r+0x24>
 800fd82:	d902      	bls.n	800fd8a <_free_r+0x7a>
 800fd84:	230c      	movs	r3, #12
 800fd86:	602b      	str	r3, [r5, #0]
 800fd88:	e7d4      	b.n	800fd34 <_free_r+0x24>
 800fd8a:	6820      	ldr	r0, [r4, #0]
 800fd8c:	1821      	adds	r1, r4, r0
 800fd8e:	428a      	cmp	r2, r1
 800fd90:	bf01      	itttt	eq
 800fd92:	6811      	ldreq	r1, [r2, #0]
 800fd94:	6852      	ldreq	r2, [r2, #4]
 800fd96:	1809      	addeq	r1, r1, r0
 800fd98:	6021      	streq	r1, [r4, #0]
 800fd9a:	6062      	str	r2, [r4, #4]
 800fd9c:	605c      	str	r4, [r3, #4]
 800fd9e:	e7c9      	b.n	800fd34 <_free_r+0x24>
 800fda0:	bd38      	pop	{r3, r4, r5, pc}
 800fda2:	bf00      	nop
 800fda4:	20000470 	.word	0x20000470

0800fda8 <_malloc_r>:
 800fda8:	b570      	push	{r4, r5, r6, lr}
 800fdaa:	1ccd      	adds	r5, r1, #3
 800fdac:	f025 0503 	bic.w	r5, r5, #3
 800fdb0:	3508      	adds	r5, #8
 800fdb2:	2d0c      	cmp	r5, #12
 800fdb4:	bf38      	it	cc
 800fdb6:	250c      	movcc	r5, #12
 800fdb8:	2d00      	cmp	r5, #0
 800fdba:	4606      	mov	r6, r0
 800fdbc:	db01      	blt.n	800fdc2 <_malloc_r+0x1a>
 800fdbe:	42a9      	cmp	r1, r5
 800fdc0:	d903      	bls.n	800fdca <_malloc_r+0x22>
 800fdc2:	230c      	movs	r3, #12
 800fdc4:	6033      	str	r3, [r6, #0]
 800fdc6:	2000      	movs	r0, #0
 800fdc8:	bd70      	pop	{r4, r5, r6, pc}
 800fdca:	f000 f8d2 	bl	800ff72 <__malloc_lock>
 800fdce:	4a21      	ldr	r2, [pc, #132]	; (800fe54 <_malloc_r+0xac>)
 800fdd0:	6814      	ldr	r4, [r2, #0]
 800fdd2:	4621      	mov	r1, r4
 800fdd4:	b991      	cbnz	r1, 800fdfc <_malloc_r+0x54>
 800fdd6:	4c20      	ldr	r4, [pc, #128]	; (800fe58 <_malloc_r+0xb0>)
 800fdd8:	6823      	ldr	r3, [r4, #0]
 800fdda:	b91b      	cbnz	r3, 800fde4 <_malloc_r+0x3c>
 800fddc:	4630      	mov	r0, r6
 800fdde:	f000 f83d 	bl	800fe5c <_sbrk_r>
 800fde2:	6020      	str	r0, [r4, #0]
 800fde4:	4629      	mov	r1, r5
 800fde6:	4630      	mov	r0, r6
 800fde8:	f000 f838 	bl	800fe5c <_sbrk_r>
 800fdec:	1c43      	adds	r3, r0, #1
 800fdee:	d124      	bne.n	800fe3a <_malloc_r+0x92>
 800fdf0:	230c      	movs	r3, #12
 800fdf2:	4630      	mov	r0, r6
 800fdf4:	6033      	str	r3, [r6, #0]
 800fdf6:	f000 f8bd 	bl	800ff74 <__malloc_unlock>
 800fdfa:	e7e4      	b.n	800fdc6 <_malloc_r+0x1e>
 800fdfc:	680b      	ldr	r3, [r1, #0]
 800fdfe:	1b5b      	subs	r3, r3, r5
 800fe00:	d418      	bmi.n	800fe34 <_malloc_r+0x8c>
 800fe02:	2b0b      	cmp	r3, #11
 800fe04:	d90f      	bls.n	800fe26 <_malloc_r+0x7e>
 800fe06:	600b      	str	r3, [r1, #0]
 800fe08:	18cc      	adds	r4, r1, r3
 800fe0a:	50cd      	str	r5, [r1, r3]
 800fe0c:	4630      	mov	r0, r6
 800fe0e:	f000 f8b1 	bl	800ff74 <__malloc_unlock>
 800fe12:	f104 000b 	add.w	r0, r4, #11
 800fe16:	1d23      	adds	r3, r4, #4
 800fe18:	f020 0007 	bic.w	r0, r0, #7
 800fe1c:	1ac3      	subs	r3, r0, r3
 800fe1e:	d0d3      	beq.n	800fdc8 <_malloc_r+0x20>
 800fe20:	425a      	negs	r2, r3
 800fe22:	50e2      	str	r2, [r4, r3]
 800fe24:	e7d0      	b.n	800fdc8 <_malloc_r+0x20>
 800fe26:	684b      	ldr	r3, [r1, #4]
 800fe28:	428c      	cmp	r4, r1
 800fe2a:	bf16      	itet	ne
 800fe2c:	6063      	strne	r3, [r4, #4]
 800fe2e:	6013      	streq	r3, [r2, #0]
 800fe30:	460c      	movne	r4, r1
 800fe32:	e7eb      	b.n	800fe0c <_malloc_r+0x64>
 800fe34:	460c      	mov	r4, r1
 800fe36:	6849      	ldr	r1, [r1, #4]
 800fe38:	e7cc      	b.n	800fdd4 <_malloc_r+0x2c>
 800fe3a:	1cc4      	adds	r4, r0, #3
 800fe3c:	f024 0403 	bic.w	r4, r4, #3
 800fe40:	42a0      	cmp	r0, r4
 800fe42:	d005      	beq.n	800fe50 <_malloc_r+0xa8>
 800fe44:	1a21      	subs	r1, r4, r0
 800fe46:	4630      	mov	r0, r6
 800fe48:	f000 f808 	bl	800fe5c <_sbrk_r>
 800fe4c:	3001      	adds	r0, #1
 800fe4e:	d0cf      	beq.n	800fdf0 <_malloc_r+0x48>
 800fe50:	6025      	str	r5, [r4, #0]
 800fe52:	e7db      	b.n	800fe0c <_malloc_r+0x64>
 800fe54:	20000470 	.word	0x20000470
 800fe58:	20000474 	.word	0x20000474

0800fe5c <_sbrk_r>:
 800fe5c:	b538      	push	{r3, r4, r5, lr}
 800fe5e:	2300      	movs	r3, #0
 800fe60:	4c05      	ldr	r4, [pc, #20]	; (800fe78 <_sbrk_r+0x1c>)
 800fe62:	4605      	mov	r5, r0
 800fe64:	4608      	mov	r0, r1
 800fe66:	6023      	str	r3, [r4, #0]
 800fe68:	f7f2 ffa0 	bl	8002dac <_sbrk>
 800fe6c:	1c43      	adds	r3, r0, #1
 800fe6e:	d102      	bne.n	800fe76 <_sbrk_r+0x1a>
 800fe70:	6823      	ldr	r3, [r4, #0]
 800fe72:	b103      	cbz	r3, 800fe76 <_sbrk_r+0x1a>
 800fe74:	602b      	str	r3, [r5, #0]
 800fe76:	bd38      	pop	{r3, r4, r5, pc}
 800fe78:	20001b24 	.word	0x20001b24

0800fe7c <sniprintf>:
 800fe7c:	b40c      	push	{r2, r3}
 800fe7e:	b530      	push	{r4, r5, lr}
 800fe80:	4b17      	ldr	r3, [pc, #92]	; (800fee0 <sniprintf+0x64>)
 800fe82:	1e0c      	subs	r4, r1, #0
 800fe84:	b09d      	sub	sp, #116	; 0x74
 800fe86:	681d      	ldr	r5, [r3, #0]
 800fe88:	da08      	bge.n	800fe9c <sniprintf+0x20>
 800fe8a:	238b      	movs	r3, #139	; 0x8b
 800fe8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fe90:	602b      	str	r3, [r5, #0]
 800fe92:	b01d      	add	sp, #116	; 0x74
 800fe94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fe98:	b002      	add	sp, #8
 800fe9a:	4770      	bx	lr
 800fe9c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800fea0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fea4:	bf0c      	ite	eq
 800fea6:	4623      	moveq	r3, r4
 800fea8:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800feac:	9304      	str	r3, [sp, #16]
 800feae:	9307      	str	r3, [sp, #28]
 800feb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800feb4:	9002      	str	r0, [sp, #8]
 800feb6:	9006      	str	r0, [sp, #24]
 800feb8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800febc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800febe:	ab21      	add	r3, sp, #132	; 0x84
 800fec0:	a902      	add	r1, sp, #8
 800fec2:	4628      	mov	r0, r5
 800fec4:	9301      	str	r3, [sp, #4]
 800fec6:	f000 f8b1 	bl	801002c <_svfiprintf_r>
 800feca:	1c43      	adds	r3, r0, #1
 800fecc:	bfbc      	itt	lt
 800fece:	238b      	movlt	r3, #139	; 0x8b
 800fed0:	602b      	strlt	r3, [r5, #0]
 800fed2:	2c00      	cmp	r4, #0
 800fed4:	d0dd      	beq.n	800fe92 <sniprintf+0x16>
 800fed6:	2200      	movs	r2, #0
 800fed8:	9b02      	ldr	r3, [sp, #8]
 800feda:	701a      	strb	r2, [r3, #0]
 800fedc:	e7d9      	b.n	800fe92 <sniprintf+0x16>
 800fede:	bf00      	nop
 800fee0:	2000017c 	.word	0x2000017c

0800fee4 <siprintf>:
 800fee4:	b40e      	push	{r1, r2, r3}
 800fee6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800feea:	b500      	push	{lr}
 800feec:	b09c      	sub	sp, #112	; 0x70
 800feee:	ab1d      	add	r3, sp, #116	; 0x74
 800fef0:	9002      	str	r0, [sp, #8]
 800fef2:	9006      	str	r0, [sp, #24]
 800fef4:	9107      	str	r1, [sp, #28]
 800fef6:	9104      	str	r1, [sp, #16]
 800fef8:	4808      	ldr	r0, [pc, #32]	; (800ff1c <siprintf+0x38>)
 800fefa:	4909      	ldr	r1, [pc, #36]	; (800ff20 <siprintf+0x3c>)
 800fefc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff00:	9105      	str	r1, [sp, #20]
 800ff02:	6800      	ldr	r0, [r0, #0]
 800ff04:	a902      	add	r1, sp, #8
 800ff06:	9301      	str	r3, [sp, #4]
 800ff08:	f000 f890 	bl	801002c <_svfiprintf_r>
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	9b02      	ldr	r3, [sp, #8]
 800ff10:	701a      	strb	r2, [r3, #0]
 800ff12:	b01c      	add	sp, #112	; 0x70
 800ff14:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff18:	b003      	add	sp, #12
 800ff1a:	4770      	bx	lr
 800ff1c:	2000017c 	.word	0x2000017c
 800ff20:	ffff0208 	.word	0xffff0208

0800ff24 <strlcpy>:
 800ff24:	b510      	push	{r4, lr}
 800ff26:	460b      	mov	r3, r1
 800ff28:	b162      	cbz	r2, 800ff44 <strlcpy+0x20>
 800ff2a:	3a01      	subs	r2, #1
 800ff2c:	d008      	beq.n	800ff40 <strlcpy+0x1c>
 800ff2e:	f813 4b01 	ldrb.w	r4, [r3], #1
 800ff32:	f800 4b01 	strb.w	r4, [r0], #1
 800ff36:	2c00      	cmp	r4, #0
 800ff38:	d1f7      	bne.n	800ff2a <strlcpy+0x6>
 800ff3a:	1a58      	subs	r0, r3, r1
 800ff3c:	3801      	subs	r0, #1
 800ff3e:	bd10      	pop	{r4, pc}
 800ff40:	2200      	movs	r2, #0
 800ff42:	7002      	strb	r2, [r0, #0]
 800ff44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff48:	2a00      	cmp	r2, #0
 800ff4a:	d1fb      	bne.n	800ff44 <strlcpy+0x20>
 800ff4c:	e7f5      	b.n	800ff3a <strlcpy+0x16>

0800ff4e <strncmp>:
 800ff4e:	b510      	push	{r4, lr}
 800ff50:	b16a      	cbz	r2, 800ff6e <strncmp+0x20>
 800ff52:	3901      	subs	r1, #1
 800ff54:	1884      	adds	r4, r0, r2
 800ff56:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ff5a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ff5e:	4293      	cmp	r3, r2
 800ff60:	d103      	bne.n	800ff6a <strncmp+0x1c>
 800ff62:	42a0      	cmp	r0, r4
 800ff64:	d001      	beq.n	800ff6a <strncmp+0x1c>
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d1f5      	bne.n	800ff56 <strncmp+0x8>
 800ff6a:	1a98      	subs	r0, r3, r2
 800ff6c:	bd10      	pop	{r4, pc}
 800ff6e:	4610      	mov	r0, r2
 800ff70:	e7fc      	b.n	800ff6c <strncmp+0x1e>

0800ff72 <__malloc_lock>:
 800ff72:	4770      	bx	lr

0800ff74 <__malloc_unlock>:
 800ff74:	4770      	bx	lr

0800ff76 <__ssputs_r>:
 800ff76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff7a:	688e      	ldr	r6, [r1, #8]
 800ff7c:	4682      	mov	sl, r0
 800ff7e:	429e      	cmp	r6, r3
 800ff80:	460c      	mov	r4, r1
 800ff82:	4690      	mov	r8, r2
 800ff84:	4699      	mov	r9, r3
 800ff86:	d837      	bhi.n	800fff8 <__ssputs_r+0x82>
 800ff88:	898a      	ldrh	r2, [r1, #12]
 800ff8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ff8e:	d031      	beq.n	800fff4 <__ssputs_r+0x7e>
 800ff90:	2302      	movs	r3, #2
 800ff92:	6825      	ldr	r5, [r4, #0]
 800ff94:	6909      	ldr	r1, [r1, #16]
 800ff96:	1a6f      	subs	r7, r5, r1
 800ff98:	6965      	ldr	r5, [r4, #20]
 800ff9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ff9e:	fb95 f5f3 	sdiv	r5, r5, r3
 800ffa2:	f109 0301 	add.w	r3, r9, #1
 800ffa6:	443b      	add	r3, r7
 800ffa8:	429d      	cmp	r5, r3
 800ffaa:	bf38      	it	cc
 800ffac:	461d      	movcc	r5, r3
 800ffae:	0553      	lsls	r3, r2, #21
 800ffb0:	d530      	bpl.n	8010014 <__ssputs_r+0x9e>
 800ffb2:	4629      	mov	r1, r5
 800ffb4:	f7ff fef8 	bl	800fda8 <_malloc_r>
 800ffb8:	4606      	mov	r6, r0
 800ffba:	b950      	cbnz	r0, 800ffd2 <__ssputs_r+0x5c>
 800ffbc:	230c      	movs	r3, #12
 800ffbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ffc2:	f8ca 3000 	str.w	r3, [sl]
 800ffc6:	89a3      	ldrh	r3, [r4, #12]
 800ffc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ffcc:	81a3      	strh	r3, [r4, #12]
 800ffce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffd2:	463a      	mov	r2, r7
 800ffd4:	6921      	ldr	r1, [r4, #16]
 800ffd6:	f000 fab7 	bl	8010548 <memcpy>
 800ffda:	89a3      	ldrh	r3, [r4, #12]
 800ffdc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ffe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ffe4:	81a3      	strh	r3, [r4, #12]
 800ffe6:	6126      	str	r6, [r4, #16]
 800ffe8:	443e      	add	r6, r7
 800ffea:	6026      	str	r6, [r4, #0]
 800ffec:	464e      	mov	r6, r9
 800ffee:	6165      	str	r5, [r4, #20]
 800fff0:	1bed      	subs	r5, r5, r7
 800fff2:	60a5      	str	r5, [r4, #8]
 800fff4:	454e      	cmp	r6, r9
 800fff6:	d900      	bls.n	800fffa <__ssputs_r+0x84>
 800fff8:	464e      	mov	r6, r9
 800fffa:	4632      	mov	r2, r6
 800fffc:	4641      	mov	r1, r8
 800fffe:	6820      	ldr	r0, [r4, #0]
 8010000:	f000 faad 	bl	801055e <memmove>
 8010004:	68a3      	ldr	r3, [r4, #8]
 8010006:	2000      	movs	r0, #0
 8010008:	1b9b      	subs	r3, r3, r6
 801000a:	60a3      	str	r3, [r4, #8]
 801000c:	6823      	ldr	r3, [r4, #0]
 801000e:	441e      	add	r6, r3
 8010010:	6026      	str	r6, [r4, #0]
 8010012:	e7dc      	b.n	800ffce <__ssputs_r+0x58>
 8010014:	462a      	mov	r2, r5
 8010016:	f000 fabb 	bl	8010590 <_realloc_r>
 801001a:	4606      	mov	r6, r0
 801001c:	2800      	cmp	r0, #0
 801001e:	d1e2      	bne.n	800ffe6 <__ssputs_r+0x70>
 8010020:	6921      	ldr	r1, [r4, #16]
 8010022:	4650      	mov	r0, sl
 8010024:	f7ff fe74 	bl	800fd10 <_free_r>
 8010028:	e7c8      	b.n	800ffbc <__ssputs_r+0x46>
	...

0801002c <_svfiprintf_r>:
 801002c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010030:	461d      	mov	r5, r3
 8010032:	898b      	ldrh	r3, [r1, #12]
 8010034:	b09d      	sub	sp, #116	; 0x74
 8010036:	061f      	lsls	r7, r3, #24
 8010038:	4680      	mov	r8, r0
 801003a:	460c      	mov	r4, r1
 801003c:	4616      	mov	r6, r2
 801003e:	d50f      	bpl.n	8010060 <_svfiprintf_r+0x34>
 8010040:	690b      	ldr	r3, [r1, #16]
 8010042:	b96b      	cbnz	r3, 8010060 <_svfiprintf_r+0x34>
 8010044:	2140      	movs	r1, #64	; 0x40
 8010046:	f7ff feaf 	bl	800fda8 <_malloc_r>
 801004a:	6020      	str	r0, [r4, #0]
 801004c:	6120      	str	r0, [r4, #16]
 801004e:	b928      	cbnz	r0, 801005c <_svfiprintf_r+0x30>
 8010050:	230c      	movs	r3, #12
 8010052:	f8c8 3000 	str.w	r3, [r8]
 8010056:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801005a:	e0c8      	b.n	80101ee <_svfiprintf_r+0x1c2>
 801005c:	2340      	movs	r3, #64	; 0x40
 801005e:	6163      	str	r3, [r4, #20]
 8010060:	2300      	movs	r3, #0
 8010062:	9309      	str	r3, [sp, #36]	; 0x24
 8010064:	2320      	movs	r3, #32
 8010066:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801006a:	2330      	movs	r3, #48	; 0x30
 801006c:	f04f 0b01 	mov.w	fp, #1
 8010070:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010074:	9503      	str	r5, [sp, #12]
 8010076:	4637      	mov	r7, r6
 8010078:	463d      	mov	r5, r7
 801007a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801007e:	b10b      	cbz	r3, 8010084 <_svfiprintf_r+0x58>
 8010080:	2b25      	cmp	r3, #37	; 0x25
 8010082:	d13e      	bne.n	8010102 <_svfiprintf_r+0xd6>
 8010084:	ebb7 0a06 	subs.w	sl, r7, r6
 8010088:	d00b      	beq.n	80100a2 <_svfiprintf_r+0x76>
 801008a:	4653      	mov	r3, sl
 801008c:	4632      	mov	r2, r6
 801008e:	4621      	mov	r1, r4
 8010090:	4640      	mov	r0, r8
 8010092:	f7ff ff70 	bl	800ff76 <__ssputs_r>
 8010096:	3001      	adds	r0, #1
 8010098:	f000 80a4 	beq.w	80101e4 <_svfiprintf_r+0x1b8>
 801009c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801009e:	4453      	add	r3, sl
 80100a0:	9309      	str	r3, [sp, #36]	; 0x24
 80100a2:	783b      	ldrb	r3, [r7, #0]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	f000 809d 	beq.w	80101e4 <_svfiprintf_r+0x1b8>
 80100aa:	2300      	movs	r3, #0
 80100ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80100b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80100b4:	9304      	str	r3, [sp, #16]
 80100b6:	9307      	str	r3, [sp, #28]
 80100b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80100bc:	931a      	str	r3, [sp, #104]	; 0x68
 80100be:	462f      	mov	r7, r5
 80100c0:	2205      	movs	r2, #5
 80100c2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80100c6:	4850      	ldr	r0, [pc, #320]	; (8010208 <_svfiprintf_r+0x1dc>)
 80100c8:	f000 fa30 	bl	801052c <memchr>
 80100cc:	9b04      	ldr	r3, [sp, #16]
 80100ce:	b9d0      	cbnz	r0, 8010106 <_svfiprintf_r+0xda>
 80100d0:	06d9      	lsls	r1, r3, #27
 80100d2:	bf44      	itt	mi
 80100d4:	2220      	movmi	r2, #32
 80100d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80100da:	071a      	lsls	r2, r3, #28
 80100dc:	bf44      	itt	mi
 80100de:	222b      	movmi	r2, #43	; 0x2b
 80100e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80100e4:	782a      	ldrb	r2, [r5, #0]
 80100e6:	2a2a      	cmp	r2, #42	; 0x2a
 80100e8:	d015      	beq.n	8010116 <_svfiprintf_r+0xea>
 80100ea:	462f      	mov	r7, r5
 80100ec:	2000      	movs	r0, #0
 80100ee:	250a      	movs	r5, #10
 80100f0:	9a07      	ldr	r2, [sp, #28]
 80100f2:	4639      	mov	r1, r7
 80100f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80100f8:	3b30      	subs	r3, #48	; 0x30
 80100fa:	2b09      	cmp	r3, #9
 80100fc:	d94d      	bls.n	801019a <_svfiprintf_r+0x16e>
 80100fe:	b1b8      	cbz	r0, 8010130 <_svfiprintf_r+0x104>
 8010100:	e00f      	b.n	8010122 <_svfiprintf_r+0xf6>
 8010102:	462f      	mov	r7, r5
 8010104:	e7b8      	b.n	8010078 <_svfiprintf_r+0x4c>
 8010106:	4a40      	ldr	r2, [pc, #256]	; (8010208 <_svfiprintf_r+0x1dc>)
 8010108:	463d      	mov	r5, r7
 801010a:	1a80      	subs	r0, r0, r2
 801010c:	fa0b f000 	lsl.w	r0, fp, r0
 8010110:	4318      	orrs	r0, r3
 8010112:	9004      	str	r0, [sp, #16]
 8010114:	e7d3      	b.n	80100be <_svfiprintf_r+0x92>
 8010116:	9a03      	ldr	r2, [sp, #12]
 8010118:	1d11      	adds	r1, r2, #4
 801011a:	6812      	ldr	r2, [r2, #0]
 801011c:	9103      	str	r1, [sp, #12]
 801011e:	2a00      	cmp	r2, #0
 8010120:	db01      	blt.n	8010126 <_svfiprintf_r+0xfa>
 8010122:	9207      	str	r2, [sp, #28]
 8010124:	e004      	b.n	8010130 <_svfiprintf_r+0x104>
 8010126:	4252      	negs	r2, r2
 8010128:	f043 0302 	orr.w	r3, r3, #2
 801012c:	9207      	str	r2, [sp, #28]
 801012e:	9304      	str	r3, [sp, #16]
 8010130:	783b      	ldrb	r3, [r7, #0]
 8010132:	2b2e      	cmp	r3, #46	; 0x2e
 8010134:	d10c      	bne.n	8010150 <_svfiprintf_r+0x124>
 8010136:	787b      	ldrb	r3, [r7, #1]
 8010138:	2b2a      	cmp	r3, #42	; 0x2a
 801013a:	d133      	bne.n	80101a4 <_svfiprintf_r+0x178>
 801013c:	9b03      	ldr	r3, [sp, #12]
 801013e:	3702      	adds	r7, #2
 8010140:	1d1a      	adds	r2, r3, #4
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	9203      	str	r2, [sp, #12]
 8010146:	2b00      	cmp	r3, #0
 8010148:	bfb8      	it	lt
 801014a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801014e:	9305      	str	r3, [sp, #20]
 8010150:	4d2e      	ldr	r5, [pc, #184]	; (801020c <_svfiprintf_r+0x1e0>)
 8010152:	2203      	movs	r2, #3
 8010154:	7839      	ldrb	r1, [r7, #0]
 8010156:	4628      	mov	r0, r5
 8010158:	f000 f9e8 	bl	801052c <memchr>
 801015c:	b138      	cbz	r0, 801016e <_svfiprintf_r+0x142>
 801015e:	2340      	movs	r3, #64	; 0x40
 8010160:	1b40      	subs	r0, r0, r5
 8010162:	fa03 f000 	lsl.w	r0, r3, r0
 8010166:	9b04      	ldr	r3, [sp, #16]
 8010168:	3701      	adds	r7, #1
 801016a:	4303      	orrs	r3, r0
 801016c:	9304      	str	r3, [sp, #16]
 801016e:	7839      	ldrb	r1, [r7, #0]
 8010170:	2206      	movs	r2, #6
 8010172:	4827      	ldr	r0, [pc, #156]	; (8010210 <_svfiprintf_r+0x1e4>)
 8010174:	1c7e      	adds	r6, r7, #1
 8010176:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801017a:	f000 f9d7 	bl	801052c <memchr>
 801017e:	2800      	cmp	r0, #0
 8010180:	d038      	beq.n	80101f4 <_svfiprintf_r+0x1c8>
 8010182:	4b24      	ldr	r3, [pc, #144]	; (8010214 <_svfiprintf_r+0x1e8>)
 8010184:	bb13      	cbnz	r3, 80101cc <_svfiprintf_r+0x1a0>
 8010186:	9b03      	ldr	r3, [sp, #12]
 8010188:	3307      	adds	r3, #7
 801018a:	f023 0307 	bic.w	r3, r3, #7
 801018e:	3308      	adds	r3, #8
 8010190:	9303      	str	r3, [sp, #12]
 8010192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010194:	444b      	add	r3, r9
 8010196:	9309      	str	r3, [sp, #36]	; 0x24
 8010198:	e76d      	b.n	8010076 <_svfiprintf_r+0x4a>
 801019a:	fb05 3202 	mla	r2, r5, r2, r3
 801019e:	2001      	movs	r0, #1
 80101a0:	460f      	mov	r7, r1
 80101a2:	e7a6      	b.n	80100f2 <_svfiprintf_r+0xc6>
 80101a4:	2300      	movs	r3, #0
 80101a6:	250a      	movs	r5, #10
 80101a8:	4619      	mov	r1, r3
 80101aa:	3701      	adds	r7, #1
 80101ac:	9305      	str	r3, [sp, #20]
 80101ae:	4638      	mov	r0, r7
 80101b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101b4:	3a30      	subs	r2, #48	; 0x30
 80101b6:	2a09      	cmp	r2, #9
 80101b8:	d903      	bls.n	80101c2 <_svfiprintf_r+0x196>
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d0c8      	beq.n	8010150 <_svfiprintf_r+0x124>
 80101be:	9105      	str	r1, [sp, #20]
 80101c0:	e7c6      	b.n	8010150 <_svfiprintf_r+0x124>
 80101c2:	fb05 2101 	mla	r1, r5, r1, r2
 80101c6:	2301      	movs	r3, #1
 80101c8:	4607      	mov	r7, r0
 80101ca:	e7f0      	b.n	80101ae <_svfiprintf_r+0x182>
 80101cc:	ab03      	add	r3, sp, #12
 80101ce:	9300      	str	r3, [sp, #0]
 80101d0:	4622      	mov	r2, r4
 80101d2:	4b11      	ldr	r3, [pc, #68]	; (8010218 <_svfiprintf_r+0x1ec>)
 80101d4:	a904      	add	r1, sp, #16
 80101d6:	4640      	mov	r0, r8
 80101d8:	f3af 8000 	nop.w
 80101dc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80101e0:	4681      	mov	r9, r0
 80101e2:	d1d6      	bne.n	8010192 <_svfiprintf_r+0x166>
 80101e4:	89a3      	ldrh	r3, [r4, #12]
 80101e6:	065b      	lsls	r3, r3, #25
 80101e8:	f53f af35 	bmi.w	8010056 <_svfiprintf_r+0x2a>
 80101ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80101ee:	b01d      	add	sp, #116	; 0x74
 80101f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101f4:	ab03      	add	r3, sp, #12
 80101f6:	9300      	str	r3, [sp, #0]
 80101f8:	4622      	mov	r2, r4
 80101fa:	4b07      	ldr	r3, [pc, #28]	; (8010218 <_svfiprintf_r+0x1ec>)
 80101fc:	a904      	add	r1, sp, #16
 80101fe:	4640      	mov	r0, r8
 8010200:	f000 f882 	bl	8010308 <_printf_i>
 8010204:	e7ea      	b.n	80101dc <_svfiprintf_r+0x1b0>
 8010206:	bf00      	nop
 8010208:	08010b20 	.word	0x08010b20
 801020c:	08010b26 	.word	0x08010b26
 8010210:	08010b2a 	.word	0x08010b2a
 8010214:	00000000 	.word	0x00000000
 8010218:	0800ff77 	.word	0x0800ff77

0801021c <_printf_common>:
 801021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010220:	4691      	mov	r9, r2
 8010222:	461f      	mov	r7, r3
 8010224:	688a      	ldr	r2, [r1, #8]
 8010226:	690b      	ldr	r3, [r1, #16]
 8010228:	4606      	mov	r6, r0
 801022a:	4293      	cmp	r3, r2
 801022c:	bfb8      	it	lt
 801022e:	4613      	movlt	r3, r2
 8010230:	f8c9 3000 	str.w	r3, [r9]
 8010234:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010238:	460c      	mov	r4, r1
 801023a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801023e:	b112      	cbz	r2, 8010246 <_printf_common+0x2a>
 8010240:	3301      	adds	r3, #1
 8010242:	f8c9 3000 	str.w	r3, [r9]
 8010246:	6823      	ldr	r3, [r4, #0]
 8010248:	0699      	lsls	r1, r3, #26
 801024a:	bf42      	ittt	mi
 801024c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010250:	3302      	addmi	r3, #2
 8010252:	f8c9 3000 	strmi.w	r3, [r9]
 8010256:	6825      	ldr	r5, [r4, #0]
 8010258:	f015 0506 	ands.w	r5, r5, #6
 801025c:	d107      	bne.n	801026e <_printf_common+0x52>
 801025e:	f104 0a19 	add.w	sl, r4, #25
 8010262:	68e3      	ldr	r3, [r4, #12]
 8010264:	f8d9 2000 	ldr.w	r2, [r9]
 8010268:	1a9b      	subs	r3, r3, r2
 801026a:	42ab      	cmp	r3, r5
 801026c:	dc29      	bgt.n	80102c2 <_printf_common+0xa6>
 801026e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010272:	6822      	ldr	r2, [r4, #0]
 8010274:	3300      	adds	r3, #0
 8010276:	bf18      	it	ne
 8010278:	2301      	movne	r3, #1
 801027a:	0692      	lsls	r2, r2, #26
 801027c:	d42e      	bmi.n	80102dc <_printf_common+0xc0>
 801027e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010282:	4639      	mov	r1, r7
 8010284:	4630      	mov	r0, r6
 8010286:	47c0      	blx	r8
 8010288:	3001      	adds	r0, #1
 801028a:	d021      	beq.n	80102d0 <_printf_common+0xb4>
 801028c:	6823      	ldr	r3, [r4, #0]
 801028e:	68e5      	ldr	r5, [r4, #12]
 8010290:	f003 0306 	and.w	r3, r3, #6
 8010294:	2b04      	cmp	r3, #4
 8010296:	bf18      	it	ne
 8010298:	2500      	movne	r5, #0
 801029a:	f8d9 2000 	ldr.w	r2, [r9]
 801029e:	f04f 0900 	mov.w	r9, #0
 80102a2:	bf08      	it	eq
 80102a4:	1aad      	subeq	r5, r5, r2
 80102a6:	68a3      	ldr	r3, [r4, #8]
 80102a8:	6922      	ldr	r2, [r4, #16]
 80102aa:	bf08      	it	eq
 80102ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80102b0:	4293      	cmp	r3, r2
 80102b2:	bfc4      	itt	gt
 80102b4:	1a9b      	subgt	r3, r3, r2
 80102b6:	18ed      	addgt	r5, r5, r3
 80102b8:	341a      	adds	r4, #26
 80102ba:	454d      	cmp	r5, r9
 80102bc:	d11a      	bne.n	80102f4 <_printf_common+0xd8>
 80102be:	2000      	movs	r0, #0
 80102c0:	e008      	b.n	80102d4 <_printf_common+0xb8>
 80102c2:	2301      	movs	r3, #1
 80102c4:	4652      	mov	r2, sl
 80102c6:	4639      	mov	r1, r7
 80102c8:	4630      	mov	r0, r6
 80102ca:	47c0      	blx	r8
 80102cc:	3001      	adds	r0, #1
 80102ce:	d103      	bne.n	80102d8 <_printf_common+0xbc>
 80102d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80102d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102d8:	3501      	adds	r5, #1
 80102da:	e7c2      	b.n	8010262 <_printf_common+0x46>
 80102dc:	2030      	movs	r0, #48	; 0x30
 80102de:	18e1      	adds	r1, r4, r3
 80102e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80102e4:	1c5a      	adds	r2, r3, #1
 80102e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80102ea:	4422      	add	r2, r4
 80102ec:	3302      	adds	r3, #2
 80102ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80102f2:	e7c4      	b.n	801027e <_printf_common+0x62>
 80102f4:	2301      	movs	r3, #1
 80102f6:	4622      	mov	r2, r4
 80102f8:	4639      	mov	r1, r7
 80102fa:	4630      	mov	r0, r6
 80102fc:	47c0      	blx	r8
 80102fe:	3001      	adds	r0, #1
 8010300:	d0e6      	beq.n	80102d0 <_printf_common+0xb4>
 8010302:	f109 0901 	add.w	r9, r9, #1
 8010306:	e7d8      	b.n	80102ba <_printf_common+0x9e>

08010308 <_printf_i>:
 8010308:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801030c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010310:	460c      	mov	r4, r1
 8010312:	7e09      	ldrb	r1, [r1, #24]
 8010314:	b085      	sub	sp, #20
 8010316:	296e      	cmp	r1, #110	; 0x6e
 8010318:	4617      	mov	r7, r2
 801031a:	4606      	mov	r6, r0
 801031c:	4698      	mov	r8, r3
 801031e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010320:	f000 80b3 	beq.w	801048a <_printf_i+0x182>
 8010324:	d822      	bhi.n	801036c <_printf_i+0x64>
 8010326:	2963      	cmp	r1, #99	; 0x63
 8010328:	d036      	beq.n	8010398 <_printf_i+0x90>
 801032a:	d80a      	bhi.n	8010342 <_printf_i+0x3a>
 801032c:	2900      	cmp	r1, #0
 801032e:	f000 80b9 	beq.w	80104a4 <_printf_i+0x19c>
 8010332:	2958      	cmp	r1, #88	; 0x58
 8010334:	f000 8083 	beq.w	801043e <_printf_i+0x136>
 8010338:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801033c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010340:	e032      	b.n	80103a8 <_printf_i+0xa0>
 8010342:	2964      	cmp	r1, #100	; 0x64
 8010344:	d001      	beq.n	801034a <_printf_i+0x42>
 8010346:	2969      	cmp	r1, #105	; 0x69
 8010348:	d1f6      	bne.n	8010338 <_printf_i+0x30>
 801034a:	6820      	ldr	r0, [r4, #0]
 801034c:	6813      	ldr	r3, [r2, #0]
 801034e:	0605      	lsls	r5, r0, #24
 8010350:	f103 0104 	add.w	r1, r3, #4
 8010354:	d52a      	bpl.n	80103ac <_printf_i+0xa4>
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	6011      	str	r1, [r2, #0]
 801035a:	2b00      	cmp	r3, #0
 801035c:	da03      	bge.n	8010366 <_printf_i+0x5e>
 801035e:	222d      	movs	r2, #45	; 0x2d
 8010360:	425b      	negs	r3, r3
 8010362:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010366:	486f      	ldr	r0, [pc, #444]	; (8010524 <_printf_i+0x21c>)
 8010368:	220a      	movs	r2, #10
 801036a:	e039      	b.n	80103e0 <_printf_i+0xd8>
 801036c:	2973      	cmp	r1, #115	; 0x73
 801036e:	f000 809d 	beq.w	80104ac <_printf_i+0x1a4>
 8010372:	d808      	bhi.n	8010386 <_printf_i+0x7e>
 8010374:	296f      	cmp	r1, #111	; 0x6f
 8010376:	d020      	beq.n	80103ba <_printf_i+0xb2>
 8010378:	2970      	cmp	r1, #112	; 0x70
 801037a:	d1dd      	bne.n	8010338 <_printf_i+0x30>
 801037c:	6823      	ldr	r3, [r4, #0]
 801037e:	f043 0320 	orr.w	r3, r3, #32
 8010382:	6023      	str	r3, [r4, #0]
 8010384:	e003      	b.n	801038e <_printf_i+0x86>
 8010386:	2975      	cmp	r1, #117	; 0x75
 8010388:	d017      	beq.n	80103ba <_printf_i+0xb2>
 801038a:	2978      	cmp	r1, #120	; 0x78
 801038c:	d1d4      	bne.n	8010338 <_printf_i+0x30>
 801038e:	2378      	movs	r3, #120	; 0x78
 8010390:	4865      	ldr	r0, [pc, #404]	; (8010528 <_printf_i+0x220>)
 8010392:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010396:	e055      	b.n	8010444 <_printf_i+0x13c>
 8010398:	6813      	ldr	r3, [r2, #0]
 801039a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801039e:	1d19      	adds	r1, r3, #4
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	6011      	str	r1, [r2, #0]
 80103a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80103a8:	2301      	movs	r3, #1
 80103aa:	e08c      	b.n	80104c6 <_printf_i+0x1be>
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80103b2:	6011      	str	r1, [r2, #0]
 80103b4:	bf18      	it	ne
 80103b6:	b21b      	sxthne	r3, r3
 80103b8:	e7cf      	b.n	801035a <_printf_i+0x52>
 80103ba:	6813      	ldr	r3, [r2, #0]
 80103bc:	6825      	ldr	r5, [r4, #0]
 80103be:	1d18      	adds	r0, r3, #4
 80103c0:	6010      	str	r0, [r2, #0]
 80103c2:	0628      	lsls	r0, r5, #24
 80103c4:	d501      	bpl.n	80103ca <_printf_i+0xc2>
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	e002      	b.n	80103d0 <_printf_i+0xc8>
 80103ca:	0668      	lsls	r0, r5, #25
 80103cc:	d5fb      	bpl.n	80103c6 <_printf_i+0xbe>
 80103ce:	881b      	ldrh	r3, [r3, #0]
 80103d0:	296f      	cmp	r1, #111	; 0x6f
 80103d2:	bf14      	ite	ne
 80103d4:	220a      	movne	r2, #10
 80103d6:	2208      	moveq	r2, #8
 80103d8:	4852      	ldr	r0, [pc, #328]	; (8010524 <_printf_i+0x21c>)
 80103da:	2100      	movs	r1, #0
 80103dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80103e0:	6865      	ldr	r5, [r4, #4]
 80103e2:	2d00      	cmp	r5, #0
 80103e4:	60a5      	str	r5, [r4, #8]
 80103e6:	f2c0 8095 	blt.w	8010514 <_printf_i+0x20c>
 80103ea:	6821      	ldr	r1, [r4, #0]
 80103ec:	f021 0104 	bic.w	r1, r1, #4
 80103f0:	6021      	str	r1, [r4, #0]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d13d      	bne.n	8010472 <_printf_i+0x16a>
 80103f6:	2d00      	cmp	r5, #0
 80103f8:	f040 808e 	bne.w	8010518 <_printf_i+0x210>
 80103fc:	4665      	mov	r5, ip
 80103fe:	2a08      	cmp	r2, #8
 8010400:	d10b      	bne.n	801041a <_printf_i+0x112>
 8010402:	6823      	ldr	r3, [r4, #0]
 8010404:	07db      	lsls	r3, r3, #31
 8010406:	d508      	bpl.n	801041a <_printf_i+0x112>
 8010408:	6923      	ldr	r3, [r4, #16]
 801040a:	6862      	ldr	r2, [r4, #4]
 801040c:	429a      	cmp	r2, r3
 801040e:	bfde      	ittt	le
 8010410:	2330      	movle	r3, #48	; 0x30
 8010412:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010416:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801041a:	ebac 0305 	sub.w	r3, ip, r5
 801041e:	6123      	str	r3, [r4, #16]
 8010420:	f8cd 8000 	str.w	r8, [sp]
 8010424:	463b      	mov	r3, r7
 8010426:	aa03      	add	r2, sp, #12
 8010428:	4621      	mov	r1, r4
 801042a:	4630      	mov	r0, r6
 801042c:	f7ff fef6 	bl	801021c <_printf_common>
 8010430:	3001      	adds	r0, #1
 8010432:	d14d      	bne.n	80104d0 <_printf_i+0x1c8>
 8010434:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010438:	b005      	add	sp, #20
 801043a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801043e:	4839      	ldr	r0, [pc, #228]	; (8010524 <_printf_i+0x21c>)
 8010440:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010444:	6813      	ldr	r3, [r2, #0]
 8010446:	6821      	ldr	r1, [r4, #0]
 8010448:	1d1d      	adds	r5, r3, #4
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	6015      	str	r5, [r2, #0]
 801044e:	060a      	lsls	r2, r1, #24
 8010450:	d50b      	bpl.n	801046a <_printf_i+0x162>
 8010452:	07ca      	lsls	r2, r1, #31
 8010454:	bf44      	itt	mi
 8010456:	f041 0120 	orrmi.w	r1, r1, #32
 801045a:	6021      	strmi	r1, [r4, #0]
 801045c:	b91b      	cbnz	r3, 8010466 <_printf_i+0x15e>
 801045e:	6822      	ldr	r2, [r4, #0]
 8010460:	f022 0220 	bic.w	r2, r2, #32
 8010464:	6022      	str	r2, [r4, #0]
 8010466:	2210      	movs	r2, #16
 8010468:	e7b7      	b.n	80103da <_printf_i+0xd2>
 801046a:	064d      	lsls	r5, r1, #25
 801046c:	bf48      	it	mi
 801046e:	b29b      	uxthmi	r3, r3
 8010470:	e7ef      	b.n	8010452 <_printf_i+0x14a>
 8010472:	4665      	mov	r5, ip
 8010474:	fbb3 f1f2 	udiv	r1, r3, r2
 8010478:	fb02 3311 	mls	r3, r2, r1, r3
 801047c:	5cc3      	ldrb	r3, [r0, r3]
 801047e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010482:	460b      	mov	r3, r1
 8010484:	2900      	cmp	r1, #0
 8010486:	d1f5      	bne.n	8010474 <_printf_i+0x16c>
 8010488:	e7b9      	b.n	80103fe <_printf_i+0xf6>
 801048a:	6813      	ldr	r3, [r2, #0]
 801048c:	6825      	ldr	r5, [r4, #0]
 801048e:	1d18      	adds	r0, r3, #4
 8010490:	6961      	ldr	r1, [r4, #20]
 8010492:	6010      	str	r0, [r2, #0]
 8010494:	0628      	lsls	r0, r5, #24
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	d501      	bpl.n	801049e <_printf_i+0x196>
 801049a:	6019      	str	r1, [r3, #0]
 801049c:	e002      	b.n	80104a4 <_printf_i+0x19c>
 801049e:	066a      	lsls	r2, r5, #25
 80104a0:	d5fb      	bpl.n	801049a <_printf_i+0x192>
 80104a2:	8019      	strh	r1, [r3, #0]
 80104a4:	2300      	movs	r3, #0
 80104a6:	4665      	mov	r5, ip
 80104a8:	6123      	str	r3, [r4, #16]
 80104aa:	e7b9      	b.n	8010420 <_printf_i+0x118>
 80104ac:	6813      	ldr	r3, [r2, #0]
 80104ae:	1d19      	adds	r1, r3, #4
 80104b0:	6011      	str	r1, [r2, #0]
 80104b2:	681d      	ldr	r5, [r3, #0]
 80104b4:	6862      	ldr	r2, [r4, #4]
 80104b6:	2100      	movs	r1, #0
 80104b8:	4628      	mov	r0, r5
 80104ba:	f000 f837 	bl	801052c <memchr>
 80104be:	b108      	cbz	r0, 80104c4 <_printf_i+0x1bc>
 80104c0:	1b40      	subs	r0, r0, r5
 80104c2:	6060      	str	r0, [r4, #4]
 80104c4:	6863      	ldr	r3, [r4, #4]
 80104c6:	6123      	str	r3, [r4, #16]
 80104c8:	2300      	movs	r3, #0
 80104ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80104ce:	e7a7      	b.n	8010420 <_printf_i+0x118>
 80104d0:	6923      	ldr	r3, [r4, #16]
 80104d2:	462a      	mov	r2, r5
 80104d4:	4639      	mov	r1, r7
 80104d6:	4630      	mov	r0, r6
 80104d8:	47c0      	blx	r8
 80104da:	3001      	adds	r0, #1
 80104dc:	d0aa      	beq.n	8010434 <_printf_i+0x12c>
 80104de:	6823      	ldr	r3, [r4, #0]
 80104e0:	079b      	lsls	r3, r3, #30
 80104e2:	d413      	bmi.n	801050c <_printf_i+0x204>
 80104e4:	68e0      	ldr	r0, [r4, #12]
 80104e6:	9b03      	ldr	r3, [sp, #12]
 80104e8:	4298      	cmp	r0, r3
 80104ea:	bfb8      	it	lt
 80104ec:	4618      	movlt	r0, r3
 80104ee:	e7a3      	b.n	8010438 <_printf_i+0x130>
 80104f0:	2301      	movs	r3, #1
 80104f2:	464a      	mov	r2, r9
 80104f4:	4639      	mov	r1, r7
 80104f6:	4630      	mov	r0, r6
 80104f8:	47c0      	blx	r8
 80104fa:	3001      	adds	r0, #1
 80104fc:	d09a      	beq.n	8010434 <_printf_i+0x12c>
 80104fe:	3501      	adds	r5, #1
 8010500:	68e3      	ldr	r3, [r4, #12]
 8010502:	9a03      	ldr	r2, [sp, #12]
 8010504:	1a9b      	subs	r3, r3, r2
 8010506:	42ab      	cmp	r3, r5
 8010508:	dcf2      	bgt.n	80104f0 <_printf_i+0x1e8>
 801050a:	e7eb      	b.n	80104e4 <_printf_i+0x1dc>
 801050c:	2500      	movs	r5, #0
 801050e:	f104 0919 	add.w	r9, r4, #25
 8010512:	e7f5      	b.n	8010500 <_printf_i+0x1f8>
 8010514:	2b00      	cmp	r3, #0
 8010516:	d1ac      	bne.n	8010472 <_printf_i+0x16a>
 8010518:	7803      	ldrb	r3, [r0, #0]
 801051a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801051e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010522:	e76c      	b.n	80103fe <_printf_i+0xf6>
 8010524:	08010b31 	.word	0x08010b31
 8010528:	08010b42 	.word	0x08010b42

0801052c <memchr>:
 801052c:	b510      	push	{r4, lr}
 801052e:	b2c9      	uxtb	r1, r1
 8010530:	4402      	add	r2, r0
 8010532:	4290      	cmp	r0, r2
 8010534:	4603      	mov	r3, r0
 8010536:	d101      	bne.n	801053c <memchr+0x10>
 8010538:	2300      	movs	r3, #0
 801053a:	e003      	b.n	8010544 <memchr+0x18>
 801053c:	781c      	ldrb	r4, [r3, #0]
 801053e:	3001      	adds	r0, #1
 8010540:	428c      	cmp	r4, r1
 8010542:	d1f6      	bne.n	8010532 <memchr+0x6>
 8010544:	4618      	mov	r0, r3
 8010546:	bd10      	pop	{r4, pc}

08010548 <memcpy>:
 8010548:	b510      	push	{r4, lr}
 801054a:	1e43      	subs	r3, r0, #1
 801054c:	440a      	add	r2, r1
 801054e:	4291      	cmp	r1, r2
 8010550:	d100      	bne.n	8010554 <memcpy+0xc>
 8010552:	bd10      	pop	{r4, pc}
 8010554:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010558:	f803 4f01 	strb.w	r4, [r3, #1]!
 801055c:	e7f7      	b.n	801054e <memcpy+0x6>

0801055e <memmove>:
 801055e:	4288      	cmp	r0, r1
 8010560:	b510      	push	{r4, lr}
 8010562:	eb01 0302 	add.w	r3, r1, r2
 8010566:	d807      	bhi.n	8010578 <memmove+0x1a>
 8010568:	1e42      	subs	r2, r0, #1
 801056a:	4299      	cmp	r1, r3
 801056c:	d00a      	beq.n	8010584 <memmove+0x26>
 801056e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010572:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010576:	e7f8      	b.n	801056a <memmove+0xc>
 8010578:	4283      	cmp	r3, r0
 801057a:	d9f5      	bls.n	8010568 <memmove+0xa>
 801057c:	1881      	adds	r1, r0, r2
 801057e:	1ad2      	subs	r2, r2, r3
 8010580:	42d3      	cmn	r3, r2
 8010582:	d100      	bne.n	8010586 <memmove+0x28>
 8010584:	bd10      	pop	{r4, pc}
 8010586:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801058a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801058e:	e7f7      	b.n	8010580 <memmove+0x22>

08010590 <_realloc_r>:
 8010590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010592:	4607      	mov	r7, r0
 8010594:	4614      	mov	r4, r2
 8010596:	460e      	mov	r6, r1
 8010598:	b921      	cbnz	r1, 80105a4 <_realloc_r+0x14>
 801059a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801059e:	4611      	mov	r1, r2
 80105a0:	f7ff bc02 	b.w	800fda8 <_malloc_r>
 80105a4:	b922      	cbnz	r2, 80105b0 <_realloc_r+0x20>
 80105a6:	f7ff fbb3 	bl	800fd10 <_free_r>
 80105aa:	4625      	mov	r5, r4
 80105ac:	4628      	mov	r0, r5
 80105ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105b0:	f000 f814 	bl	80105dc <_malloc_usable_size_r>
 80105b4:	42a0      	cmp	r0, r4
 80105b6:	d20f      	bcs.n	80105d8 <_realloc_r+0x48>
 80105b8:	4621      	mov	r1, r4
 80105ba:	4638      	mov	r0, r7
 80105bc:	f7ff fbf4 	bl	800fda8 <_malloc_r>
 80105c0:	4605      	mov	r5, r0
 80105c2:	2800      	cmp	r0, #0
 80105c4:	d0f2      	beq.n	80105ac <_realloc_r+0x1c>
 80105c6:	4631      	mov	r1, r6
 80105c8:	4622      	mov	r2, r4
 80105ca:	f7ff ffbd 	bl	8010548 <memcpy>
 80105ce:	4631      	mov	r1, r6
 80105d0:	4638      	mov	r0, r7
 80105d2:	f7ff fb9d 	bl	800fd10 <_free_r>
 80105d6:	e7e9      	b.n	80105ac <_realloc_r+0x1c>
 80105d8:	4635      	mov	r5, r6
 80105da:	e7e7      	b.n	80105ac <_realloc_r+0x1c>

080105dc <_malloc_usable_size_r>:
 80105dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80105e0:	1f18      	subs	r0, r3, #4
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	bfbc      	itt	lt
 80105e6:	580b      	ldrlt	r3, [r1, r0]
 80105e8:	18c0      	addlt	r0, r0, r3
 80105ea:	4770      	bx	lr

080105ec <_init>:
 80105ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105ee:	bf00      	nop
 80105f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105f2:	bc08      	pop	{r3}
 80105f4:	469e      	mov	lr, r3
 80105f6:	4770      	bx	lr

080105f8 <_fini>:
 80105f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105fa:	bf00      	nop
 80105fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105fe:	bc08      	pop	{r3}
 8010600:	469e      	mov	lr, r3
 8010602:	4770      	bx	lr
